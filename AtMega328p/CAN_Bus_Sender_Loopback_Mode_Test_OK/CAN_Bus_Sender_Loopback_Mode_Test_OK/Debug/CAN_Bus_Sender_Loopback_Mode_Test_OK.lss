
CAN_Bus_Sender_Loopback_Mode_Test_OK.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006c  00800200  00000720  00000794  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000720  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000800  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000110  00000000  00000000  00000830  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000016c1  00000000  00000000  00000940  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000738  00000000  00000000  00002001  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000bb1  00000000  00000000  00002739  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000294  00000000  00000000  000032ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000044f  00000000  00000000  00003580  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000a51  00000000  00000000  000039cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000f8  00000000  00000000  00004420  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	86 c0       	rjmp	.+268    	; 0x112 <__bad_interrupt>
   6:	00 00       	nop
   8:	84 c0       	rjmp	.+264    	; 0x112 <__bad_interrupt>
   a:	00 00       	nop
   c:	82 c0       	rjmp	.+260    	; 0x112 <__bad_interrupt>
   e:	00 00       	nop
  10:	80 c0       	rjmp	.+256    	; 0x112 <__bad_interrupt>
  12:	00 00       	nop
  14:	7e c0       	rjmp	.+252    	; 0x112 <__bad_interrupt>
  16:	00 00       	nop
  18:	7c c0       	rjmp	.+248    	; 0x112 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7a c0       	rjmp	.+244    	; 0x112 <__bad_interrupt>
  1e:	00 00       	nop
  20:	78 c0       	rjmp	.+240    	; 0x112 <__bad_interrupt>
  22:	00 00       	nop
  24:	76 c0       	rjmp	.+236    	; 0x112 <__bad_interrupt>
  26:	00 00       	nop
  28:	74 c0       	rjmp	.+232    	; 0x112 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	72 c0       	rjmp	.+228    	; 0x112 <__bad_interrupt>
  2e:	00 00       	nop
  30:	70 c0       	rjmp	.+224    	; 0x112 <__bad_interrupt>
  32:	00 00       	nop
  34:	6e c0       	rjmp	.+220    	; 0x112 <__bad_interrupt>
  36:	00 00       	nop
  38:	6c c0       	rjmp	.+216    	; 0x112 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6a c0       	rjmp	.+212    	; 0x112 <__bad_interrupt>
  3e:	00 00       	nop
  40:	68 c0       	rjmp	.+208    	; 0x112 <__bad_interrupt>
  42:	00 00       	nop
  44:	66 c0       	rjmp	.+204    	; 0x112 <__bad_interrupt>
  46:	00 00       	nop
  48:	64 c0       	rjmp	.+200    	; 0x112 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	62 c0       	rjmp	.+196    	; 0x112 <__bad_interrupt>
  4e:	00 00       	nop
  50:	60 c0       	rjmp	.+192    	; 0x112 <__bad_interrupt>
  52:	00 00       	nop
  54:	5e c0       	rjmp	.+188    	; 0x112 <__bad_interrupt>
  56:	00 00       	nop
  58:	5c c0       	rjmp	.+184    	; 0x112 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5a c0       	rjmp	.+180    	; 0x112 <__bad_interrupt>
  5e:	00 00       	nop
  60:	58 c0       	rjmp	.+176    	; 0x112 <__bad_interrupt>
  62:	00 00       	nop
  64:	56 c0       	rjmp	.+172    	; 0x112 <__bad_interrupt>
  66:	00 00       	nop
  68:	54 c0       	rjmp	.+168    	; 0x112 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	52 c0       	rjmp	.+164    	; 0x112 <__bad_interrupt>
  6e:	00 00       	nop
  70:	50 c0       	rjmp	.+160    	; 0x112 <__bad_interrupt>
  72:	00 00       	nop
  74:	4e c0       	rjmp	.+156    	; 0x112 <__bad_interrupt>
  76:	00 00       	nop
  78:	4c c0       	rjmp	.+152    	; 0x112 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4a c0       	rjmp	.+148    	; 0x112 <__bad_interrupt>
  7e:	00 00       	nop
  80:	48 c0       	rjmp	.+144    	; 0x112 <__bad_interrupt>
  82:	00 00       	nop
  84:	46 c0       	rjmp	.+140    	; 0x112 <__bad_interrupt>
  86:	00 00       	nop
  88:	44 c0       	rjmp	.+136    	; 0x112 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	42 c0       	rjmp	.+132    	; 0x112 <__bad_interrupt>
  8e:	00 00       	nop
  90:	40 c0       	rjmp	.+128    	; 0x112 <__bad_interrupt>
  92:	00 00       	nop
  94:	3e c0       	rjmp	.+124    	; 0x112 <__bad_interrupt>
  96:	00 00       	nop
  98:	3c c0       	rjmp	.+120    	; 0x112 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	3a c0       	rjmp	.+116    	; 0x112 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	38 c0       	rjmp	.+112    	; 0x112 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	36 c0       	rjmp	.+108    	; 0x112 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	34 c0       	rjmp	.+104    	; 0x112 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	32 c0       	rjmp	.+100    	; 0x112 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	30 c0       	rjmp	.+96     	; 0x112 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	2e c0       	rjmp	.+92     	; 0x112 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	2c c0       	rjmp	.+88     	; 0x112 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	2a c0       	rjmp	.+84     	; 0x112 <__bad_interrupt>
  be:	00 00       	nop
  c0:	28 c0       	rjmp	.+80     	; 0x112 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	26 c0       	rjmp	.+76     	; 0x112 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	24 c0       	rjmp	.+72     	; 0x112 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	22 c0       	rjmp	.+68     	; 0x112 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	20 c0       	rjmp	.+64     	; 0x112 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	1e c0       	rjmp	.+60     	; 0x112 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	1c c0       	rjmp	.+56     	; 0x112 <__bad_interrupt>
  da:	00 00       	nop
  dc:	1a c0       	rjmp	.+52     	; 0x112 <__bad_interrupt>
  de:	00 00       	nop
  e0:	18 c0       	rjmp	.+48     	; 0x112 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e0 e2       	ldi	r30, 0x20	; 32
  fc:	f7 e0       	ldi	r31, 0x07	; 7
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ac 36       	cpi	r26, 0x6C	; 108
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	68 d0       	rcall	.+208    	; 0x1e0 <main>
 110:	05 c3       	rjmp	.+1546   	; 0x71c <_exit>

00000112 <__bad_interrupt>:
 112:	76 cf       	rjmp	.-276    	; 0x0 <__vectors>

00000114 <spi_init>:
#include "MCP2515/mcp2515.h"

void spi_init()
{
	//Set MOSI, SCK and SS as output
	DDRB |= (1 << PB2) | (1 << PB1) | (1 << PB0);
 114:	84 b1       	in	r24, 0x04	; 4
 116:	87 60       	ori	r24, 0x07	; 7
 118:	84 b9       	out	0x04, r24	; 4
 11a:	08 95       	ret

0000011c <print_message>:
}

void print_message(tCAN *message)
{
 11c:	0f 93       	push	r16
 11e:	1f 93       	push	r17
 120:	cf 93       	push	r28
 122:	df 93       	push	r29
 124:	cd b7       	in	r28, 0x3d	; 61
 126:	de b7       	in	r29, 0x3e	; 62
 128:	27 97       	sbiw	r28, 0x07	; 7
 12a:	0f b6       	in	r0, 0x3f	; 63
 12c:	f8 94       	cli
 12e:	de bf       	out	0x3e, r29	; 62
 130:	0f be       	out	0x3f, r0	; 63
 132:	cd bf       	out	0x3d, r28	; 61
 134:	8c 01       	movw	r16, r24
	//LCD clear screen
	lcd_clrscr();
 136:	1a d1       	rcall	.+564    	; 0x36c <lcd_clrscr>
	lcd_home();
 138:	1c d1       	rcall	.+568    	; 0x372 <lcd_home>
	lcd_puts("ID ");
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	92 e0       	ldi	r25, 0x02	; 2
 13e:	28 d1       	rcall	.+592    	; 0x390 <lcd_puts>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 140:	4a e0       	ldi	r20, 0x0A	; 10
 142:	be 01       	movw	r22, r28
 144:	6f 5f       	subi	r22, 0xFF	; 255
 146:	7f 4f       	sbci	r23, 0xFF	; 255
 148:	f8 01       	movw	r30, r16
 14a:	80 81       	ld	r24, Z
 14c:	91 81       	ldd	r25, Z+1	; 0x01
 14e:	b3 d2       	rcall	.+1382   	; 0x6b6 <__itoa_ncheck>
	//Variables that holds the ID and data values received and converted with itoa function
	char varID[3], varData0[2], varData1[2];
	itoa(message->id, varID, 10);
	lcd_gotoxy(3, 0);
 150:	60 e0       	ldi	r22, 0x00	; 0
 152:	83 e0       	ldi	r24, 0x03	; 3
 154:	03 d1       	rcall	.+518    	; 0x35c <lcd_gotoxy>
	lcd_puts(varID);
 156:	ce 01       	movw	r24, r28
 158:	01 96       	adiw	r24, 0x01	; 1
 15a:	1a d1       	rcall	.+564    	; 0x390 <lcd_puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15c:	ff ef       	ldi	r31, 0xFF	; 255
 15e:	23 ed       	ldi	r18, 0xD3	; 211
 160:	80 e3       	ldi	r24, 0x30	; 48
 162:	f1 50       	subi	r31, 0x01	; 1
 164:	20 40       	sbci	r18, 0x00	; 0
 166:	80 40       	sbci	r24, 0x00	; 0
 168:	e1 f7       	brne	.-8      	; 0x162 <print_message+0x46>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <print_message+0x50>
 16c:	00 00       	nop
	_delay_ms(1000);
	lcd_gotoxy(0, 1);
 16e:	61 e0       	ldi	r22, 0x01	; 1
 170:	80 e0       	ldi	r24, 0x00	; 0
 172:	f4 d0       	rcall	.+488    	; 0x35c <lcd_gotoxy>
	itoa(message->data[0], varData0, 10);
 174:	f8 01       	movw	r30, r16
 176:	83 81       	ldd	r24, Z+3	; 0x03
 178:	4a e0       	ldi	r20, 0x0A	; 10
 17a:	be 01       	movw	r22, r28
 17c:	6c 5f       	subi	r22, 0xFC	; 252
 17e:	7f 4f       	sbci	r23, 0xFF	; 255
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	99 d2       	rcall	.+1330   	; 0x6b6 <__itoa_ncheck>
	lcd_puts(varData0);
 184:	ce 01       	movw	r24, r28
 186:	04 96       	adiw	r24, 0x04	; 4
 188:	03 d1       	rcall	.+518    	; 0x390 <lcd_puts>
 18a:	ff ef       	ldi	r31, 0xFF	; 255
 18c:	23 ed       	ldi	r18, 0xD3	; 211
 18e:	80 e3       	ldi	r24, 0x30	; 48
 190:	f1 50       	subi	r31, 0x01	; 1
 192:	20 40       	sbci	r18, 0x00	; 0
 194:	80 40       	sbci	r24, 0x00	; 0
 196:	e1 f7       	brne	.-8      	; 0x190 <print_message+0x74>
 198:	00 c0       	rjmp	.+0      	; 0x19a <print_message+0x7e>
 19a:	00 00       	nop
	_delay_ms(1000);
	lcd_gotoxy(4, 1);
 19c:	61 e0       	ldi	r22, 0x01	; 1
 19e:	84 e0       	ldi	r24, 0x04	; 4
 1a0:	dd d0       	rcall	.+442    	; 0x35c <lcd_gotoxy>
	itoa(message->data[1], varData1, 10);
 1a2:	f8 01       	movw	r30, r16
 1a4:	84 81       	ldd	r24, Z+4	; 0x04
 1a6:	4a e0       	ldi	r20, 0x0A	; 10
 1a8:	be 01       	movw	r22, r28
 1aa:	6a 5f       	subi	r22, 0xFA	; 250
 1ac:	7f 4f       	sbci	r23, 0xFF	; 255
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	82 d2       	rcall	.+1284   	; 0x6b6 <__itoa_ncheck>
	lcd_puts(varData1);
 1b2:	ce 01       	movw	r24, r28
 1b4:	06 96       	adiw	r24, 0x06	; 6
 1b6:	ec d0       	rcall	.+472    	; 0x390 <lcd_puts>
 1b8:	ff ef       	ldi	r31, 0xFF	; 255
 1ba:	23 ed       	ldi	r18, 0xD3	; 211
 1bc:	80 e3       	ldi	r24, 0x30	; 48
 1be:	f1 50       	subi	r31, 0x01	; 1
 1c0:	20 40       	sbci	r18, 0x00	; 0
 1c2:	80 40       	sbci	r24, 0x00	; 0
 1c4:	e1 f7       	brne	.-8      	; 0x1be <print_message+0xa2>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <print_message+0xac>
 1c8:	00 00       	nop
	_delay_ms(1000);
}
 1ca:	27 96       	adiw	r28, 0x07	; 7
 1cc:	0f b6       	in	r0, 0x3f	; 63
 1ce:	f8 94       	cli
 1d0:	de bf       	out	0x3e, r29	; 62
 1d2:	0f be       	out	0x3f, r0	; 63
 1d4:	cd bf       	out	0x3d, r28	; 61
 1d6:	df 91       	pop	r29
 1d8:	cf 91       	pop	r28
 1da:	1f 91       	pop	r17
 1dc:	0f 91       	pop	r16
 1de:	08 95       	ret

000001e0 <main>:

int main(void)
{
 1e0:	cf 93       	push	r28
 1e2:	df 93       	push	r29
 1e4:	cd b7       	in	r28, 0x3d	; 61
 1e6:	de b7       	in	r29, 0x3e	; 62
 1e8:	2b 97       	sbiw	r28, 0x0b	; 11
 1ea:	0f b6       	in	r0, 0x3f	; 63
 1ec:	f8 94       	cli
 1ee:	de bf       	out	0x3e, r29	; 62
 1f0:	0f be       	out	0x3f, r0	; 63
 1f2:	cd bf       	out	0x3d, r28	; 61
	//Enable interrupts
	sei();
 1f4:	78 94       	sei
	//LCD initialization with display ON, cursor OFF, blink char
	lcd_init(LCD_DISP_ON);
 1f6:	8c e0       	ldi	r24, 0x0C	; 12
 1f8:	da d0       	rcall	.+436    	; 0x3ae <lcd_init>
	//SPI initialization
	spi_init();
 1fa:	8c df       	rcall	.-232    	; 0x114 <spi_init>
	//MCP2515 initialization
	if(!mcp2515_init())
 1fc:	41 d1       	rcall	.+642    	; 0x480 <mcp2515_init>
 1fe:	81 11       	cpse	r24, r1
 200:	0e c0       	rjmp	.+28     	; 0x21e <main+0x3e>
	{
		//LCD clear screen
		lcd_clrscr();
 202:	b4 d0       	rcall	.+360    	; 0x36c <lcd_clrscr>
		//Set cursor on line 1
		lcd_gotoxy(0, 0);
 204:	60 e0       	ldi	r22, 0x00	; 0
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	a9 d0       	rcall	.+338    	; 0x35c <lcd_gotoxy>
		lcd_puts("Error CAN Bus");
 20a:	84 e0       	ldi	r24, 0x04	; 4
 20c:	92 e0       	ldi	r25, 0x02	; 2
 20e:	c0 d0       	rcall	.+384    	; 0x390 <lcd_puts>
		//Set cursort on line 2
		lcd_gotoxy(0, 1);
 210:	61 e0       	ldi	r22, 0x01	; 1
 212:	80 e0       	ldi	r24, 0x00	; 0
 214:	a3 d0       	rcall	.+326    	; 0x35c <lcd_gotoxy>
		lcd_puts("not initialized");
 216:	82 e1       	ldi	r24, 0x12	; 18
 218:	92 e0       	ldi	r25, 0x02	; 2
 21a:	ba d0       	rcall	.+372    	; 0x390 <lcd_puts>
 21c:	0e c0       	rjmp	.+28     	; 0x23a <main+0x5a>
	}
	else
	{
		//LCD clear screen
		lcd_clrscr();
 21e:	a6 d0       	rcall	.+332    	; 0x36c <lcd_clrscr>
		lcd_home();
 220:	a8 d0       	rcall	.+336    	; 0x372 <lcd_home>
		//Set cursor on line 1
		lcd_gotoxy(4, 0);
 222:	60 e0       	ldi	r22, 0x00	; 0
 224:	84 e0       	ldi	r24, 0x04	; 4
 226:	9a d0       	rcall	.+308    	; 0x35c <lcd_gotoxy>
		lcd_puts("CAN Bus");
 228:	8a e0       	ldi	r24, 0x0A	; 10
 22a:	92 e0       	ldi	r25, 0x02	; 2
 22c:	b1 d0       	rcall	.+354    	; 0x390 <lcd_puts>
		//Set cursor on line 2
		lcd_gotoxy(2, 1);
 22e:	61 e0       	ldi	r22, 0x01	; 1
 230:	82 e0       	ldi	r24, 0x02	; 2
 232:	94 d0       	rcall	.+296    	; 0x35c <lcd_gotoxy>
		lcd_puts("initialized");
 234:	86 e1       	ldi	r24, 0x16	; 22
 236:	92 e0       	ldi	r25, 0x02	; 2
 238:	ab d0       	rcall	.+342    	; 0x390 <lcd_puts>
 23a:	2f ef       	ldi	r18, 0xFF	; 255
 23c:	87 ea       	ldi	r24, 0xA7	; 167
 23e:	91 e6       	ldi	r25, 0x61	; 97
 240:	21 50       	subi	r18, 0x01	; 1
 242:	80 40       	sbci	r24, 0x00	; 0
 244:	90 40       	sbci	r25, 0x00	; 0
 246:	e1 f7       	brne	.-8      	; 0x240 <main+0x60>
 248:	00 c0       	rjmp	.+0      	; 0x24a <main+0x6a>
 24a:	00 00       	nop
	}
	_delay_ms(2000);
	
	//Test message
	tCAN testMessage;
	testMessage.id = 123;
 24c:	8b e7       	ldi	r24, 0x7B	; 123
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	9a 83       	std	Y+2, r25	; 0x02
 252:	89 83       	std	Y+1, r24	; 0x01
	testMessage.header.rtr = 0;
 254:	8b 81       	ldd	r24, Y+3	; 0x03
 256:	8e 7f       	andi	r24, 0xFE	; 254
 258:	8b 83       	std	Y+3, r24	; 0x03
	testMessage.data[0] = 0xAB;
 25a:	8b ea       	ldi	r24, 0xAB	; 171
 25c:	8c 83       	std	Y+4, r24	; 0x04
	testMessage.data[1] = 0xCD;
 25e:	8d ec       	ldi	r24, 0xCD	; 205
 260:	8d 83       	std	Y+5, r24	; 0x05
	
	//Switch to Loopback Mode
	mcp2515_bit_modify(CANCTRL, (1 << REQOP2) | (1 << REQOP1) | (1 << REQOP0), (1 << REQOP1));
 262:	40 e4       	ldi	r20, 0x40	; 64
 264:	60 ee       	ldi	r22, 0xE0	; 224
 266:	8f e0       	ldi	r24, 0x0F	; 15
 268:	f1 d0       	rcall	.+482    	; 0x44c <mcp2515_bit_modify>
	
	//Send message
	if(mcp2515_send_message(&testMessage))
 26a:	ce 01       	movw	r24, r28
 26c:	01 96       	adiw	r24, 0x01	; 1
 26e:	b5 d1       	rcall	.+874    	; 0x5da <mcp2515_send_message>
 270:	88 23       	and	r24, r24
 272:	31 f0       	breq	.+12     	; 0x280 <main+0xa0>
	{
		//LCD clear screen
		lcd_clrscr();
 274:	7b d0       	rcall	.+246    	; 0x36c <lcd_clrscr>
		lcd_home();
 276:	7d d0       	rcall	.+250    	; 0x372 <lcd_home>
		//"Message write to buffer"
		lcd_puts("mess writ buff");
 278:	82 e2       	ldi	r24, 0x22	; 34
 27a:	92 e0       	ldi	r25, 0x02	; 2
 27c:	89 d0       	rcall	.+274    	; 0x390 <lcd_puts>
 27e:	05 c0       	rjmp	.+10     	; 0x28a <main+0xaa>
	}
	else
	{
		//LCD clear screen
		lcd_clrscr();
 280:	75 d0       	rcall	.+234    	; 0x36c <lcd_clrscr>
		lcd_home();
 282:	77 d0       	rcall	.+238    	; 0x372 <lcd_home>
		//"Message not written"
		lcd_puts("mess not writ");
 284:	81 e3       	ldi	r24, 0x31	; 49
 286:	92 e0       	ldi	r25, 0x02	; 2
 288:	83 d0       	rcall	.+262    	; 0x390 <lcd_puts>
 28a:	8f e3       	ldi	r24, 0x3F	; 63
 28c:	9c e9       	ldi	r25, 0x9C	; 156
 28e:	01 97       	sbiw	r24, 0x01	; 1
 290:	f1 f7       	brne	.-4      	; 0x28e <main+0xae>
 292:	00 c0       	rjmp	.+0      	; 0x294 <main+0xb4>
 294:	00 00       	nop
 296:	9f ef       	ldi	r25, 0xFF	; 255
 298:	23 ed       	ldi	r18, 0xD3	; 211
 29a:	80 e3       	ldi	r24, 0x30	; 48
 29c:	91 50       	subi	r25, 0x01	; 1
 29e:	20 40       	sbci	r18, 0x00	; 0
 2a0:	80 40       	sbci	r24, 0x00	; 0
 2a2:	e1 f7       	brne	.-8      	; 0x29c <main+0xbc>
 2a4:	00 c0       	rjmp	.+0      	; 0x2a6 <main+0xc6>
 2a6:	00 00       	nop
	}
	_delay_ms(10);
	
	_delay_ms(1000);
	
	if(mcp2515_check_message())
 2a8:	27 d1       	rcall	.+590    	; 0x4f8 <mcp2515_check_message>
 2aa:	88 23       	and	r24, r24
 2ac:	d9 f0       	breq	.+54     	; 0x2e4 <main+0x104>
	{
		//LCD clear screen
		lcd_clrscr();
 2ae:	5e d0       	rcall	.+188    	; 0x36c <lcd_clrscr>
		lcd_home();
 2b0:	60 d0       	rcall	.+192    	; 0x372 <lcd_home>
		//"Message received"
		lcd_puts("mess received");
 2b2:	8f e3       	ldi	r24, 0x3F	; 63
 2b4:	92 e0       	ldi	r25, 0x02	; 2
 2b6:	6c d0       	rcall	.+216    	; 0x390 <lcd_puts>
 2b8:	9f ef       	ldi	r25, 0xFF	; 255
 2ba:	23 ed       	ldi	r18, 0xD3	; 211
 2bc:	80 e3       	ldi	r24, 0x30	; 48
 2be:	91 50       	subi	r25, 0x01	; 1
 2c0:	20 40       	sbci	r18, 0x00	; 0
 2c2:	80 40       	sbci	r24, 0x00	; 0
 2c4:	e1 f7       	brne	.-8      	; 0x2be <main+0xde>
 2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <main+0xe8>
 2c8:	00 00       	nop
		_delay_ms(1000);
		if(mcp2515_get_message(&testMessage))
 2ca:	ce 01       	movw	r24, r28
 2cc:	01 96       	adiw	r24, 0x01	; 1
 2ce:	18 d1       	rcall	.+560    	; 0x500 <mcp2515_get_message>
 2d0:	88 23       	and	r24, r24
 2d2:	21 f0       	breq	.+8      	; 0x2dc <main+0xfc>
		{
			//Display message on the LCD
			print_message(&testMessage);
 2d4:	ce 01       	movw	r24, r28
 2d6:	01 96       	adiw	r24, 0x01	; 1
 2d8:	21 df       	rcall	.-446    	; 0x11c <print_message>
 2da:	08 c0       	rjmp	.+16     	; 0x2ec <main+0x10c>
		}
		else
		{
			//"Message not read"
			lcd_puts("mess not read");
 2dc:	8d e4       	ldi	r24, 0x4D	; 77
 2de:	92 e0       	ldi	r25, 0x02	; 2
 2e0:	57 d0       	rcall	.+174    	; 0x390 <lcd_puts>
 2e2:	fb cf       	rjmp	.-10     	; 0x2da <main+0xfa>
		}
	}
	else
	{
		//"Message not received"
		lcd_puts("messnotreceived");
 2e4:	8b e5       	ldi	r24, 0x5B	; 91
 2e6:	92 e0       	ldi	r25, 0x02	; 2
 2e8:	53 d0       	rcall	.+166    	; 0x390 <lcd_puts>
 2ea:	f7 cf       	rjmp	.-18     	; 0x2da <main+0xfa>
 2ec:	ff cf       	rjmp	.-2      	; 0x2ec <main+0x10c>

000002ee <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
 2ee:	12 9a       	sbi	0x02, 2	; 2
 2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <toggle_e+0x4>
 2f2:	12 98       	cbi	0x02, 2	; 2
 2f4:	08 95       	ret

000002f6 <lcd_write>:
 2f6:	cf 93       	push	r28
 2f8:	c8 2f       	mov	r28, r24
 2fa:	66 23       	and	r22, r22
 2fc:	11 f0       	breq	.+4      	; 0x302 <lcd_write+0xc>
 2fe:	10 9a       	sbi	0x02, 0	; 2
 300:	01 c0       	rjmp	.+2      	; 0x304 <lcd_write+0xe>
 302:	10 98       	cbi	0x02, 0	; 2
 304:	0b 9a       	sbi	0x01, 3	; 1
 306:	0c 9a       	sbi	0x01, 4	; 1
 308:	0d 9a       	sbi	0x01, 5	; 1
 30a:	0e 9a       	sbi	0x01, 6	; 1
 30c:	16 98       	cbi	0x02, 6	; 2
 30e:	15 98       	cbi	0x02, 5	; 2
 310:	14 98       	cbi	0x02, 4	; 2
 312:	13 98       	cbi	0x02, 3	; 2
 314:	cc 23       	and	r28, r28
 316:	0c f4       	brge	.+2      	; 0x31a <lcd_write+0x24>
 318:	16 9a       	sbi	0x02, 6	; 2
 31a:	c6 fd       	sbrc	r28, 6
 31c:	15 9a       	sbi	0x02, 5	; 2
 31e:	c5 fd       	sbrc	r28, 5
 320:	14 9a       	sbi	0x02, 4	; 2
 322:	c4 fd       	sbrc	r28, 4
 324:	13 9a       	sbi	0x02, 3	; 2
 326:	e3 df       	rcall	.-58     	; 0x2ee <toggle_e>
 328:	16 98       	cbi	0x02, 6	; 2
 32a:	15 98       	cbi	0x02, 5	; 2
 32c:	14 98       	cbi	0x02, 4	; 2
 32e:	13 98       	cbi	0x02, 3	; 2
 330:	c3 fd       	sbrc	r28, 3
 332:	16 9a       	sbi	0x02, 6	; 2
 334:	c2 fd       	sbrc	r28, 2
 336:	15 9a       	sbi	0x02, 5	; 2
 338:	c1 fd       	sbrc	r28, 1
 33a:	14 9a       	sbi	0x02, 4	; 2
 33c:	c0 fd       	sbrc	r28, 0
 33e:	13 9a       	sbi	0x02, 3	; 2
 340:	d6 df       	rcall	.-84     	; 0x2ee <toggle_e>
 342:	13 9a       	sbi	0x02, 3	; 2
 344:	14 9a       	sbi	0x02, 4	; 2
 346:	15 9a       	sbi	0x02, 5	; 2
 348:	16 9a       	sbi	0x02, 6	; 2
 34a:	cf 91       	pop	r28
 34c:	08 95       	ret

0000034e <lcd_command>:
 34e:	e0 ea       	ldi	r30, 0xA0	; 160
 350:	ff e0       	ldi	r31, 0x0F	; 15
 352:	31 97       	sbiw	r30, 0x01	; 1
 354:	f1 f7       	brne	.-4      	; 0x352 <lcd_command+0x4>
 356:	60 e0       	ldi	r22, 0x00	; 0
 358:	ce cf       	rjmp	.-100    	; 0x2f6 <lcd_write>
 35a:	08 95       	ret

0000035c <lcd_gotoxy>:
 35c:	61 11       	cpse	r22, r1
 35e:	03 c0       	rjmp	.+6      	; 0x366 <lcd_gotoxy+0xa>
 360:	80 58       	subi	r24, 0x80	; 128
 362:	f5 cf       	rjmp	.-22     	; 0x34e <lcd_command>
 364:	08 95       	ret
 366:	80 54       	subi	r24, 0x40	; 64
 368:	f2 cf       	rjmp	.-28     	; 0x34e <lcd_command>
 36a:	08 95       	ret

0000036c <lcd_clrscr>:
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	ef cf       	rjmp	.-34     	; 0x34e <lcd_command>
 370:	08 95       	ret

00000372 <lcd_home>:
 372:	82 e0       	ldi	r24, 0x02	; 2
 374:	ec cf       	rjmp	.-40     	; 0x34e <lcd_command>
 376:	08 95       	ret

00000378 <lcd_putc>:
 378:	e0 ea       	ldi	r30, 0xA0	; 160
 37a:	ff e0       	ldi	r31, 0x0F	; 15
 37c:	31 97       	sbiw	r30, 0x01	; 1
 37e:	f1 f7       	brne	.-4      	; 0x37c <lcd_putc+0x4>
 380:	8a 30       	cpi	r24, 0x0A	; 10
 382:	19 f4       	brne	.+6      	; 0x38a <lcd_putc+0x12>
 384:	80 ec       	ldi	r24, 0xC0	; 192
 386:	e3 cf       	rjmp	.-58     	; 0x34e <lcd_command>
 388:	08 95       	ret
 38a:	61 e0       	ldi	r22, 0x01	; 1
 38c:	b4 cf       	rjmp	.-152    	; 0x2f6 <lcd_write>
 38e:	08 95       	ret

00000390 <lcd_puts>:
 390:	cf 93       	push	r28
 392:	df 93       	push	r29
 394:	ec 01       	movw	r28, r24
 396:	21 96       	adiw	r28, 0x01	; 1
 398:	fc 01       	movw	r30, r24
 39a:	80 81       	ld	r24, Z
 39c:	88 23       	and	r24, r24
 39e:	21 f0       	breq	.+8      	; 0x3a8 <lcd_puts+0x18>
 3a0:	eb df       	rcall	.-42     	; 0x378 <lcd_putc>
 3a2:	89 91       	ld	r24, Y+
 3a4:	81 11       	cpse	r24, r1
 3a6:	fc cf       	rjmp	.-8      	; 0x3a0 <lcd_puts+0x10>
 3a8:	df 91       	pop	r29
 3aa:	cf 91       	pop	r28
 3ac:	08 95       	ret

000003ae <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 3ae:	cf 93       	push	r28
 3b0:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 3b2:	08 9a       	sbi	0x01, 0	; 1
#if LCD_READ_REQUIRED
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
#endif
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 3b4:	0a 9a       	sbi	0x01, 2	; 1
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 3b6:	0b 9a       	sbi	0x01, 3	; 1
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 3b8:	0c 9a       	sbi	0x01, 4	; 1
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 3ba:	0d 9a       	sbi	0x01, 5	; 1
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 3bc:	0e 9a       	sbi	0x01, 6	; 1
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 3be:	e0 e0       	ldi	r30, 0x00	; 0
 3c0:	fa ef       	ldi	r31, 0xFA	; 250
 3c2:	31 97       	sbiw	r30, 0x01	; 1
 3c4:	f1 f7       	brne	.-4      	; 0x3c2 <lcd_init+0x14>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 3c6:	14 9a       	sbi	0x02, 4	; 2
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 3c8:	13 9a       	sbi	0x02, 3	; 2
    lcd_e_toggle();
 3ca:	91 df       	rcall	.-222    	; 0x2ee <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 3cc:	e0 e0       	ldi	r30, 0x00	; 0
 3ce:	fe e4       	ldi	r31, 0x4E	; 78
 3d0:	31 97       	sbiw	r30, 0x01	; 1
 3d2:	f1 f7       	brne	.-4      	; 0x3d0 <lcd_init+0x22>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 3d4:	8c df       	rcall	.-232    	; 0x2ee <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 3d6:	e0 e0       	ldi	r30, 0x00	; 0
 3d8:	f1 e0       	ldi	r31, 0x01	; 1
 3da:	31 97       	sbiw	r30, 0x01	; 1
 3dc:	f1 f7       	brne	.-4      	; 0x3da <lcd_init+0x2c>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 3de:	87 df       	rcall	.-242    	; 0x2ee <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 3e0:	e0 e0       	ldi	r30, 0x00	; 0
 3e2:	f1 e0       	ldi	r31, 0x01	; 1
 3e4:	31 97       	sbiw	r30, 0x01	; 1
 3e6:	f1 f7       	brne	.-4      	; 0x3e4 <lcd_init+0x36>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 3e8:	13 98       	cbi	0x02, 3	; 2
    lcd_e_toggle();
 3ea:	81 df       	rcall	.-254    	; 0x2ee <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 3ec:	e0 e0       	ldi	r30, 0x00	; 0
 3ee:	f1 e0       	ldi	r31, 0x01	; 1
 3f0:	31 97       	sbiw	r30, 0x01	; 1
 3f2:	f1 f7       	brne	.-4      	; 0x3f0 <lcd_init+0x42>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 3f4:	88 e2       	ldi	r24, 0x28	; 40
 3f6:	ab df       	rcall	.-170    	; 0x34e <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 3f8:	88 e0       	ldi	r24, 0x08	; 8
 3fa:	a9 df       	rcall	.-174    	; 0x34e <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 3fc:	b7 df       	rcall	.-146    	; 0x36c <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 3fe:	86 e0       	ldi	r24, 0x06	; 6
 400:	a6 df       	rcall	.-180    	; 0x34e <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 402:	8c 2f       	mov	r24, r28
 404:	a4 df       	rcall	.-184    	; 0x34e <lcd_command>

 406:	cf 91       	pop	r28
 408:	08 95       	ret

0000040a <spi_putc>:
		// all buffers used
		return false;
	}
	
	return true;
}
 40a:	8e bd       	out	0x2e, r24	; 46
 40c:	0d b4       	in	r0, 0x2d	; 45
 40e:	07 fe       	sbrs	r0, 7
 410:	fd cf       	rjmp	.-6      	; 0x40c <spi_putc+0x2>
 412:	8e b5       	in	r24, 0x2e	; 46
 414:	08 95       	ret

00000416 <mcp2515_write_register>:
 416:	cf 93       	push	r28
 418:	df 93       	push	r29
 41a:	d8 2f       	mov	r29, r24
 41c:	c6 2f       	mov	r28, r22
 41e:	28 98       	cbi	0x05, 0	; 5
 420:	82 e0       	ldi	r24, 0x02	; 2
 422:	f3 df       	rcall	.-26     	; 0x40a <spi_putc>
 424:	8d 2f       	mov	r24, r29
 426:	f1 df       	rcall	.-30     	; 0x40a <spi_putc>
 428:	8c 2f       	mov	r24, r28
 42a:	ef df       	rcall	.-34     	; 0x40a <spi_putc>
 42c:	28 9a       	sbi	0x05, 0	; 5
 42e:	df 91       	pop	r29
 430:	cf 91       	pop	r28
 432:	08 95       	ret

00000434 <mcp2515_read_register>:
 434:	cf 93       	push	r28
 436:	c8 2f       	mov	r28, r24
 438:	28 98       	cbi	0x05, 0	; 5
 43a:	83 e0       	ldi	r24, 0x03	; 3
 43c:	e6 df       	rcall	.-52     	; 0x40a <spi_putc>
 43e:	8c 2f       	mov	r24, r28
 440:	e4 df       	rcall	.-56     	; 0x40a <spi_putc>
 442:	8f ef       	ldi	r24, 0xFF	; 255
 444:	e2 df       	rcall	.-60     	; 0x40a <spi_putc>
 446:	28 9a       	sbi	0x05, 0	; 5
 448:	cf 91       	pop	r28
 44a:	08 95       	ret

0000044c <mcp2515_bit_modify>:
 44c:	1f 93       	push	r17
 44e:	cf 93       	push	r28
 450:	df 93       	push	r29
 452:	18 2f       	mov	r17, r24
 454:	d6 2f       	mov	r29, r22
 456:	c4 2f       	mov	r28, r20
 458:	28 98       	cbi	0x05, 0	; 5
 45a:	85 e0       	ldi	r24, 0x05	; 5
 45c:	d6 df       	rcall	.-84     	; 0x40a <spi_putc>
 45e:	81 2f       	mov	r24, r17
 460:	d4 df       	rcall	.-88     	; 0x40a <spi_putc>
 462:	8d 2f       	mov	r24, r29
 464:	d2 df       	rcall	.-92     	; 0x40a <spi_putc>
 466:	8c 2f       	mov	r24, r28
 468:	d0 df       	rcall	.-96     	; 0x40a <spi_putc>
 46a:	28 9a       	sbi	0x05, 0	; 5
 46c:	df 91       	pop	r29
 46e:	cf 91       	pop	r28
 470:	1f 91       	pop	r17
 472:	08 95       	ret

00000474 <mcp2515_read_status>:
 474:	28 98       	cbi	0x05, 0	; 5
 476:	c9 df       	rcall	.-110    	; 0x40a <spi_putc>
 478:	8f ef       	ldi	r24, 0xFF	; 255
 47a:	c7 df       	rcall	.-114    	; 0x40a <spi_putc>
 47c:	28 9a       	sbi	0x05, 0	; 5
 47e:	08 95       	ret

00000480 <mcp2515_init>:
 480:	28 9a       	sbi	0x05, 0	; 5
 482:	20 9a       	sbi	0x04, 0	; 4
 484:	29 98       	cbi	0x05, 1	; 5
 486:	2a 98       	cbi	0x05, 2	; 5
 488:	2b 98       	cbi	0x05, 3	; 5
 48a:	21 9a       	sbi	0x04, 1	; 4
 48c:	22 9a       	sbi	0x04, 2	; 4
 48e:	23 98       	cbi	0x04, 3	; 4
 490:	50 98       	cbi	0x0a, 0	; 10
 492:	58 9a       	sbi	0x0b, 0	; 11
 494:	81 e5       	ldi	r24, 0x51	; 81
 496:	8c bd       	out	0x2c, r24	; 44
 498:	1d bc       	out	0x2d, r1	; 45
 49a:	28 98       	cbi	0x05, 0	; 5
 49c:	80 ec       	ldi	r24, 0xC0	; 192
 49e:	b5 df       	rcall	.-150    	; 0x40a <spi_putc>
 4a0:	28 9a       	sbi	0x05, 0	; 5
 4a2:	8f e3       	ldi	r24, 0x3F	; 63
 4a4:	9c e9       	ldi	r25, 0x9C	; 156
 4a6:	01 97       	sbiw	r24, 0x01	; 1
 4a8:	f1 f7       	brne	.-4      	; 0x4a6 <mcp2515_init+0x26>
 4aa:	00 c0       	rjmp	.+0      	; 0x4ac <mcp2515_init+0x2c>
 4ac:	00 00       	nop
 4ae:	28 98       	cbi	0x05, 0	; 5
 4b0:	82 e0       	ldi	r24, 0x02	; 2
 4b2:	ab df       	rcall	.-170    	; 0x40a <spi_putc>
 4b4:	88 e2       	ldi	r24, 0x28	; 40
 4b6:	a9 df       	rcall	.-174    	; 0x40a <spi_putc>
 4b8:	82 e0       	ldi	r24, 0x02	; 2
 4ba:	a7 df       	rcall	.-178    	; 0x40a <spi_putc>
 4bc:	80 e9       	ldi	r24, 0x90	; 144
 4be:	a5 df       	rcall	.-182    	; 0x40a <spi_putc>
 4c0:	87 e0       	ldi	r24, 0x07	; 7
 4c2:	a3 df       	rcall	.-186    	; 0x40a <spi_putc>
 4c4:	83 e0       	ldi	r24, 0x03	; 3
 4c6:	a1 df       	rcall	.-190    	; 0x40a <spi_putc>
 4c8:	28 9a       	sbi	0x05, 0	; 5
 4ca:	8a e2       	ldi	r24, 0x2A	; 42
 4cc:	b3 df       	rcall	.-154    	; 0x434 <mcp2515_read_register>
 4ce:	87 30       	cpi	r24, 0x07	; 7
 4d0:	89 f4       	brne	.+34     	; 0x4f4 <mcp2515_init+0x74>
 4d2:	60 e0       	ldi	r22, 0x00	; 0
 4d4:	8c e0       	ldi	r24, 0x0C	; 12
 4d6:	9f df       	rcall	.-194    	; 0x416 <mcp2515_write_register>
 4d8:	60 e0       	ldi	r22, 0x00	; 0
 4da:	8d e0       	ldi	r24, 0x0D	; 13
 4dc:	9c df       	rcall	.-200    	; 0x416 <mcp2515_write_register>
 4de:	60 e6       	ldi	r22, 0x60	; 96
 4e0:	80 e6       	ldi	r24, 0x60	; 96
 4e2:	99 df       	rcall	.-206    	; 0x416 <mcp2515_write_register>
 4e4:	60 e6       	ldi	r22, 0x60	; 96
 4e6:	80 e7       	ldi	r24, 0x70	; 112
 4e8:	96 df       	rcall	.-212    	; 0x416 <mcp2515_write_register>
 4ea:	60 e0       	ldi	r22, 0x00	; 0
 4ec:	8f e0       	ldi	r24, 0x0F	; 15
 4ee:	93 df       	rcall	.-218    	; 0x416 <mcp2515_write_register>
 4f0:	81 e0       	ldi	r24, 0x01	; 1
 4f2:	08 95       	ret
 4f4:	80 e0       	ldi	r24, 0x00	; 0
 4f6:	08 95       	ret

000004f8 <mcp2515_check_message>:
 4f8:	89 b1       	in	r24, 0x09	; 9
 4fa:	80 95       	com	r24
 4fc:	81 70       	andi	r24, 0x01	; 1
 4fe:	08 95       	ret

00000500 <mcp2515_get_message>:

// ----------------------------------------------------------------------------
uint8_t mcp2515_get_message(tCAN *message)
{
 500:	ef 92       	push	r14
 502:	ff 92       	push	r15
 504:	0f 93       	push	r16
 506:	1f 93       	push	r17
 508:	cf 93       	push	r28
 50a:	df 93       	push	r29
 50c:	1f 92       	push	r1
 50e:	cd b7       	in	r28, 0x3d	; 61
 510:	de b7       	in	r29, 0x3e	; 62
 512:	7c 01       	movw	r14, r24
	// read status
	uint8_t status = mcp2515_read_status(SPI_RX_STATUS);
 514:	80 eb       	ldi	r24, 0xB0	; 176
 516:	ae df       	rcall	.-164    	; 0x474 <mcp2515_read_status>
 518:	89 83       	std	Y+1, r24	; 0x01
	uint8_t addr;
	
	if (bit_is_set(status,6)) {
 51a:	89 81       	ldd	r24, Y+1	; 0x01
 51c:	86 fd       	sbrc	r24, 6
 51e:	06 c0       	rjmp	.+12     	; 0x52c <mcp2515_get_message+0x2c>
		// message in buffer 0
		addr = SPI_READ_RX;
	}
	else if (bit_is_set(status,7)) {
 520:	89 81       	ldd	r24, Y+1	; 0x01
 522:	88 23       	and	r24, r24
 524:	0c f0       	brlt	.+2      	; 0x528 <mcp2515_get_message+0x28>
 526:	50 c0       	rjmp	.+160    	; 0x5c8 <mcp2515_get_message+0xc8>
		// message in buffer 1
		addr = SPI_READ_RX | 0x04;
 528:	84 e9       	ldi	r24, 0x94	; 148
 52a:	01 c0       	rjmp	.+2      	; 0x52e <mcp2515_get_message+0x2e>
	uint8_t status = mcp2515_read_status(SPI_RX_STATUS);
	uint8_t addr;
	
	if (bit_is_set(status,6)) {
		// message in buffer 0
		addr = SPI_READ_RX;
 52c:	80 e9       	ldi	r24, 0x90	; 144
	else {
		// Error: no message available
		return 0;
	}

	RESET(MCP2515_CS);
 52e:	28 98       	cbi	0x05, 0	; 5
	spi_putc(addr);
 530:	6c df       	rcall	.-296    	; 0x40a <spi_putc>
	
	// read id
	message->id  = (uint16_t) spi_putc(0xff) << 3;
 532:	8f ef       	ldi	r24, 0xFF	; 255
 534:	6a df       	rcall	.-300    	; 0x40a <spi_putc>
 536:	98 e0       	ldi	r25, 0x08	; 8
 538:	89 9f       	mul	r24, r25
 53a:	80 01       	movw	r16, r0
 53c:	11 24       	eor	r1, r1
 53e:	f7 01       	movw	r30, r14
 540:	11 83       	std	Z+1, r17	; 0x01
 542:	00 83       	st	Z, r16
	message->id |=            spi_putc(0xff) >> 5;
 544:	8f ef       	ldi	r24, 0xFF	; 255
 546:	61 df       	rcall	.-318    	; 0x40a <spi_putc>
 548:	82 95       	swap	r24
 54a:	86 95       	lsr	r24
 54c:	87 70       	andi	r24, 0x07	; 7
 54e:	08 2b       	or	r16, r24
 550:	f7 01       	movw	r30, r14
 552:	11 83       	std	Z+1, r17	; 0x01
 554:	00 83       	st	Z, r16
	
	spi_putc(0xff);
 556:	8f ef       	ldi	r24, 0xFF	; 255
 558:	58 df       	rcall	.-336    	; 0x40a <spi_putc>
	spi_putc(0xff);
 55a:	8f ef       	ldi	r24, 0xFF	; 255
 55c:	56 df       	rcall	.-340    	; 0x40a <spi_putc>
	
	// read DLC
	uint8_t length = spi_putc(0xff) & 0x0f;
 55e:	8f ef       	ldi	r24, 0xFF	; 255
 560:	54 df       	rcall	.-344    	; 0x40a <spi_putc>
 562:	8f 70       	andi	r24, 0x0F	; 15
	
	message->header.length = length;
 564:	28 2f       	mov	r18, r24
 566:	22 0f       	add	r18, r18
 568:	f7 01       	movw	r30, r14
 56a:	92 81       	ldd	r25, Z+2	; 0x02
 56c:	91 7e       	andi	r25, 0xE1	; 225
 56e:	92 2b       	or	r25, r18
 570:	92 83       	std	Z+2, r25	; 0x02
	message->header.rtr = (bit_is_set(status, 3)) ? 1 : 0;
 572:	29 81       	ldd	r18, Y+1	; 0x01
 574:	23 fb       	bst	r18, 3
 576:	22 27       	eor	r18, r18
 578:	20 f9       	bld	r18, 0
 57a:	20 fb       	bst	r18, 0
 57c:	90 f9       	bld	r25, 0
 57e:	92 83       	std	Z+2, r25	; 0x02
	
	// read data
	for (uint8_t i=0;i<length;i++) {
 580:	88 23       	and	r24, r24
 582:	89 f0       	breq	.+34     	; 0x5a6 <mcp2515_get_message+0xa6>
 584:	87 01       	movw	r16, r14
 586:	0d 5f       	subi	r16, 0xFD	; 253
 588:	1f 4f       	sbci	r17, 0xFF	; 255
 58a:	f4 e0       	ldi	r31, 0x04	; 4
 58c:	ef 0e       	add	r14, r31
 58e:	f1 1c       	adc	r15, r1
 590:	81 50       	subi	r24, 0x01	; 1
 592:	e8 0e       	add	r14, r24
 594:	f1 1c       	adc	r15, r1
		message->data[i] = spi_putc(0xff);
 596:	8f ef       	ldi	r24, 0xFF	; 255
 598:	38 df       	rcall	.-400    	; 0x40a <spi_putc>
 59a:	f8 01       	movw	r30, r16
 59c:	81 93       	st	Z+, r24
 59e:	8f 01       	movw	r16, r30
	
	message->header.length = length;
	message->header.rtr = (bit_is_set(status, 3)) ? 1 : 0;
	
	// read data
	for (uint8_t i=0;i<length;i++) {
 5a0:	ee 15       	cp	r30, r14
 5a2:	ff 05       	cpc	r31, r15
 5a4:	c1 f7       	brne	.-16     	; 0x596 <mcp2515_get_message+0x96>
		message->data[i] = spi_putc(0xff);
	}
	SET(MCP2515_CS);
 5a6:	28 9a       	sbi	0x05, 0	; 5
	
	// clear interrupt flag
	if (bit_is_set(status, 6)) {
 5a8:	89 81       	ldd	r24, Y+1	; 0x01
 5aa:	86 ff       	sbrs	r24, 6
 5ac:	05 c0       	rjmp	.+10     	; 0x5b8 <mcp2515_get_message+0xb8>
		mcp2515_bit_modify(CANINTF, (1<<RX0IF), 0);
 5ae:	40 e0       	ldi	r20, 0x00	; 0
 5b0:	61 e0       	ldi	r22, 0x01	; 1
 5b2:	8c e2       	ldi	r24, 0x2C	; 44
 5b4:	4b df       	rcall	.-362    	; 0x44c <mcp2515_bit_modify>
 5b6:	04 c0       	rjmp	.+8      	; 0x5c0 <mcp2515_get_message+0xc0>
	}
	else {
		mcp2515_bit_modify(CANINTF, (1<<RX1IF), 0);
 5b8:	40 e0       	ldi	r20, 0x00	; 0
 5ba:	62 e0       	ldi	r22, 0x02	; 2
 5bc:	8c e2       	ldi	r24, 0x2C	; 44
 5be:	46 df       	rcall	.-372    	; 0x44c <mcp2515_bit_modify>
	}
	
	return (status & 0x07) + 1;
 5c0:	89 81       	ldd	r24, Y+1	; 0x01
 5c2:	87 70       	andi	r24, 0x07	; 7
 5c4:	8f 5f       	subi	r24, 0xFF	; 255
 5c6:	01 c0       	rjmp	.+2      	; 0x5ca <mcp2515_get_message+0xca>
		// message in buffer 1
		addr = SPI_READ_RX | 0x04;
	}
	else {
		// Error: no message available
		return 0;
 5c8:	80 e0       	ldi	r24, 0x00	; 0
	else {
		mcp2515_bit_modify(CANINTF, (1<<RX1IF), 0);
	}
	
	return (status & 0x07) + 1;
}
 5ca:	0f 90       	pop	r0
 5cc:	df 91       	pop	r29
 5ce:	cf 91       	pop	r28
 5d0:	1f 91       	pop	r17
 5d2:	0f 91       	pop	r16
 5d4:	ff 90       	pop	r15
 5d6:	ef 90       	pop	r14
 5d8:	08 95       	ret

000005da <mcp2515_send_message>:

// ----------------------------------------------------------------------------
uint8_t mcp2515_send_message(tCAN *message)
{
 5da:	df 92       	push	r13
 5dc:	ef 92       	push	r14
 5de:	ff 92       	push	r15
 5e0:	0f 93       	push	r16
 5e2:	1f 93       	push	r17
 5e4:	cf 93       	push	r28
 5e6:	df 93       	push	r29
 5e8:	1f 92       	push	r1
 5ea:	cd b7       	in	r28, 0x3d	; 61
 5ec:	de b7       	in	r29, 0x3e	; 62
 5ee:	8c 01       	movw	r16, r24
	uint8_t status = mcp2515_read_status(SPI_READ_STATUS);
 5f0:	80 ea       	ldi	r24, 0xA0	; 160
 5f2:	40 df       	rcall	.-384    	; 0x474 <mcp2515_read_status>
 5f4:	89 83       	std	Y+1, r24	; 0x01
	 *  2	TXB0CNTRL.TXREQ
	 *  4	TXB1CNTRL.TXREQ
	 *  6	TXB2CNTRL.TXREQ
	 */
	uint8_t address;
	if (bit_is_clear(status, 2)) {
 5f6:	89 81       	ldd	r24, Y+1	; 0x01
 5f8:	82 ff       	sbrs	r24, 2
 5fa:	0a c0       	rjmp	.+20     	; 0x610 <mcp2515_send_message+0x36>
		address = 0x00;
	}
	else if (bit_is_clear(status, 4)) {
 5fc:	89 81       	ldd	r24, Y+1	; 0x01
 5fe:	84 ff       	sbrs	r24, 4
 600:	09 c0       	rjmp	.+18     	; 0x614 <mcp2515_send_message+0x3a>
		address = 0x02;
	} 
	else if (bit_is_clear(status, 6)) {
 602:	89 81       	ldd	r24, Y+1	; 0x01
 604:	86 fd       	sbrc	r24, 6
 606:	4d c0       	rjmp	.+154    	; 0x6a2 <mcp2515_send_message+0xc8>
		address = 0x04;
 608:	68 94       	set
 60a:	dd 24       	eor	r13, r13
 60c:	d2 f8       	bld	r13, 2
 60e:	05 c0       	rjmp	.+10     	; 0x61a <mcp2515_send_message+0x40>
	 *  4	TXB1CNTRL.TXREQ
	 *  6	TXB2CNTRL.TXREQ
	 */
	uint8_t address;
	if (bit_is_clear(status, 2)) {
		address = 0x00;
 610:	d1 2c       	mov	r13, r1
 612:	03 c0       	rjmp	.+6      	; 0x61a <mcp2515_send_message+0x40>
	}
	else if (bit_is_clear(status, 4)) {
		address = 0x02;
 614:	68 94       	set
 616:	dd 24       	eor	r13, r13
 618:	d1 f8       	bld	r13, 1
	else {
		// all buffer used => could not send message
		return 0;
	}
	
	RESET(MCP2515_CS);
 61a:	28 98       	cbi	0x05, 0	; 5
	spi_putc(SPI_WRITE_TX | address);
 61c:	8d 2d       	mov	r24, r13
 61e:	80 64       	ori	r24, 0x40	; 64
 620:	f4 de       	rcall	.-536    	; 0x40a <spi_putc>
	
	spi_putc(message->id >> 3);
 622:	f8 01       	movw	r30, r16
 624:	20 81       	ld	r18, Z
 626:	31 81       	ldd	r19, Z+1	; 0x01
 628:	c9 01       	movw	r24, r18
 62a:	96 95       	lsr	r25
 62c:	87 95       	ror	r24
 62e:	96 95       	lsr	r25
 630:	87 95       	ror	r24
 632:	96 95       	lsr	r25
 634:	87 95       	ror	r24
 636:	e9 de       	rcall	.-558    	; 0x40a <spi_putc>
    spi_putc(message->id << 5);
 638:	f8 01       	movw	r30, r16
 63a:	80 81       	ld	r24, Z
 63c:	82 95       	swap	r24
 63e:	88 0f       	add	r24, r24
 640:	80 7e       	andi	r24, 0xE0	; 224
 642:	e3 de       	rcall	.-570    	; 0x40a <spi_putc>
	
	spi_putc(0);
 644:	80 e0       	ldi	r24, 0x00	; 0
 646:	e1 de       	rcall	.-574    	; 0x40a <spi_putc>
	spi_putc(0);
 648:	80 e0       	ldi	r24, 0x00	; 0
 64a:	df de       	rcall	.-578    	; 0x40a <spi_putc>
	
	uint8_t length = message->header.length & 0x0f;
 64c:	f8 01       	movw	r30, r16
 64e:	82 81       	ldd	r24, Z+2	; 0x02
 650:	e8 2e       	mov	r14, r24
 652:	e6 94       	lsr	r14
 654:	fe 2d       	mov	r31, r14
 656:	ff 70       	andi	r31, 0x0F	; 15
 658:	ef 2e       	mov	r14, r31
	
	if (message->header.rtr) {
 65a:	80 ff       	sbrs	r24, 0
 65c:	04 c0       	rjmp	.+8      	; 0x666 <mcp2515_send_message+0x8c>
		// a rtr-frame has a length, but contains no data
		spi_putc((1<<RTR) | length);
 65e:	8f 2f       	mov	r24, r31
 660:	80 64       	ori	r24, 0x40	; 64
 662:	d3 de       	rcall	.-602    	; 0x40a <spi_putc>
 664:	0e c0       	rjmp	.+28     	; 0x682 <mcp2515_send_message+0xa8>
	}
	else {
		// set message length
		spi_putc(length);
 666:	8f 2f       	mov	r24, r31
 668:	d0 de       	rcall	.-608    	; 0x40a <spi_putc>
		
		// data
		for (uint8_t i=0;i<length;i++) {
 66a:	ee 20       	and	r14, r14
 66c:	51 f0       	breq	.+20     	; 0x682 <mcp2515_send_message+0xa8>
 66e:	0d 5f       	subi	r16, 0xFD	; 253
 670:	1f 4f       	sbci	r17, 0xFF	; 255
 672:	f1 2c       	mov	r15, r1
			spi_putc(message->data[i]);
 674:	f8 01       	movw	r30, r16
 676:	81 91       	ld	r24, Z+
 678:	8f 01       	movw	r16, r30
 67a:	c7 de       	rcall	.-626    	; 0x40a <spi_putc>
	else {
		// set message length
		spi_putc(length);
		
		// data
		for (uint8_t i=0;i<length;i++) {
 67c:	f3 94       	inc	r15
 67e:	fe 14       	cp	r15, r14
 680:	c8 f3       	brcs	.-14     	; 0x674 <mcp2515_send_message+0x9a>
			spi_putc(message->data[i]);
		}
	}
	SET(MCP2515_CS);
 682:	28 9a       	sbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 684:	f5 e0       	ldi	r31, 0x05	; 5
 686:	fa 95       	dec	r31
 688:	f1 f7       	brne	.-4      	; 0x686 <mcp2515_send_message+0xac>
 68a:	00 00       	nop
	
	_delay_us(1);
	
	// send message
	RESET(MCP2515_CS);
 68c:	28 98       	cbi	0x05, 0	; 5
	address = (address == 0) ? 1 : address;
 68e:	d1 10       	cpse	r13, r1
 690:	02 c0       	rjmp	.+4      	; 0x696 <mcp2515_send_message+0xbc>
 692:	dd 24       	eor	r13, r13
 694:	d3 94       	inc	r13
	spi_putc(SPI_RTS | address);
 696:	8d 2d       	mov	r24, r13
 698:	80 68       	ori	r24, 0x80	; 128
 69a:	b7 de       	rcall	.-658    	; 0x40a <spi_putc>
	SET(MCP2515_CS);
 69c:	28 9a       	sbi	0x05, 0	; 5
	
	return address;
 69e:	8d 2d       	mov	r24, r13
 6a0:	01 c0       	rjmp	.+2      	; 0x6a4 <mcp2515_send_message+0xca>
	else if (bit_is_clear(status, 6)) {
		address = 0x04;
	}
	else {
		// all buffer used => could not send message
		return 0;
 6a2:	80 e0       	ldi	r24, 0x00	; 0
	address = (address == 0) ? 1 : address;
	spi_putc(SPI_RTS | address);
	SET(MCP2515_CS);
	
	return address;
}
 6a4:	0f 90       	pop	r0
 6a6:	df 91       	pop	r29
 6a8:	cf 91       	pop	r28
 6aa:	1f 91       	pop	r17
 6ac:	0f 91       	pop	r16
 6ae:	ff 90       	pop	r15
 6b0:	ef 90       	pop	r14
 6b2:	df 90       	pop	r13
 6b4:	08 95       	ret

000006b6 <__itoa_ncheck>:
 6b6:	bb 27       	eor	r27, r27
 6b8:	4a 30       	cpi	r20, 0x0A	; 10
 6ba:	31 f4       	brne	.+12     	; 0x6c8 <__itoa_ncheck+0x12>
 6bc:	99 23       	and	r25, r25
 6be:	22 f4       	brpl	.+8      	; 0x6c8 <__itoa_ncheck+0x12>
 6c0:	bd e2       	ldi	r27, 0x2D	; 45
 6c2:	90 95       	com	r25
 6c4:	81 95       	neg	r24
 6c6:	9f 4f       	sbci	r25, 0xFF	; 255
 6c8:	01 c0       	rjmp	.+2      	; 0x6cc <__utoa_common>

000006ca <__utoa_ncheck>:
 6ca:	bb 27       	eor	r27, r27

000006cc <__utoa_common>:
 6cc:	fb 01       	movw	r30, r22
 6ce:	55 27       	eor	r21, r21
 6d0:	aa 27       	eor	r26, r26
 6d2:	88 0f       	add	r24, r24
 6d4:	99 1f       	adc	r25, r25
 6d6:	aa 1f       	adc	r26, r26
 6d8:	a4 17       	cp	r26, r20
 6da:	10 f0       	brcs	.+4      	; 0x6e0 <__utoa_common+0x14>
 6dc:	a4 1b       	sub	r26, r20
 6de:	83 95       	inc	r24
 6e0:	50 51       	subi	r21, 0x10	; 16
 6e2:	b9 f7       	brne	.-18     	; 0x6d2 <__utoa_common+0x6>
 6e4:	a0 5d       	subi	r26, 0xD0	; 208
 6e6:	aa 33       	cpi	r26, 0x3A	; 58
 6e8:	08 f0       	brcs	.+2      	; 0x6ec <__utoa_common+0x20>
 6ea:	a9 5d       	subi	r26, 0xD9	; 217
 6ec:	a1 93       	st	Z+, r26
 6ee:	00 97       	sbiw	r24, 0x00	; 0
 6f0:	79 f7       	brne	.-34     	; 0x6d0 <__utoa_common+0x4>
 6f2:	b1 11       	cpse	r27, r1
 6f4:	b1 93       	st	Z+, r27
 6f6:	11 92       	st	Z+, r1
 6f8:	cb 01       	movw	r24, r22
 6fa:	00 c0       	rjmp	.+0      	; 0x6fc <strrev>

000006fc <strrev>:
 6fc:	dc 01       	movw	r26, r24
 6fe:	fc 01       	movw	r30, r24
 700:	67 2f       	mov	r22, r23
 702:	71 91       	ld	r23, Z+
 704:	77 23       	and	r23, r23
 706:	e1 f7       	brne	.-8      	; 0x700 <strrev+0x4>
 708:	32 97       	sbiw	r30, 0x02	; 2
 70a:	04 c0       	rjmp	.+8      	; 0x714 <strrev+0x18>
 70c:	7c 91       	ld	r23, X
 70e:	6d 93       	st	X+, r22
 710:	70 83       	st	Z, r23
 712:	62 91       	ld	r22, -Z
 714:	ae 17       	cp	r26, r30
 716:	bf 07       	cpc	r27, r31
 718:	c8 f3       	brcs	.-14     	; 0x70c <strrev+0x10>
 71a:	08 95       	ret

0000071c <_exit>:
 71c:	f8 94       	cli

0000071e <__stop_program>:
 71e:	ff cf       	rjmp	.-2      	; 0x71e <__stop_program>
