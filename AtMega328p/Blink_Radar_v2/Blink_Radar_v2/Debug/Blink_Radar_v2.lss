
Blink_Radar_v2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800200  000004c0  00000534  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004c0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000556  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000b0  00000000  00000000  00000586  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000bd4  00000000  00000000  00000636  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000496  00000000  00000000  0000120a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000006dc  00000000  00000000  000016a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000160  00000000  00000000  00001d7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000002fb  00000000  00000000  00001edc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000762  00000000  00000000  000021d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000a8  00000000  00000000  00002939  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	86 c0       	rjmp	.+268    	; 0x112 <__bad_interrupt>
   6:	00 00       	nop
   8:	84 c0       	rjmp	.+264    	; 0x112 <__bad_interrupt>
   a:	00 00       	nop
   c:	82 c0       	rjmp	.+260    	; 0x112 <__bad_interrupt>
   e:	00 00       	nop
  10:	80 c0       	rjmp	.+256    	; 0x112 <__bad_interrupt>
  12:	00 00       	nop
  14:	7e c0       	rjmp	.+252    	; 0x112 <__bad_interrupt>
  16:	00 00       	nop
  18:	7c c0       	rjmp	.+248    	; 0x112 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7a c0       	rjmp	.+244    	; 0x112 <__bad_interrupt>
  1e:	00 00       	nop
  20:	78 c0       	rjmp	.+240    	; 0x112 <__bad_interrupt>
  22:	00 00       	nop
  24:	76 c0       	rjmp	.+236    	; 0x112 <__bad_interrupt>
  26:	00 00       	nop
  28:	74 c0       	rjmp	.+232    	; 0x112 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	72 c0       	rjmp	.+228    	; 0x112 <__bad_interrupt>
  2e:	00 00       	nop
  30:	70 c0       	rjmp	.+224    	; 0x112 <__bad_interrupt>
  32:	00 00       	nop
  34:	6e c0       	rjmp	.+220    	; 0x112 <__bad_interrupt>
  36:	00 00       	nop
  38:	6c c0       	rjmp	.+216    	; 0x112 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6a c0       	rjmp	.+212    	; 0x112 <__bad_interrupt>
  3e:	00 00       	nop
  40:	68 c0       	rjmp	.+208    	; 0x112 <__bad_interrupt>
  42:	00 00       	nop
  44:	66 c0       	rjmp	.+204    	; 0x112 <__bad_interrupt>
  46:	00 00       	nop
  48:	64 c0       	rjmp	.+200    	; 0x112 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	62 c0       	rjmp	.+196    	; 0x112 <__bad_interrupt>
  4e:	00 00       	nop
  50:	60 c0       	rjmp	.+192    	; 0x112 <__bad_interrupt>
  52:	00 00       	nop
  54:	5e c0       	rjmp	.+188    	; 0x112 <__bad_interrupt>
  56:	00 00       	nop
  58:	5c c0       	rjmp	.+184    	; 0x112 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5a c0       	rjmp	.+180    	; 0x112 <__bad_interrupt>
  5e:	00 00       	nop
  60:	58 c0       	rjmp	.+176    	; 0x112 <__bad_interrupt>
  62:	00 00       	nop
  64:	56 c0       	rjmp	.+172    	; 0x112 <__bad_interrupt>
  66:	00 00       	nop
  68:	54 c0       	rjmp	.+168    	; 0x112 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	52 c0       	rjmp	.+164    	; 0x112 <__bad_interrupt>
  6e:	00 00       	nop
  70:	50 c0       	rjmp	.+160    	; 0x112 <__bad_interrupt>
  72:	00 00       	nop
  74:	4e c0       	rjmp	.+156    	; 0x112 <__bad_interrupt>
  76:	00 00       	nop
  78:	4c c0       	rjmp	.+152    	; 0x112 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4a c0       	rjmp	.+148    	; 0x112 <__bad_interrupt>
  7e:	00 00       	nop
  80:	48 c0       	rjmp	.+144    	; 0x112 <__bad_interrupt>
  82:	00 00       	nop
  84:	46 c0       	rjmp	.+140    	; 0x112 <__bad_interrupt>
  86:	00 00       	nop
  88:	44 c0       	rjmp	.+136    	; 0x112 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	42 c0       	rjmp	.+132    	; 0x112 <__bad_interrupt>
  8e:	00 00       	nop
  90:	40 c0       	rjmp	.+128    	; 0x112 <__bad_interrupt>
  92:	00 00       	nop
  94:	3e c0       	rjmp	.+124    	; 0x112 <__bad_interrupt>
  96:	00 00       	nop
  98:	3c c0       	rjmp	.+120    	; 0x112 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	3a c0       	rjmp	.+116    	; 0x112 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	38 c0       	rjmp	.+112    	; 0x112 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	36 c0       	rjmp	.+108    	; 0x112 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	34 c0       	rjmp	.+104    	; 0x112 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	32 c0       	rjmp	.+100    	; 0x112 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	30 c0       	rjmp	.+96     	; 0x112 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	2e c0       	rjmp	.+92     	; 0x112 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	2c c0       	rjmp	.+88     	; 0x112 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	2a c0       	rjmp	.+84     	; 0x112 <__bad_interrupt>
  be:	00 00       	nop
  c0:	28 c0       	rjmp	.+80     	; 0x112 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	26 c0       	rjmp	.+76     	; 0x112 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	24 c0       	rjmp	.+72     	; 0x112 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	22 c0       	rjmp	.+68     	; 0x112 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	20 c0       	rjmp	.+64     	; 0x112 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	1e c0       	rjmp	.+60     	; 0x112 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	1c c0       	rjmp	.+56     	; 0x112 <__bad_interrupt>
  da:	00 00       	nop
  dc:	1a c0       	rjmp	.+52     	; 0x112 <__bad_interrupt>
  de:	00 00       	nop
  e0:	18 c0       	rjmp	.+48     	; 0x112 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e0 ec       	ldi	r30, 0xC0	; 192
  fc:	f4 e0       	ldi	r31, 0x04	; 4
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 32       	cpi	r26, 0x22	; 34
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	74 d0       	rcall	.+232    	; 0x1f8 <main>
 110:	d5 c1       	rjmp	.+938    	; 0x4bc <_exit>

00000112 <__bad_interrupt>:
 112:	76 cf       	rjmp	.-276    	; 0x0 <__vectors>

00000114 <US_init>:
void US_init(); // Initialize the ultrasonic sensor
void US_trig(); // Trigger a pulse

void US_init()
{
	US_DDR |= (1 << US_TRIG);
 114:	26 9a       	sbi	0x04, 6	; 4
 116:	08 95       	ret

00000118 <US_trig>:
}

void US_trig()
{
	// Send a 10uS pulse on trigger line
	US_PORT |= (1 << US_TRIG); // High
 118:	2e 9a       	sbi	0x05, 6	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11a:	80 e5       	ldi	r24, 0x50	; 80
 11c:	8a 95       	dec	r24
 11e:	f1 f7       	brne	.-4      	; 0x11c <US_trig+0x4>
	_delay_us(15); // Wait 15uS
	US_PORT &= ~(1 << US_TRIG); // Low
 120:	2e 98       	cbi	0x05, 6	; 5
 122:	08 95       	ret

00000124 <pulse_width>:
{
	uint32_t i,result; // Value goes from 0 to 65536
	//Wait for the rising edge
	for(i = 0;i < 600000;i++)
	{
		if(!(US_PIN & (1 << US_ECHO)))
 124:	1f 99       	sbic	0x03, 7	; 3
 126:	17 c0       	rjmp	.+46     	; 0x156 <pulse_width+0x32>

uint16_t pulse_width()
{
	uint32_t i,result; // Value goes from 0 to 65536
	//Wait for the rising edge
	for(i = 0;i < 600000;i++)
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	a0 e0       	ldi	r26, 0x00	; 0
 12e:	b0 e0       	ldi	r27, 0x00	; 0
	{
		if(!(US_PIN & (1 << US_ECHO)))
 130:	1f 99       	sbic	0x03, 7	; 3
 132:	0b c0       	rjmp	.+22     	; 0x14a <pulse_width+0x26>

uint16_t pulse_width()
{
	uint32_t i,result; // Value goes from 0 to 65536
	//Wait for the rising edge
	for(i = 0;i < 600000;i++)
 134:	01 96       	adiw	r24, 0x01	; 1
 136:	a1 1d       	adc	r26, r1
 138:	b1 1d       	adc	r27, r1
 13a:	80 3c       	cpi	r24, 0xC0	; 192
 13c:	27 e2       	ldi	r18, 0x27	; 39
 13e:	92 07       	cpc	r25, r18
 140:	29 e0       	ldi	r18, 0x09	; 9
 142:	a2 07       	cpc	r26, r18
 144:	b1 05       	cpc	r27, r1
 146:	a1 f7       	brne	.-24     	; 0x130 <pulse_width+0xc>
 148:	48 c0       	rjmp	.+144    	; 0x1da <pulse_width+0xb6>
		continue; // Line is still low, so wait
		else
		break; // High edge detected, so break
	}

	if(i == 600000)
 14a:	80 3c       	cpi	r24, 0xC0	; 192
 14c:	97 42       	sbci	r25, 0x27	; 39
 14e:	a9 40       	sbci	r26, 0x09	; 9
 150:	b1 05       	cpc	r27, r1
 152:	09 f4       	brne	.+2      	; 0x156 <pulse_width+0x32>
 154:	45 c0       	rjmp	.+138    	; 0x1e0 <pulse_width+0xbc>
	return US_TIME_OUT; // No Reply found from the ultrasonic sensor, time lapsed
	// High Edge found
	
	// Setup Timer1
	TCCR1A = 0x00; 
 156:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = (1 << CS11); // Prescaler = F_CPU / 8
 15a:	82 e0       	ldi	r24, 0x02	; 2
 15c:	80 93 81 00 	sts	0x0081, r24
	TCNT1 = 0x00; //Initialize the counter
 160:	10 92 85 00 	sts	0x0085, r1
 164:	10 92 84 00 	sts	0x0084, r1
	// Counting the width of pulse
	
	// Now wait for the falling edge
	for(i = 0;i < 600000;i++)
	{
		if(US_PIN & (1 << US_ECHO))
 168:	1f 9b       	sbis	0x03, 7	; 3
 16a:	24 c0       	rjmp	.+72     	; 0x1b4 <pulse_width+0x90>
		{
			if(TCNT1 > 60000) 
 16c:	80 91 84 00 	lds	r24, 0x0084
 170:	90 91 85 00 	lds	r25, 0x0085
 174:	81 36       	cpi	r24, 0x61	; 97
 176:	9a 4e       	sbci	r25, 0xEA	; 234
 178:	e8 f4       	brcc	.+58     	; 0x1b4 <pulse_width+0x90>
	TCNT1 = 0x00; //Initialize the counter

	// Counting the width of pulse
	
	// Now wait for the falling edge
	for(i = 0;i < 600000;i++)
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	a0 e0       	ldi	r26, 0x00	; 0
 180:	b0 e0       	ldi	r27, 0x00	; 0
	{
		if(US_PIN & (1 << US_ECHO))
		{
			if(TCNT1 > 60000) 
 182:	e4 e8       	ldi	r30, 0x84	; 132
 184:	f0 e0       	ldi	r31, 0x00	; 0
	// Counting the width of pulse
	
	// Now wait for the falling edge
	for(i = 0;i < 600000;i++)
	{
		if(US_PIN & (1 << US_ECHO))
 186:	1f 9b       	sbis	0x03, 7	; 3
 188:	10 c0       	rjmp	.+32     	; 0x1aa <pulse_width+0x86>
		{
			if(TCNT1 > 60000) 
 18a:	20 81       	ld	r18, Z
 18c:	31 81       	ldd	r19, Z+1	; 0x01
 18e:	21 36       	cpi	r18, 0x61	; 97
 190:	3a 4e       	sbci	r19, 0xEA	; 234
 192:	58 f4       	brcc	.+22     	; 0x1aa <pulse_width+0x86>
	TCNT1 = 0x00; //Initialize the counter

	// Counting the width of pulse
	
	// Now wait for the falling edge
	for(i = 0;i < 600000;i++)
 194:	01 96       	adiw	r24, 0x01	; 1
 196:	a1 1d       	adc	r26, r1
 198:	b1 1d       	adc	r27, r1
 19a:	80 3c       	cpi	r24, 0xC0	; 192
 19c:	27 e2       	ldi	r18, 0x27	; 39
 19e:	92 07       	cpc	r25, r18
 1a0:	29 e0       	ldi	r18, 0x09	; 9
 1a2:	a2 07       	cpc	r26, r18
 1a4:	b1 05       	cpc	r27, r1
 1a6:	79 f7       	brne	.-34     	; 0x186 <pulse_width+0x62>
 1a8:	1e c0       	rjmp	.+60     	; 0x1e6 <pulse_width+0xc2>
		}
		else
		break;
	}

	if(i == 600000)
 1aa:	80 3c       	cpi	r24, 0xC0	; 192
 1ac:	97 42       	sbci	r25, 0x27	; 39
 1ae:	a9 40       	sbci	r26, 0x09	; 9
 1b0:	b1 05       	cpc	r27, r1
 1b2:	e1 f0       	breq	.+56     	; 0x1ec <pulse_width+0xc8>
	return US_NO_OBSTACLE; // Indicates time out

	//Falling edge found

	result = TCNT1;
 1b4:	80 91 84 00 	lds	r24, 0x0084
 1b8:	90 91 85 00 	lds	r25, 0x0085
 1bc:	a0 e0       	ldi	r26, 0x00	; 0
 1be:	b0 e0       	ldi	r27, 0x00	; 0

	//Stop Timer1
	TCCR1B = 0x00;
 1c0:	10 92 81 00 	sts	0x0081, r1

	if(result > 60000)
 1c4:	81 36       	cpi	r24, 0x61	; 97
 1c6:	2a ee       	ldi	r18, 0xEA	; 234
 1c8:	92 07       	cpc	r25, r18
 1ca:	a1 05       	cpc	r26, r1
 1cc:	b1 05       	cpc	r27, r1
 1ce:	88 f4       	brcc	.+34     	; 0x1f2 <pulse_width+0xce>
	return US_NO_OBSTACLE; //No obstacle
	else
	return (result >> 1);
 1d0:	b6 95       	lsr	r27
 1d2:	a7 95       	ror	r26
 1d4:	97 95       	ror	r25
 1d6:	87 95       	ror	r24
 1d8:	08 95       	ret
		else
		break; // High edge detected, so break
	}

	if(i == 600000)
	return US_TIME_OUT; // No Reply found from the ultrasonic sensor, time lapsed
 1da:	84 ef       	ldi	r24, 0xF4	; 244
 1dc:	9f ef       	ldi	r25, 0xFF	; 255
 1de:	08 95       	ret
 1e0:	84 ef       	ldi	r24, 0xF4	; 244
 1e2:	9f ef       	ldi	r25, 0xFF	; 255
 1e4:	08 95       	ret
		else
		break;
	}

	if(i == 600000)
	return US_NO_OBSTACLE; // Indicates time out
 1e6:	83 ef       	ldi	r24, 0xF3	; 243
 1e8:	9f ef       	ldi	r25, 0xFF	; 255
 1ea:	08 95       	ret
 1ec:	83 ef       	ldi	r24, 0xF3	; 243
 1ee:	9f ef       	ldi	r25, 0xFF	; 255
 1f0:	08 95       	ret

	//Stop Timer1
	TCCR1B = 0x00;

	if(result > 60000)
	return US_NO_OBSTACLE; //No obstacle
 1f2:	83 ef       	ldi	r24, 0xF3	; 243
 1f4:	9f ef       	ldi	r25, 0xFF	; 255
	else
	return (result >> 1);
 1f6:	08 95       	ret

000001f8 <main>:
#include <stdlib.h>
#include "lcd.h"
#include "usonic.h"

int main(void)
{
 1f8:	cf 93       	push	r28
 1fa:	df 93       	push	r29
 1fc:	00 d0       	rcall	.+0      	; 0x1fe <main+0x6>
 1fe:	1f 92       	push	r1
 200:	cd b7       	in	r28, 0x3d	; 61
 202:	de b7       	in	r29, 0x3e	; 62
	uint16_t sensorDistance; // Variable that holds the return value of the pulse_width function in usonic.h
	DDRE |= (1 << PE3) | (1 << PE4) | (1 << PE5); // Configure pins 5, 2 and 3 as outputs
 204:	8d b1       	in	r24, 0x0d	; 13
 206:	88 63       	ori	r24, 0x38	; 56
 208:	8d b9       	out	0x0d, r24	; 13
	US_init(); // Initialize the ultrasonic sensor
 20a:	84 df       	rcall	.-248    	; 0x114 <US_init>
	lcd_init(LCD_DISP_ON); // Initialize LCD
 20c:	8c e0       	ldi	r24, 0x0C	; 12
 20e:	e6 d0       	rcall	.+460    	; 0x3dc <lcd_init>
	lcd_puts(" HC SR04 Sensor"); 
 210:	80 e0       	ldi	r24, 0x00	; 0
 212:	92 e0       	ldi	r25, 0x02	; 2
 214:	d4 d0       	rcall	.+424    	; 0x3be <lcd_puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 216:	2f ef       	ldi	r18, 0xFF	; 255
 218:	83 ed       	ldi	r24, 0xD3	; 211
 21a:	90 e3       	ldi	r25, 0x30	; 48
 21c:	21 50       	subi	r18, 0x01	; 1
 21e:	80 40       	sbci	r24, 0x00	; 0
 220:	90 40       	sbci	r25, 0x00	; 0
 222:	e1 f7       	brne	.-8      	; 0x21c <main+0x24>
 224:	00 c0       	rjmp	.+0      	; 0x226 <main+0x2e>
 226:	00 00       	nop
	_delay_ms(1000);
	uint16_t distance; // Variable that holds the distance measured in centimetres
	char value[4]; // Variable converted to string by itoa function and displayed on the LCD
    while(1)
    {
        US_trig(); // Send a 10us pulse on the trigger line
 228:	77 df       	rcall	.-274    	; 0x118 <US_trig>
		sensorDistance = pulse_width();
 22a:	7c df       	rcall	.-264    	; 0x124 <pulse_width>
		distance = (sensorDistance / 58);
 22c:	9c 01       	movw	r18, r24
 22e:	af e9       	ldi	r26, 0x9F	; 159
 230:	b6 e4       	ldi	r27, 0x46	; 70
 232:	02 d1       	rcall	.+516    	; 0x438 <__umulhisi3>
 234:	8c 01       	movw	r16, r24
 236:	12 95       	swap	r17
 238:	02 95       	swap	r16
 23a:	0f 70       	andi	r16, 0x0F	; 15
 23c:	01 27       	eor	r16, r17
 23e:	1f 70       	andi	r17, 0x0F	; 15
 240:	01 27       	eor	r16, r17
		// If the distance is below 10cm, turn the red LED on and off
		if(distance <= 10)
 242:	0b 30       	cpi	r16, 0x0B	; 11
 244:	11 05       	cpc	r17, r1
 246:	a8 f4       	brcc	.+42     	; 0x272 <main+0x7a>
		{
			PORTE |= (1 << PE3); // Turn the red LED on
 248:	73 9a       	sbi	0x0e, 3	; 14
 24a:	2f ef       	ldi	r18, 0xFF	; 255
 24c:	81 ee       	ldi	r24, 0xE1	; 225
 24e:	94 e0       	ldi	r25, 0x04	; 4
 250:	21 50       	subi	r18, 0x01	; 1
 252:	80 40       	sbci	r24, 0x00	; 0
 254:	90 40       	sbci	r25, 0x00	; 0
 256:	e1 f7       	brne	.-8      	; 0x250 <main+0x58>
 258:	00 c0       	rjmp	.+0      	; 0x25a <main+0x62>
 25a:	00 00       	nop
			_delay_ms(100);
			PORTE &= ~(1 << PE3); // Turn the red LED off
 25c:	73 98       	cbi	0x0e, 3	; 14
 25e:	2f ef       	ldi	r18, 0xFF	; 255
 260:	81 ee       	ldi	r24, 0xE1	; 225
 262:	94 e0       	ldi	r25, 0x04	; 4
 264:	21 50       	subi	r18, 0x01	; 1
 266:	80 40       	sbci	r24, 0x00	; 0
 268:	90 40       	sbci	r25, 0x00	; 0
 26a:	e1 f7       	brne	.-8      	; 0x264 <main+0x6c>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <main+0x76>
 26e:	00 00       	nop
 270:	2d c0       	rjmp	.+90     	; 0x2cc <main+0xd4>
			_delay_ms(100);
		}
		// If the distance is between 10 and 20cm, turn the yellow LED on and off
		else if(distance > 10 && distance <= 20)
 272:	c8 01       	movw	r24, r16
 274:	0b 97       	sbiw	r24, 0x0b	; 11
 276:	0a 97       	sbiw	r24, 0x0a	; 10
 278:	a8 f4       	brcc	.+42     	; 0x2a4 <main+0xac>
		{
			PORTE |= (1 << PE4); // Turn the yellow LED on
 27a:	74 9a       	sbi	0x0e, 4	; 14
 27c:	2f ef       	ldi	r18, 0xFF	; 255
 27e:	81 ee       	ldi	r24, 0xE1	; 225
 280:	94 e0       	ldi	r25, 0x04	; 4
 282:	21 50       	subi	r18, 0x01	; 1
 284:	80 40       	sbci	r24, 0x00	; 0
 286:	90 40       	sbci	r25, 0x00	; 0
 288:	e1 f7       	brne	.-8      	; 0x282 <main+0x8a>
 28a:	00 c0       	rjmp	.+0      	; 0x28c <main+0x94>
 28c:	00 00       	nop
			_delay_ms(100);
			PORTE &= ~(1 << PE4); // Turn the yellow LED off
 28e:	74 98       	cbi	0x0e, 4	; 14
 290:	2f ef       	ldi	r18, 0xFF	; 255
 292:	81 ee       	ldi	r24, 0xE1	; 225
 294:	94 e0       	ldi	r25, 0x04	; 4
 296:	21 50       	subi	r18, 0x01	; 1
 298:	80 40       	sbci	r24, 0x00	; 0
 29a:	90 40       	sbci	r25, 0x00	; 0
 29c:	e1 f7       	brne	.-8      	; 0x296 <main+0x9e>
 29e:	00 c0       	rjmp	.+0      	; 0x2a0 <main+0xa8>
 2a0:	00 00       	nop
 2a2:	14 c0       	rjmp	.+40     	; 0x2cc <main+0xd4>
			_delay_ms(100);
		}
		else
		// If the distance is above 20cm, turn the green LED on and off
		{
			PORTE |= (1 << PE5); // Turn the green LED on
 2a4:	75 9a       	sbi	0x0e, 5	; 14
 2a6:	2f ef       	ldi	r18, 0xFF	; 255
 2a8:	81 ee       	ldi	r24, 0xE1	; 225
 2aa:	94 e0       	ldi	r25, 0x04	; 4
 2ac:	21 50       	subi	r18, 0x01	; 1
 2ae:	80 40       	sbci	r24, 0x00	; 0
 2b0:	90 40       	sbci	r25, 0x00	; 0
 2b2:	e1 f7       	brne	.-8      	; 0x2ac <main+0xb4>
 2b4:	00 c0       	rjmp	.+0      	; 0x2b6 <main+0xbe>
 2b6:	00 00       	nop
			_delay_ms(100);
			PORTE &= ~(1 << PE5); // Turn the green LED off
 2b8:	75 98       	cbi	0x0e, 5	; 14
 2ba:	2f ef       	ldi	r18, 0xFF	; 255
 2bc:	81 ee       	ldi	r24, 0xE1	; 225
 2be:	94 e0       	ldi	r25, 0x04	; 4
 2c0:	21 50       	subi	r18, 0x01	; 1
 2c2:	80 40       	sbci	r24, 0x00	; 0
 2c4:	90 40       	sbci	r25, 0x00	; 0
 2c6:	e1 f7       	brne	.-8      	; 0x2c0 <main+0xc8>
 2c8:	00 c0       	rjmp	.+0      	; 0x2ca <main+0xd2>
 2ca:	00 00       	nop
			_delay_ms(100);
		}
		//distance2 = (r / 148);
		lcd_clrscr();
 2cc:	69 d0       	rcall	.+210    	; 0x3a0 <lcd_clrscr>
		lcd_gotoxy(0, 0);
 2ce:	60 e0       	ldi	r22, 0x00	; 0
 2d0:	80 e0       	ldi	r24, 0x00	; 0
 2d2:	5e d0       	rcall	.+188    	; 0x390 <lcd_gotoxy>
		lcd_puts("Distance:");
 2d4:	80 e1       	ldi	r24, 0x10	; 16
 2d6:	92 e0       	ldi	r25, 0x02	; 2
 2d8:	72 d0       	rcall	.+228    	; 0x3be <lcd_puts>
		lcd_gotoxy(10, 0);
 2da:	60 e0       	ldi	r22, 0x00	; 0
 2dc:	8a e0       	ldi	r24, 0x0A	; 10
 2de:	58 d0       	rcall	.+176    	; 0x390 <lcd_gotoxy>
		if(distance == 1129)
 2e0:	09 36       	cpi	r16, 0x69	; 105
 2e2:	24 e0       	ldi	r18, 0x04	; 4
 2e4:	12 07       	cpc	r17, r18
 2e6:	21 f4       	brne	.+8      	; 0x2f0 <main+0xf8>
		{
			lcd_puts("max");
 2e8:	8a e1       	ldi	r24, 0x1A	; 26
 2ea:	92 e0       	ldi	r25, 0x02	; 2
 2ec:	68 d0       	rcall	.+208    	; 0x3be <lcd_puts>
 2ee:	09 c0       	rjmp	.+18     	; 0x302 <main+0x10a>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 2f0:	4a e0       	ldi	r20, 0x0A	; 10
 2f2:	be 01       	movw	r22, r28
 2f4:	6f 5f       	subi	r22, 0xFF	; 255
 2f6:	7f 4f       	sbci	r23, 0xFF	; 255
 2f8:	c8 01       	movw	r24, r16
 2fa:	ad d0       	rcall	.+346    	; 0x456 <__itoa_ncheck>
		}
		else
		{
			itoa(distance, value, 10);
			lcd_puts(value);
 2fc:	ce 01       	movw	r24, r28
 2fe:	01 96       	adiw	r24, 0x01	; 1
 300:	5e d0       	rcall	.+188    	; 0x3be <lcd_puts>
		}
		lcd_gotoxy(14, 0);
 302:	60 e0       	ldi	r22, 0x00	; 0
 304:	8e e0       	ldi	r24, 0x0E	; 14
 306:	44 d0       	rcall	.+136    	; 0x390 <lcd_gotoxy>
		lcd_puts("cm");
 308:	8e e1       	ldi	r24, 0x1E	; 30
 30a:	92 e0       	ldi	r25, 0x02	; 2
 30c:	58 d0       	rcall	.+176    	; 0x3be <lcd_puts>
 30e:	8f ef       	ldi	r24, 0xFF	; 255
 310:	99 e6       	ldi	r25, 0x69	; 105
 312:	28 e1       	ldi	r18, 0x18	; 24
 314:	81 50       	subi	r24, 0x01	; 1
 316:	90 40       	sbci	r25, 0x00	; 0
 318:	20 40       	sbci	r18, 0x00	; 0
 31a:	e1 f7       	brne	.-8      	; 0x314 <main+0x11c>
 31c:	00 c0       	rjmp	.+0      	; 0x31e <main+0x126>
 31e:	00 00       	nop
 320:	83 cf       	rjmp	.-250    	; 0x228 <main+0x30>

00000322 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
 322:	12 9a       	sbi	0x02, 2	; 2
 324:	00 c0       	rjmp	.+0      	; 0x326 <toggle_e+0x4>
 326:	12 98       	cbi	0x02, 2	; 2
 328:	08 95       	ret

0000032a <lcd_write>:
 32a:	cf 93       	push	r28
 32c:	c8 2f       	mov	r28, r24
 32e:	66 23       	and	r22, r22
 330:	11 f0       	breq	.+4      	; 0x336 <lcd_write+0xc>
 332:	10 9a       	sbi	0x02, 0	; 2
 334:	01 c0       	rjmp	.+2      	; 0x338 <lcd_write+0xe>
 336:	10 98       	cbi	0x02, 0	; 2
 338:	0b 9a       	sbi	0x01, 3	; 1
 33a:	0c 9a       	sbi	0x01, 4	; 1
 33c:	0d 9a       	sbi	0x01, 5	; 1
 33e:	0e 9a       	sbi	0x01, 6	; 1
 340:	16 98       	cbi	0x02, 6	; 2
 342:	15 98       	cbi	0x02, 5	; 2
 344:	14 98       	cbi	0x02, 4	; 2
 346:	13 98       	cbi	0x02, 3	; 2
 348:	cc 23       	and	r28, r28
 34a:	0c f4       	brge	.+2      	; 0x34e <lcd_write+0x24>
 34c:	16 9a       	sbi	0x02, 6	; 2
 34e:	c6 fd       	sbrc	r28, 6
 350:	15 9a       	sbi	0x02, 5	; 2
 352:	c5 fd       	sbrc	r28, 5
 354:	14 9a       	sbi	0x02, 4	; 2
 356:	c4 fd       	sbrc	r28, 4
 358:	13 9a       	sbi	0x02, 3	; 2
 35a:	e3 df       	rcall	.-58     	; 0x322 <toggle_e>
 35c:	16 98       	cbi	0x02, 6	; 2
 35e:	15 98       	cbi	0x02, 5	; 2
 360:	14 98       	cbi	0x02, 4	; 2
 362:	13 98       	cbi	0x02, 3	; 2
 364:	c3 fd       	sbrc	r28, 3
 366:	16 9a       	sbi	0x02, 6	; 2
 368:	c2 fd       	sbrc	r28, 2
 36a:	15 9a       	sbi	0x02, 5	; 2
 36c:	c1 fd       	sbrc	r28, 1
 36e:	14 9a       	sbi	0x02, 4	; 2
 370:	c0 fd       	sbrc	r28, 0
 372:	13 9a       	sbi	0x02, 3	; 2
 374:	d6 df       	rcall	.-84     	; 0x322 <toggle_e>
 376:	13 9a       	sbi	0x02, 3	; 2
 378:	14 9a       	sbi	0x02, 4	; 2
 37a:	15 9a       	sbi	0x02, 5	; 2
 37c:	16 9a       	sbi	0x02, 6	; 2
 37e:	cf 91       	pop	r28
 380:	08 95       	ret

00000382 <lcd_command>:
 382:	e0 ea       	ldi	r30, 0xA0	; 160
 384:	ff e0       	ldi	r31, 0x0F	; 15
 386:	31 97       	sbiw	r30, 0x01	; 1
 388:	f1 f7       	brne	.-4      	; 0x386 <lcd_command+0x4>
 38a:	60 e0       	ldi	r22, 0x00	; 0
 38c:	ce cf       	rjmp	.-100    	; 0x32a <lcd_write>
 38e:	08 95       	ret

00000390 <lcd_gotoxy>:
 390:	61 11       	cpse	r22, r1
 392:	03 c0       	rjmp	.+6      	; 0x39a <lcd_gotoxy+0xa>
 394:	80 58       	subi	r24, 0x80	; 128
 396:	f5 cf       	rjmp	.-22     	; 0x382 <lcd_command>
 398:	08 95       	ret
 39a:	80 54       	subi	r24, 0x40	; 64
 39c:	f2 cf       	rjmp	.-28     	; 0x382 <lcd_command>
 39e:	08 95       	ret

000003a0 <lcd_clrscr>:
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	ef cf       	rjmp	.-34     	; 0x382 <lcd_command>
 3a4:	08 95       	ret

000003a6 <lcd_putc>:
 3a6:	e0 ea       	ldi	r30, 0xA0	; 160
 3a8:	ff e0       	ldi	r31, 0x0F	; 15
 3aa:	31 97       	sbiw	r30, 0x01	; 1
 3ac:	f1 f7       	brne	.-4      	; 0x3aa <lcd_putc+0x4>
 3ae:	8a 30       	cpi	r24, 0x0A	; 10
 3b0:	19 f4       	brne	.+6      	; 0x3b8 <lcd_putc+0x12>
 3b2:	80 ec       	ldi	r24, 0xC0	; 192
 3b4:	e6 cf       	rjmp	.-52     	; 0x382 <lcd_command>
 3b6:	08 95       	ret
 3b8:	61 e0       	ldi	r22, 0x01	; 1
 3ba:	b7 cf       	rjmp	.-146    	; 0x32a <lcd_write>
 3bc:	08 95       	ret

000003be <lcd_puts>:
 3be:	cf 93       	push	r28
 3c0:	df 93       	push	r29
 3c2:	ec 01       	movw	r28, r24
 3c4:	21 96       	adiw	r28, 0x01	; 1
 3c6:	fc 01       	movw	r30, r24
 3c8:	80 81       	ld	r24, Z
 3ca:	88 23       	and	r24, r24
 3cc:	21 f0       	breq	.+8      	; 0x3d6 <lcd_puts+0x18>
 3ce:	eb df       	rcall	.-42     	; 0x3a6 <lcd_putc>
 3d0:	89 91       	ld	r24, Y+
 3d2:	81 11       	cpse	r24, r1
 3d4:	fc cf       	rjmp	.-8      	; 0x3ce <lcd_puts+0x10>
 3d6:	df 91       	pop	r29
 3d8:	cf 91       	pop	r28
 3da:	08 95       	ret

000003dc <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 3dc:	cf 93       	push	r28
 3de:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 3e0:	08 9a       	sbi	0x01, 0	; 1
#if LCD_READ_REQUIRED
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
#endif
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 3e2:	0a 9a       	sbi	0x01, 2	; 1
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 3e4:	0b 9a       	sbi	0x01, 3	; 1
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 3e6:	0c 9a       	sbi	0x01, 4	; 1
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 3e8:	0d 9a       	sbi	0x01, 5	; 1
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 3ea:	0e 9a       	sbi	0x01, 6	; 1
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 3ec:	e0 e0       	ldi	r30, 0x00	; 0
 3ee:	fa ef       	ldi	r31, 0xFA	; 250
 3f0:	31 97       	sbiw	r30, 0x01	; 1
 3f2:	f1 f7       	brne	.-4      	; 0x3f0 <lcd_init+0x14>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 3f4:	14 9a       	sbi	0x02, 4	; 2
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 3f6:	13 9a       	sbi	0x02, 3	; 2
    lcd_e_toggle();
 3f8:	94 df       	rcall	.-216    	; 0x322 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 3fa:	e0 e0       	ldi	r30, 0x00	; 0
 3fc:	fe e4       	ldi	r31, 0x4E	; 78
 3fe:	31 97       	sbiw	r30, 0x01	; 1
 400:	f1 f7       	brne	.-4      	; 0x3fe <lcd_init+0x22>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 402:	8f df       	rcall	.-226    	; 0x322 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 404:	e0 e0       	ldi	r30, 0x00	; 0
 406:	f1 e0       	ldi	r31, 0x01	; 1
 408:	31 97       	sbiw	r30, 0x01	; 1
 40a:	f1 f7       	brne	.-4      	; 0x408 <lcd_init+0x2c>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 40c:	8a df       	rcall	.-236    	; 0x322 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 40e:	e0 e0       	ldi	r30, 0x00	; 0
 410:	f1 e0       	ldi	r31, 0x01	; 1
 412:	31 97       	sbiw	r30, 0x01	; 1
 414:	f1 f7       	brne	.-4      	; 0x412 <lcd_init+0x36>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 416:	13 98       	cbi	0x02, 3	; 2
    lcd_e_toggle();
 418:	84 df       	rcall	.-248    	; 0x322 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 41a:	e0 e0       	ldi	r30, 0x00	; 0
 41c:	f1 e0       	ldi	r31, 0x01	; 1
 41e:	31 97       	sbiw	r30, 0x01	; 1
 420:	f1 f7       	brne	.-4      	; 0x41e <lcd_init+0x42>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 422:	88 e2       	ldi	r24, 0x28	; 40
 424:	ae df       	rcall	.-164    	; 0x382 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 426:	88 e0       	ldi	r24, 0x08	; 8
 428:	ac df       	rcall	.-168    	; 0x382 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 42a:	ba df       	rcall	.-140    	; 0x3a0 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 42c:	86 e0       	ldi	r24, 0x06	; 6
 42e:	a9 df       	rcall	.-174    	; 0x382 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 430:	8c 2f       	mov	r24, r28
 432:	a7 df       	rcall	.-178    	; 0x382 <lcd_command>

 434:	cf 91       	pop	r28
 436:	08 95       	ret

00000438 <__umulhisi3>:
 438:	a2 9f       	mul	r26, r18
 43a:	b0 01       	movw	r22, r0
 43c:	b3 9f       	mul	r27, r19
 43e:	c0 01       	movw	r24, r0
 440:	a3 9f       	mul	r26, r19
 442:	70 0d       	add	r23, r0
 444:	81 1d       	adc	r24, r1
 446:	11 24       	eor	r1, r1
 448:	91 1d       	adc	r25, r1
 44a:	b2 9f       	mul	r27, r18
 44c:	70 0d       	add	r23, r0
 44e:	81 1d       	adc	r24, r1
 450:	11 24       	eor	r1, r1
 452:	91 1d       	adc	r25, r1
 454:	08 95       	ret

00000456 <__itoa_ncheck>:
 456:	bb 27       	eor	r27, r27
 458:	4a 30       	cpi	r20, 0x0A	; 10
 45a:	31 f4       	brne	.+12     	; 0x468 <__itoa_ncheck+0x12>
 45c:	99 23       	and	r25, r25
 45e:	22 f4       	brpl	.+8      	; 0x468 <__itoa_ncheck+0x12>
 460:	bd e2       	ldi	r27, 0x2D	; 45
 462:	90 95       	com	r25
 464:	81 95       	neg	r24
 466:	9f 4f       	sbci	r25, 0xFF	; 255
 468:	01 c0       	rjmp	.+2      	; 0x46c <__utoa_common>

0000046a <__utoa_ncheck>:
 46a:	bb 27       	eor	r27, r27

0000046c <__utoa_common>:
 46c:	fb 01       	movw	r30, r22
 46e:	55 27       	eor	r21, r21
 470:	aa 27       	eor	r26, r26
 472:	88 0f       	add	r24, r24
 474:	99 1f       	adc	r25, r25
 476:	aa 1f       	adc	r26, r26
 478:	a4 17       	cp	r26, r20
 47a:	10 f0       	brcs	.+4      	; 0x480 <__utoa_common+0x14>
 47c:	a4 1b       	sub	r26, r20
 47e:	83 95       	inc	r24
 480:	50 51       	subi	r21, 0x10	; 16
 482:	b9 f7       	brne	.-18     	; 0x472 <__utoa_common+0x6>
 484:	a0 5d       	subi	r26, 0xD0	; 208
 486:	aa 33       	cpi	r26, 0x3A	; 58
 488:	08 f0       	brcs	.+2      	; 0x48c <__utoa_common+0x20>
 48a:	a9 5d       	subi	r26, 0xD9	; 217
 48c:	a1 93       	st	Z+, r26
 48e:	00 97       	sbiw	r24, 0x00	; 0
 490:	79 f7       	brne	.-34     	; 0x470 <__utoa_common+0x4>
 492:	b1 11       	cpse	r27, r1
 494:	b1 93       	st	Z+, r27
 496:	11 92       	st	Z+, r1
 498:	cb 01       	movw	r24, r22
 49a:	00 c0       	rjmp	.+0      	; 0x49c <strrev>

0000049c <strrev>:
 49c:	dc 01       	movw	r26, r24
 49e:	fc 01       	movw	r30, r24
 4a0:	67 2f       	mov	r22, r23
 4a2:	71 91       	ld	r23, Z+
 4a4:	77 23       	and	r23, r23
 4a6:	e1 f7       	brne	.-8      	; 0x4a0 <strrev+0x4>
 4a8:	32 97       	sbiw	r30, 0x02	; 2
 4aa:	04 c0       	rjmp	.+8      	; 0x4b4 <strrev+0x18>
 4ac:	7c 91       	ld	r23, X
 4ae:	6d 93       	st	X+, r22
 4b0:	70 83       	st	Z, r23
 4b2:	62 91       	ld	r22, -Z
 4b4:	ae 17       	cp	r26, r30
 4b6:	bf 07       	cpc	r27, r31
 4b8:	c8 f3       	brcs	.-14     	; 0x4ac <strrev+0x10>
 4ba:	08 95       	ret

000004bc <_exit>:
 4bc:	f8 94       	cli

000004be <__stop_program>:
 4be:	ff cf       	rjmp	.-2      	; 0x4be <__stop_program>
