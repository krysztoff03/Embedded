
ADC_Servox2_Test_OK.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800200  000006de  00000772  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800206  00800206  00000778  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000778  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  000007a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000970  00000000  00000000  00000850  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003f4  00000000  00000000  000011c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000586  00000000  00000000  000015b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000174  00000000  00000000  00001b3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002e6  00000000  00000000  00001cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000527  00000000  00000000  00001f96  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  000024bd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	57 c0       	rjmp	.+174    	; 0x124 <__vector_29>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ee ed       	ldi	r30, 0xDE	; 222
  fc:	f6 e0       	ldi	r31, 0x06	; 6
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a6 30       	cpi	r26, 0x06	; 6
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a6 e0       	ldi	r26, 0x06	; 6
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a8 30       	cpi	r26, 0x08	; 8
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	4d d0       	rcall	.+154    	; 0x1ba <main>
 120:	dc c2       	rjmp	.+1464   	; 0x6da <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <__vector_29>:

/* Variable that holds the 10-bit result of ADC */
static volatile uint16_t adcResult;

ISR(ADC_vect)
{
 124:	1f 92       	push	r1
 126:	0f 92       	push	r0
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	0f 92       	push	r0
 12c:	11 24       	eor	r1, r1
 12e:	0b b6       	in	r0, 0x3b	; 59
 130:	0f 92       	push	r0
 132:	2f 93       	push	r18
 134:	8f 93       	push	r24
 136:	9f 93       	push	r25
 138:	ef 93       	push	r30
 13a:	ff 93       	push	r31
	/* Variable that holds the first 8 bits of the 10 bits ADC resolution */
	uint8_t adclReg = ADCL;
 13c:	80 91 78 00 	lds	r24, 0x0078
	/* ADCL starts with the first 8 bits of final 10 bits, then ADCH 2 remaining bits 
	will be left shifted 8 positions to the left */
	adcResult = (ADCH << 8) | adclReg;
 140:	20 91 79 00 	lds	r18, 0x0079
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	92 2b       	or	r25, r18
 148:	90 93 07 02 	sts	0x0207, r25
 14c:	80 93 06 02 	sts	0x0206, r24
	/* Start single conversion */
	ADCSRA |= (1 << ADSC);
 150:	ea e7       	ldi	r30, 0x7A	; 122
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	80 81       	ld	r24, Z
 156:	80 64       	ori	r24, 0x40	; 64
 158:	80 83       	st	Z, r24
}
 15a:	ff 91       	pop	r31
 15c:	ef 91       	pop	r30
 15e:	9f 91       	pop	r25
 160:	8f 91       	pop	r24
 162:	2f 91       	pop	r18
 164:	0f 90       	pop	r0
 166:	0b be       	out	0x3b, r0	; 59
 168:	0f 90       	pop	r0
 16a:	0f be       	out	0x3f, r0	; 63
 16c:	0f 90       	pop	r0
 16e:	1f 90       	pop	r1
 170:	18 95       	reti

00000172 <adc_init>:

void adc_init()
{
	/* Clear OC1A on Compare Match */
	TCCR1A |= (1 << COM1A1) | (1 << WGM11);
 172:	e0 e8       	ldi	r30, 0x80	; 128
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	80 81       	ld	r24, Z
 178:	82 68       	ori	r24, 0x82	; 130
 17a:	80 83       	st	Z, r24
	/* Fast PWM mode 14 with prescaler of 64 */
	TCCR1B |= (1 << WGM13) | (1 << WGM12) | (1 << CS11) | (1 << CS10);
 17c:	e1 e8       	ldi	r30, 0x81	; 129
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	80 81       	ld	r24, Z
 182:	8b 61       	ori	r24, 0x1B	; 27
 184:	80 83       	st	Z, r24
	/* Top value calculated with Fpwm = Fcpu / (N * (1 + Top)), N - Prescaler = 64 
	   ICR1 = 4999 for 50Hz PWM */
	ICR1 = 4999;
 186:	87 e8       	ldi	r24, 0x87	; 135
 188:	93 e1       	ldi	r25, 0x13	; 19
 18a:	90 93 87 00 	sts	0x0087, r25
 18e:	80 93 86 00 	sts	0x0086, r24
	/* Pin B5 set as output (OC1A) */
	DDRB |= (1 << PB5);
 192:	25 9a       	sbi	0x04, 5	; 4
	/*  */
	OCR1A = 250;
 194:	8a ef       	ldi	r24, 0xFA	; 250
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	90 93 89 00 	sts	0x0089, r25
 19c:	80 93 88 00 	sts	0x0088, r24
	/* AREF = Avcc, Potentiometer connected on channel 0 (Pin A0) */
	ADMUX = (1 << REFS0);
 1a0:	80 e4       	ldi	r24, 0x40	; 64
 1a2:	80 93 7c 00 	sts	0x007C, r24
	/* Enable ADC with a prescaler = 128 (16000000 / 128) = 125 KHz */
	ADCSRA |= (1 << ADEN) | (1 << ADIE) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
 1a6:	ea e7       	ldi	r30, 0x7A	; 122
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	80 81       	ld	r24, Z
 1ac:	8f 68       	ori	r24, 0x8F	; 143
 1ae:	80 83       	st	Z, r24
	/* Enable global interrupts */
	sei();
 1b0:	78 94       	sei
	/* Start single conversion */
	ADCSRA |= (1 << ADSC);
 1b2:	80 81       	ld	r24, Z
 1b4:	80 64       	ori	r24, 0x40	; 64
 1b6:	80 83       	st	Z, r24
 1b8:	08 95       	ret

000001ba <main>:
}

int main(void)
{
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
 1be:	cd b7       	in	r28, 0x3d	; 61
 1c0:	de b7       	in	r29, 0x3e	; 62
 1c2:	28 97       	sbiw	r28, 0x08	; 8
 1c4:	0f b6       	in	r0, 0x3f	; 63
 1c6:	f8 94       	cli
 1c8:	de bf       	out	0x3e, r29	; 62
 1ca:	0f be       	out	0x3f, r0	; 63
 1cc:	cd bf       	out	0x3d, r28	; 61
	/* LCD initialization with display ON, cursor OFF */
	lcd_init(LCD_DISP_ON);
 1ce:	8c e0       	ldi	r24, 0x0C	; 12
 1d0:	9c d0       	rcall	.+312    	; 0x30a <lcd_init>
	/* ADC initialization */	
	adc_init();
 1d2:	cf df       	rcall	.-98     	; 0x172 <adc_init>
	uint16_t ocr1aValue;
	uint16_t finalADCResult;
	char value[3];
	char adcValue[5];
	
	lcd_gotoxy(0, 0);
 1d4:	60 e0       	ldi	r22, 0x00	; 0
 1d6:	80 e0       	ldi	r24, 0x00	; 0
 1d8:	72 d0       	rcall	.+228    	; 0x2be <lcd_gotoxy>
	lcd_puts("ADC: ");
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	92 e0       	ldi	r25, 0x02	; 2
 1de:	86 d0       	rcall	.+268    	; 0x2ec <lcd_puts>
	
    while(1)
    {
        OCR1A = (int)((ocrResult * adcResult) + 250);
 1e0:	08 e8       	ldi	r16, 0x88	; 136
 1e2:	10 e0       	ldi	r17, 0x00	; 0
 1e4:	60 91 06 02 	lds	r22, 0x0206
 1e8:	70 91 07 02 	lds	r23, 0x0207
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	50 d1       	rcall	.+672    	; 0x492 <__floatunsisf>
 1f2:	2d e0       	ldi	r18, 0x0D	; 13
 1f4:	32 e3       	ldi	r19, 0x32	; 50
 1f6:	48 ec       	ldi	r20, 0xC8	; 200
 1f8:	5e e3       	ldi	r21, 0x3E	; 62
 1fa:	d9 d1       	rcall	.+946    	; 0x5ae <__mulsf3>
 1fc:	20 e0       	ldi	r18, 0x00	; 0
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	4a e7       	ldi	r20, 0x7A	; 122
 202:	53 e4       	ldi	r21, 0x43	; 67
 204:	b1 d0       	rcall	.+354    	; 0x368 <__addsf3>
 206:	14 d1       	rcall	.+552    	; 0x430 <__fixsfsi>
 208:	f8 01       	movw	r30, r16
 20a:	71 83       	std	Z+1, r23	; 0x01
 20c:	60 83       	st	Z, r22
		ocr1aValue = OCR1A;
 20e:	80 81       	ld	r24, Z
 210:	91 81       	ldd	r25, Z+1	; 0x01
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 212:	4a e0       	ldi	r20, 0x0A	; 10
 214:	be 01       	movw	r22, r28
 216:	6f 5f       	subi	r22, 0xFF	; 255
 218:	7f 4f       	sbci	r23, 0xFF	; 255
 21a:	2c d2       	rcall	.+1112   	; 0x674 <__itoa_ncheck>
		itoa(ocr1aValue, value, 10);
		lcd_gotoxy(6, 0);
 21c:	60 e0       	ldi	r22, 0x00	; 0
 21e:	86 e0       	ldi	r24, 0x06	; 6
 220:	4e d0       	rcall	.+156    	; 0x2be <lcd_gotoxy>
		lcd_puts(value);
 222:	ce 01       	movw	r24, r28
 224:	01 96       	adiw	r24, 0x01	; 1
 226:	62 d0       	rcall	.+196    	; 0x2ec <lcd_puts>
		
		finalADCResult = adcResult / 4;
 228:	80 91 06 02 	lds	r24, 0x0206
 22c:	90 91 07 02 	lds	r25, 0x0207
 230:	40 e1       	ldi	r20, 0x10	; 16
 232:	be 01       	movw	r22, r28
 234:	6c 5f       	subi	r22, 0xFC	; 252
 236:	7f 4f       	sbci	r23, 0xFF	; 255
 238:	96 95       	lsr	r25
 23a:	87 95       	ror	r24
 23c:	96 95       	lsr	r25
 23e:	87 95       	ror	r24
 240:	19 d2       	rcall	.+1074   	; 0x674 <__itoa_ncheck>
		itoa(finalADCResult, adcValue, 16);
		lcd_gotoxy(6, 1);
 242:	61 e0       	ldi	r22, 0x01	; 1
 244:	86 e0       	ldi	r24, 0x06	; 6
 246:	3b d0       	rcall	.+118    	; 0x2be <lcd_gotoxy>
		lcd_puts(adcValue);
 248:	ce 01       	movw	r24, r28
 24a:	04 96       	adiw	r24, 0x04	; 4
 24c:	4f d0       	rcall	.+158    	; 0x2ec <lcd_puts>
 24e:	ca cf       	rjmp	.-108    	; 0x1e4 <main+0x2a>

00000250 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
 250:	12 9a       	sbi	0x02, 2	; 2
 252:	00 c0       	rjmp	.+0      	; 0x254 <toggle_e+0x4>
 254:	12 98       	cbi	0x02, 2	; 2
 256:	08 95       	ret

00000258 <lcd_write>:
 258:	cf 93       	push	r28
 25a:	c8 2f       	mov	r28, r24
 25c:	66 23       	and	r22, r22
 25e:	11 f0       	breq	.+4      	; 0x264 <lcd_write+0xc>
 260:	10 9a       	sbi	0x02, 0	; 2
 262:	01 c0       	rjmp	.+2      	; 0x266 <lcd_write+0xe>
 264:	10 98       	cbi	0x02, 0	; 2
 266:	0b 9a       	sbi	0x01, 3	; 1
 268:	0c 9a       	sbi	0x01, 4	; 1
 26a:	0d 9a       	sbi	0x01, 5	; 1
 26c:	0e 9a       	sbi	0x01, 6	; 1
 26e:	16 98       	cbi	0x02, 6	; 2
 270:	15 98       	cbi	0x02, 5	; 2
 272:	14 98       	cbi	0x02, 4	; 2
 274:	13 98       	cbi	0x02, 3	; 2
 276:	cc 23       	and	r28, r28
 278:	0c f4       	brge	.+2      	; 0x27c <lcd_write+0x24>
 27a:	16 9a       	sbi	0x02, 6	; 2
 27c:	c6 fd       	sbrc	r28, 6
 27e:	15 9a       	sbi	0x02, 5	; 2
 280:	c5 fd       	sbrc	r28, 5
 282:	14 9a       	sbi	0x02, 4	; 2
 284:	c4 fd       	sbrc	r28, 4
 286:	13 9a       	sbi	0x02, 3	; 2
 288:	e3 df       	rcall	.-58     	; 0x250 <toggle_e>
 28a:	16 98       	cbi	0x02, 6	; 2
 28c:	15 98       	cbi	0x02, 5	; 2
 28e:	14 98       	cbi	0x02, 4	; 2
 290:	13 98       	cbi	0x02, 3	; 2
 292:	c3 fd       	sbrc	r28, 3
 294:	16 9a       	sbi	0x02, 6	; 2
 296:	c2 fd       	sbrc	r28, 2
 298:	15 9a       	sbi	0x02, 5	; 2
 29a:	c1 fd       	sbrc	r28, 1
 29c:	14 9a       	sbi	0x02, 4	; 2
 29e:	c0 fd       	sbrc	r28, 0
 2a0:	13 9a       	sbi	0x02, 3	; 2
 2a2:	d6 df       	rcall	.-84     	; 0x250 <toggle_e>
 2a4:	13 9a       	sbi	0x02, 3	; 2
 2a6:	14 9a       	sbi	0x02, 4	; 2
 2a8:	15 9a       	sbi	0x02, 5	; 2
 2aa:	16 9a       	sbi	0x02, 6	; 2
 2ac:	cf 91       	pop	r28
 2ae:	08 95       	ret

000002b0 <lcd_command>:
 2b0:	e0 ea       	ldi	r30, 0xA0	; 160
 2b2:	ff e0       	ldi	r31, 0x0F	; 15
 2b4:	31 97       	sbiw	r30, 0x01	; 1
 2b6:	f1 f7       	brne	.-4      	; 0x2b4 <lcd_command+0x4>
 2b8:	60 e0       	ldi	r22, 0x00	; 0
 2ba:	ce cf       	rjmp	.-100    	; 0x258 <lcd_write>
 2bc:	08 95       	ret

000002be <lcd_gotoxy>:
 2be:	61 11       	cpse	r22, r1
 2c0:	03 c0       	rjmp	.+6      	; 0x2c8 <lcd_gotoxy+0xa>
 2c2:	80 58       	subi	r24, 0x80	; 128
 2c4:	f5 cf       	rjmp	.-22     	; 0x2b0 <lcd_command>
 2c6:	08 95       	ret
 2c8:	80 54       	subi	r24, 0x40	; 64
 2ca:	f2 cf       	rjmp	.-28     	; 0x2b0 <lcd_command>
 2cc:	08 95       	ret

000002ce <lcd_clrscr>:
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	ef cf       	rjmp	.-34     	; 0x2b0 <lcd_command>
 2d2:	08 95       	ret

000002d4 <lcd_putc>:
 2d4:	e0 ea       	ldi	r30, 0xA0	; 160
 2d6:	ff e0       	ldi	r31, 0x0F	; 15
 2d8:	31 97       	sbiw	r30, 0x01	; 1
 2da:	f1 f7       	brne	.-4      	; 0x2d8 <lcd_putc+0x4>
 2dc:	8a 30       	cpi	r24, 0x0A	; 10
 2de:	19 f4       	brne	.+6      	; 0x2e6 <lcd_putc+0x12>
 2e0:	80 ec       	ldi	r24, 0xC0	; 192
 2e2:	e6 cf       	rjmp	.-52     	; 0x2b0 <lcd_command>
 2e4:	08 95       	ret
 2e6:	61 e0       	ldi	r22, 0x01	; 1
 2e8:	b7 cf       	rjmp	.-146    	; 0x258 <lcd_write>
 2ea:	08 95       	ret

000002ec <lcd_puts>:
 2ec:	cf 93       	push	r28
 2ee:	df 93       	push	r29
 2f0:	ec 01       	movw	r28, r24
 2f2:	21 96       	adiw	r28, 0x01	; 1
 2f4:	fc 01       	movw	r30, r24
 2f6:	80 81       	ld	r24, Z
 2f8:	88 23       	and	r24, r24
 2fa:	21 f0       	breq	.+8      	; 0x304 <lcd_puts+0x18>
 2fc:	eb df       	rcall	.-42     	; 0x2d4 <lcd_putc>
 2fe:	89 91       	ld	r24, Y+
 300:	81 11       	cpse	r24, r1
 302:	fc cf       	rjmp	.-8      	; 0x2fc <lcd_puts+0x10>
 304:	df 91       	pop	r29
 306:	cf 91       	pop	r28
 308:	08 95       	ret

0000030a <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 30a:	cf 93       	push	r28
 30c:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 30e:	08 9a       	sbi	0x01, 0	; 1
#if LCD_READ_REQUIRED
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
#endif
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 310:	0a 9a       	sbi	0x01, 2	; 1
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 312:	0b 9a       	sbi	0x01, 3	; 1
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 314:	0c 9a       	sbi	0x01, 4	; 1
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 316:	0d 9a       	sbi	0x01, 5	; 1
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 318:	0e 9a       	sbi	0x01, 6	; 1
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 31a:	e0 e0       	ldi	r30, 0x00	; 0
 31c:	fa ef       	ldi	r31, 0xFA	; 250
 31e:	31 97       	sbiw	r30, 0x01	; 1
 320:	f1 f7       	brne	.-4      	; 0x31e <lcd_init+0x14>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 322:	14 9a       	sbi	0x02, 4	; 2
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 324:	13 9a       	sbi	0x02, 3	; 2
    lcd_e_toggle();
 326:	94 df       	rcall	.-216    	; 0x250 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 328:	e0 e0       	ldi	r30, 0x00	; 0
 32a:	fe e4       	ldi	r31, 0x4E	; 78
 32c:	31 97       	sbiw	r30, 0x01	; 1
 32e:	f1 f7       	brne	.-4      	; 0x32c <lcd_init+0x22>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 330:	8f df       	rcall	.-226    	; 0x250 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 332:	e0 e0       	ldi	r30, 0x00	; 0
 334:	f1 e0       	ldi	r31, 0x01	; 1
 336:	31 97       	sbiw	r30, 0x01	; 1
 338:	f1 f7       	brne	.-4      	; 0x336 <lcd_init+0x2c>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 33a:	8a df       	rcall	.-236    	; 0x250 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 33c:	e0 e0       	ldi	r30, 0x00	; 0
 33e:	f1 e0       	ldi	r31, 0x01	; 1
 340:	31 97       	sbiw	r30, 0x01	; 1
 342:	f1 f7       	brne	.-4      	; 0x340 <lcd_init+0x36>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 344:	13 98       	cbi	0x02, 3	; 2
    lcd_e_toggle();
 346:	84 df       	rcall	.-248    	; 0x250 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 348:	e0 e0       	ldi	r30, 0x00	; 0
 34a:	f1 e0       	ldi	r31, 0x01	; 1
 34c:	31 97       	sbiw	r30, 0x01	; 1
 34e:	f1 f7       	brne	.-4      	; 0x34c <lcd_init+0x42>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 350:	88 e2       	ldi	r24, 0x28	; 40
 352:	ae df       	rcall	.-164    	; 0x2b0 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 354:	88 e0       	ldi	r24, 0x08	; 8
 356:	ac df       	rcall	.-168    	; 0x2b0 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 358:	ba df       	rcall	.-140    	; 0x2ce <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 35a:	86 e0       	ldi	r24, 0x06	; 6
 35c:	a9 df       	rcall	.-174    	; 0x2b0 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 35e:	8c 2f       	mov	r24, r28
 360:	a7 df       	rcall	.-178    	; 0x2b0 <lcd_command>

 362:	cf 91       	pop	r28
 364:	08 95       	ret

00000366 <__subsf3>:
 366:	50 58       	subi	r21, 0x80	; 128

00000368 <__addsf3>:
 368:	bb 27       	eor	r27, r27
 36a:	aa 27       	eor	r26, r26
 36c:	0e d0       	rcall	.+28     	; 0x38a <__addsf3x>
 36e:	e5 c0       	rjmp	.+458    	; 0x53a <__fp_round>
 370:	d6 d0       	rcall	.+428    	; 0x51e <__fp_pscA>
 372:	30 f0       	brcs	.+12     	; 0x380 <__addsf3+0x18>
 374:	db d0       	rcall	.+438    	; 0x52c <__fp_pscB>
 376:	20 f0       	brcs	.+8      	; 0x380 <__addsf3+0x18>
 378:	31 f4       	brne	.+12     	; 0x386 <__addsf3+0x1e>
 37a:	9f 3f       	cpi	r25, 0xFF	; 255
 37c:	11 f4       	brne	.+4      	; 0x382 <__addsf3+0x1a>
 37e:	1e f4       	brtc	.+6      	; 0x386 <__addsf3+0x1e>
 380:	cb c0       	rjmp	.+406    	; 0x518 <__fp_nan>
 382:	0e f4       	brtc	.+2      	; 0x386 <__addsf3+0x1e>
 384:	e0 95       	com	r30
 386:	e7 fb       	bst	r30, 7
 388:	c1 c0       	rjmp	.+386    	; 0x50c <__fp_inf>

0000038a <__addsf3x>:
 38a:	e9 2f       	mov	r30, r25
 38c:	e7 d0       	rcall	.+462    	; 0x55c <__fp_split3>
 38e:	80 f3       	brcs	.-32     	; 0x370 <__addsf3+0x8>
 390:	ba 17       	cp	r27, r26
 392:	62 07       	cpc	r22, r18
 394:	73 07       	cpc	r23, r19
 396:	84 07       	cpc	r24, r20
 398:	95 07       	cpc	r25, r21
 39a:	18 f0       	brcs	.+6      	; 0x3a2 <__addsf3x+0x18>
 39c:	71 f4       	brne	.+28     	; 0x3ba <__addsf3x+0x30>
 39e:	9e f5       	brtc	.+102    	; 0x406 <__addsf3x+0x7c>
 3a0:	ff c0       	rjmp	.+510    	; 0x5a0 <__fp_zero>
 3a2:	0e f4       	brtc	.+2      	; 0x3a6 <__addsf3x+0x1c>
 3a4:	e0 95       	com	r30
 3a6:	0b 2e       	mov	r0, r27
 3a8:	ba 2f       	mov	r27, r26
 3aa:	a0 2d       	mov	r26, r0
 3ac:	0b 01       	movw	r0, r22
 3ae:	b9 01       	movw	r22, r18
 3b0:	90 01       	movw	r18, r0
 3b2:	0c 01       	movw	r0, r24
 3b4:	ca 01       	movw	r24, r20
 3b6:	a0 01       	movw	r20, r0
 3b8:	11 24       	eor	r1, r1
 3ba:	ff 27       	eor	r31, r31
 3bc:	59 1b       	sub	r21, r25
 3be:	99 f0       	breq	.+38     	; 0x3e6 <__addsf3x+0x5c>
 3c0:	59 3f       	cpi	r21, 0xF9	; 249
 3c2:	50 f4       	brcc	.+20     	; 0x3d8 <__addsf3x+0x4e>
 3c4:	50 3e       	cpi	r21, 0xE0	; 224
 3c6:	68 f1       	brcs	.+90     	; 0x422 <__addsf3x+0x98>
 3c8:	1a 16       	cp	r1, r26
 3ca:	f0 40       	sbci	r31, 0x00	; 0
 3cc:	a2 2f       	mov	r26, r18
 3ce:	23 2f       	mov	r18, r19
 3d0:	34 2f       	mov	r19, r20
 3d2:	44 27       	eor	r20, r20
 3d4:	58 5f       	subi	r21, 0xF8	; 248
 3d6:	f3 cf       	rjmp	.-26     	; 0x3be <__addsf3x+0x34>
 3d8:	46 95       	lsr	r20
 3da:	37 95       	ror	r19
 3dc:	27 95       	ror	r18
 3de:	a7 95       	ror	r26
 3e0:	f0 40       	sbci	r31, 0x00	; 0
 3e2:	53 95       	inc	r21
 3e4:	c9 f7       	brne	.-14     	; 0x3d8 <__addsf3x+0x4e>
 3e6:	7e f4       	brtc	.+30     	; 0x406 <__addsf3x+0x7c>
 3e8:	1f 16       	cp	r1, r31
 3ea:	ba 0b       	sbc	r27, r26
 3ec:	62 0b       	sbc	r22, r18
 3ee:	73 0b       	sbc	r23, r19
 3f0:	84 0b       	sbc	r24, r20
 3f2:	ba f0       	brmi	.+46     	; 0x422 <__addsf3x+0x98>
 3f4:	91 50       	subi	r25, 0x01	; 1
 3f6:	a1 f0       	breq	.+40     	; 0x420 <__addsf3x+0x96>
 3f8:	ff 0f       	add	r31, r31
 3fa:	bb 1f       	adc	r27, r27
 3fc:	66 1f       	adc	r22, r22
 3fe:	77 1f       	adc	r23, r23
 400:	88 1f       	adc	r24, r24
 402:	c2 f7       	brpl	.-16     	; 0x3f4 <__addsf3x+0x6a>
 404:	0e c0       	rjmp	.+28     	; 0x422 <__addsf3x+0x98>
 406:	ba 0f       	add	r27, r26
 408:	62 1f       	adc	r22, r18
 40a:	73 1f       	adc	r23, r19
 40c:	84 1f       	adc	r24, r20
 40e:	48 f4       	brcc	.+18     	; 0x422 <__addsf3x+0x98>
 410:	87 95       	ror	r24
 412:	77 95       	ror	r23
 414:	67 95       	ror	r22
 416:	b7 95       	ror	r27
 418:	f7 95       	ror	r31
 41a:	9e 3f       	cpi	r25, 0xFE	; 254
 41c:	08 f0       	brcs	.+2      	; 0x420 <__addsf3x+0x96>
 41e:	b3 cf       	rjmp	.-154    	; 0x386 <__addsf3+0x1e>
 420:	93 95       	inc	r25
 422:	88 0f       	add	r24, r24
 424:	08 f0       	brcs	.+2      	; 0x428 <__addsf3x+0x9e>
 426:	99 27       	eor	r25, r25
 428:	ee 0f       	add	r30, r30
 42a:	97 95       	ror	r25
 42c:	87 95       	ror	r24
 42e:	08 95       	ret

00000430 <__fixsfsi>:
 430:	04 d0       	rcall	.+8      	; 0x43a <__fixunssfsi>
 432:	68 94       	set
 434:	b1 11       	cpse	r27, r1
 436:	b5 c0       	rjmp	.+362    	; 0x5a2 <__fp_szero>
 438:	08 95       	ret

0000043a <__fixunssfsi>:
 43a:	98 d0       	rcall	.+304    	; 0x56c <__fp_splitA>
 43c:	88 f0       	brcs	.+34     	; 0x460 <__fixunssfsi+0x26>
 43e:	9f 57       	subi	r25, 0x7F	; 127
 440:	90 f0       	brcs	.+36     	; 0x466 <__fixunssfsi+0x2c>
 442:	b9 2f       	mov	r27, r25
 444:	99 27       	eor	r25, r25
 446:	b7 51       	subi	r27, 0x17	; 23
 448:	a0 f0       	brcs	.+40     	; 0x472 <__fixunssfsi+0x38>
 44a:	d1 f0       	breq	.+52     	; 0x480 <__fixunssfsi+0x46>
 44c:	66 0f       	add	r22, r22
 44e:	77 1f       	adc	r23, r23
 450:	88 1f       	adc	r24, r24
 452:	99 1f       	adc	r25, r25
 454:	1a f0       	brmi	.+6      	; 0x45c <__fixunssfsi+0x22>
 456:	ba 95       	dec	r27
 458:	c9 f7       	brne	.-14     	; 0x44c <__fixunssfsi+0x12>
 45a:	12 c0       	rjmp	.+36     	; 0x480 <__fixunssfsi+0x46>
 45c:	b1 30       	cpi	r27, 0x01	; 1
 45e:	81 f0       	breq	.+32     	; 0x480 <__fixunssfsi+0x46>
 460:	9f d0       	rcall	.+318    	; 0x5a0 <__fp_zero>
 462:	b1 e0       	ldi	r27, 0x01	; 1
 464:	08 95       	ret
 466:	9c c0       	rjmp	.+312    	; 0x5a0 <__fp_zero>
 468:	67 2f       	mov	r22, r23
 46a:	78 2f       	mov	r23, r24
 46c:	88 27       	eor	r24, r24
 46e:	b8 5f       	subi	r27, 0xF8	; 248
 470:	39 f0       	breq	.+14     	; 0x480 <__fixunssfsi+0x46>
 472:	b9 3f       	cpi	r27, 0xF9	; 249
 474:	cc f3       	brlt	.-14     	; 0x468 <__fixunssfsi+0x2e>
 476:	86 95       	lsr	r24
 478:	77 95       	ror	r23
 47a:	67 95       	ror	r22
 47c:	b3 95       	inc	r27
 47e:	d9 f7       	brne	.-10     	; 0x476 <__fixunssfsi+0x3c>
 480:	3e f4       	brtc	.+14     	; 0x490 <__fixunssfsi+0x56>
 482:	90 95       	com	r25
 484:	80 95       	com	r24
 486:	70 95       	com	r23
 488:	61 95       	neg	r22
 48a:	7f 4f       	sbci	r23, 0xFF	; 255
 48c:	8f 4f       	sbci	r24, 0xFF	; 255
 48e:	9f 4f       	sbci	r25, 0xFF	; 255
 490:	08 95       	ret

00000492 <__floatunsisf>:
 492:	e8 94       	clt
 494:	09 c0       	rjmp	.+18     	; 0x4a8 <__floatsisf+0x12>

00000496 <__floatsisf>:
 496:	97 fb       	bst	r25, 7
 498:	3e f4       	brtc	.+14     	; 0x4a8 <__floatsisf+0x12>
 49a:	90 95       	com	r25
 49c:	80 95       	com	r24
 49e:	70 95       	com	r23
 4a0:	61 95       	neg	r22
 4a2:	7f 4f       	sbci	r23, 0xFF	; 255
 4a4:	8f 4f       	sbci	r24, 0xFF	; 255
 4a6:	9f 4f       	sbci	r25, 0xFF	; 255
 4a8:	99 23       	and	r25, r25
 4aa:	a9 f0       	breq	.+42     	; 0x4d6 <__floatsisf+0x40>
 4ac:	f9 2f       	mov	r31, r25
 4ae:	96 e9       	ldi	r25, 0x96	; 150
 4b0:	bb 27       	eor	r27, r27
 4b2:	93 95       	inc	r25
 4b4:	f6 95       	lsr	r31
 4b6:	87 95       	ror	r24
 4b8:	77 95       	ror	r23
 4ba:	67 95       	ror	r22
 4bc:	b7 95       	ror	r27
 4be:	f1 11       	cpse	r31, r1
 4c0:	f8 cf       	rjmp	.-16     	; 0x4b2 <__floatsisf+0x1c>
 4c2:	fa f4       	brpl	.+62     	; 0x502 <__floatsisf+0x6c>
 4c4:	bb 0f       	add	r27, r27
 4c6:	11 f4       	brne	.+4      	; 0x4cc <__floatsisf+0x36>
 4c8:	60 ff       	sbrs	r22, 0
 4ca:	1b c0       	rjmp	.+54     	; 0x502 <__floatsisf+0x6c>
 4cc:	6f 5f       	subi	r22, 0xFF	; 255
 4ce:	7f 4f       	sbci	r23, 0xFF	; 255
 4d0:	8f 4f       	sbci	r24, 0xFF	; 255
 4d2:	9f 4f       	sbci	r25, 0xFF	; 255
 4d4:	16 c0       	rjmp	.+44     	; 0x502 <__floatsisf+0x6c>
 4d6:	88 23       	and	r24, r24
 4d8:	11 f0       	breq	.+4      	; 0x4de <__floatsisf+0x48>
 4da:	96 e9       	ldi	r25, 0x96	; 150
 4dc:	11 c0       	rjmp	.+34     	; 0x500 <__floatsisf+0x6a>
 4de:	77 23       	and	r23, r23
 4e0:	21 f0       	breq	.+8      	; 0x4ea <__floatsisf+0x54>
 4e2:	9e e8       	ldi	r25, 0x8E	; 142
 4e4:	87 2f       	mov	r24, r23
 4e6:	76 2f       	mov	r23, r22
 4e8:	05 c0       	rjmp	.+10     	; 0x4f4 <__floatsisf+0x5e>
 4ea:	66 23       	and	r22, r22
 4ec:	71 f0       	breq	.+28     	; 0x50a <__floatsisf+0x74>
 4ee:	96 e8       	ldi	r25, 0x86	; 134
 4f0:	86 2f       	mov	r24, r22
 4f2:	70 e0       	ldi	r23, 0x00	; 0
 4f4:	60 e0       	ldi	r22, 0x00	; 0
 4f6:	2a f0       	brmi	.+10     	; 0x502 <__floatsisf+0x6c>
 4f8:	9a 95       	dec	r25
 4fa:	66 0f       	add	r22, r22
 4fc:	77 1f       	adc	r23, r23
 4fe:	88 1f       	adc	r24, r24
 500:	da f7       	brpl	.-10     	; 0x4f8 <__floatsisf+0x62>
 502:	88 0f       	add	r24, r24
 504:	96 95       	lsr	r25
 506:	87 95       	ror	r24
 508:	97 f9       	bld	r25, 7
 50a:	08 95       	ret

0000050c <__fp_inf>:
 50c:	97 f9       	bld	r25, 7
 50e:	9f 67       	ori	r25, 0x7F	; 127
 510:	80 e8       	ldi	r24, 0x80	; 128
 512:	70 e0       	ldi	r23, 0x00	; 0
 514:	60 e0       	ldi	r22, 0x00	; 0
 516:	08 95       	ret

00000518 <__fp_nan>:
 518:	9f ef       	ldi	r25, 0xFF	; 255
 51a:	80 ec       	ldi	r24, 0xC0	; 192
 51c:	08 95       	ret

0000051e <__fp_pscA>:
 51e:	00 24       	eor	r0, r0
 520:	0a 94       	dec	r0
 522:	16 16       	cp	r1, r22
 524:	17 06       	cpc	r1, r23
 526:	18 06       	cpc	r1, r24
 528:	09 06       	cpc	r0, r25
 52a:	08 95       	ret

0000052c <__fp_pscB>:
 52c:	00 24       	eor	r0, r0
 52e:	0a 94       	dec	r0
 530:	12 16       	cp	r1, r18
 532:	13 06       	cpc	r1, r19
 534:	14 06       	cpc	r1, r20
 536:	05 06       	cpc	r0, r21
 538:	08 95       	ret

0000053a <__fp_round>:
 53a:	09 2e       	mov	r0, r25
 53c:	03 94       	inc	r0
 53e:	00 0c       	add	r0, r0
 540:	11 f4       	brne	.+4      	; 0x546 <__fp_round+0xc>
 542:	88 23       	and	r24, r24
 544:	52 f0       	brmi	.+20     	; 0x55a <__fp_round+0x20>
 546:	bb 0f       	add	r27, r27
 548:	40 f4       	brcc	.+16     	; 0x55a <__fp_round+0x20>
 54a:	bf 2b       	or	r27, r31
 54c:	11 f4       	brne	.+4      	; 0x552 <__fp_round+0x18>
 54e:	60 ff       	sbrs	r22, 0
 550:	04 c0       	rjmp	.+8      	; 0x55a <__fp_round+0x20>
 552:	6f 5f       	subi	r22, 0xFF	; 255
 554:	7f 4f       	sbci	r23, 0xFF	; 255
 556:	8f 4f       	sbci	r24, 0xFF	; 255
 558:	9f 4f       	sbci	r25, 0xFF	; 255
 55a:	08 95       	ret

0000055c <__fp_split3>:
 55c:	57 fd       	sbrc	r21, 7
 55e:	90 58       	subi	r25, 0x80	; 128
 560:	44 0f       	add	r20, r20
 562:	55 1f       	adc	r21, r21
 564:	59 f0       	breq	.+22     	; 0x57c <__fp_splitA+0x10>
 566:	5f 3f       	cpi	r21, 0xFF	; 255
 568:	71 f0       	breq	.+28     	; 0x586 <__fp_splitA+0x1a>
 56a:	47 95       	ror	r20

0000056c <__fp_splitA>:
 56c:	88 0f       	add	r24, r24
 56e:	97 fb       	bst	r25, 7
 570:	99 1f       	adc	r25, r25
 572:	61 f0       	breq	.+24     	; 0x58c <__fp_splitA+0x20>
 574:	9f 3f       	cpi	r25, 0xFF	; 255
 576:	79 f0       	breq	.+30     	; 0x596 <__fp_splitA+0x2a>
 578:	87 95       	ror	r24
 57a:	08 95       	ret
 57c:	12 16       	cp	r1, r18
 57e:	13 06       	cpc	r1, r19
 580:	14 06       	cpc	r1, r20
 582:	55 1f       	adc	r21, r21
 584:	f2 cf       	rjmp	.-28     	; 0x56a <__fp_split3+0xe>
 586:	46 95       	lsr	r20
 588:	f1 df       	rcall	.-30     	; 0x56c <__fp_splitA>
 58a:	08 c0       	rjmp	.+16     	; 0x59c <__fp_splitA+0x30>
 58c:	16 16       	cp	r1, r22
 58e:	17 06       	cpc	r1, r23
 590:	18 06       	cpc	r1, r24
 592:	99 1f       	adc	r25, r25
 594:	f1 cf       	rjmp	.-30     	; 0x578 <__fp_splitA+0xc>
 596:	86 95       	lsr	r24
 598:	71 05       	cpc	r23, r1
 59a:	61 05       	cpc	r22, r1
 59c:	08 94       	sec
 59e:	08 95       	ret

000005a0 <__fp_zero>:
 5a0:	e8 94       	clt

000005a2 <__fp_szero>:
 5a2:	bb 27       	eor	r27, r27
 5a4:	66 27       	eor	r22, r22
 5a6:	77 27       	eor	r23, r23
 5a8:	cb 01       	movw	r24, r22
 5aa:	97 f9       	bld	r25, 7
 5ac:	08 95       	ret

000005ae <__mulsf3>:
 5ae:	0b d0       	rcall	.+22     	; 0x5c6 <__mulsf3x>
 5b0:	c4 cf       	rjmp	.-120    	; 0x53a <__fp_round>
 5b2:	b5 df       	rcall	.-150    	; 0x51e <__fp_pscA>
 5b4:	28 f0       	brcs	.+10     	; 0x5c0 <__mulsf3+0x12>
 5b6:	ba df       	rcall	.-140    	; 0x52c <__fp_pscB>
 5b8:	18 f0       	brcs	.+6      	; 0x5c0 <__mulsf3+0x12>
 5ba:	95 23       	and	r25, r21
 5bc:	09 f0       	breq	.+2      	; 0x5c0 <__mulsf3+0x12>
 5be:	a6 cf       	rjmp	.-180    	; 0x50c <__fp_inf>
 5c0:	ab cf       	rjmp	.-170    	; 0x518 <__fp_nan>
 5c2:	11 24       	eor	r1, r1
 5c4:	ee cf       	rjmp	.-36     	; 0x5a2 <__fp_szero>

000005c6 <__mulsf3x>:
 5c6:	ca df       	rcall	.-108    	; 0x55c <__fp_split3>
 5c8:	a0 f3       	brcs	.-24     	; 0x5b2 <__mulsf3+0x4>

000005ca <__mulsf3_pse>:
 5ca:	95 9f       	mul	r25, r21
 5cc:	d1 f3       	breq	.-12     	; 0x5c2 <__mulsf3+0x14>
 5ce:	95 0f       	add	r25, r21
 5d0:	50 e0       	ldi	r21, 0x00	; 0
 5d2:	55 1f       	adc	r21, r21
 5d4:	62 9f       	mul	r22, r18
 5d6:	f0 01       	movw	r30, r0
 5d8:	72 9f       	mul	r23, r18
 5da:	bb 27       	eor	r27, r27
 5dc:	f0 0d       	add	r31, r0
 5de:	b1 1d       	adc	r27, r1
 5e0:	63 9f       	mul	r22, r19
 5e2:	aa 27       	eor	r26, r26
 5e4:	f0 0d       	add	r31, r0
 5e6:	b1 1d       	adc	r27, r1
 5e8:	aa 1f       	adc	r26, r26
 5ea:	64 9f       	mul	r22, r20
 5ec:	66 27       	eor	r22, r22
 5ee:	b0 0d       	add	r27, r0
 5f0:	a1 1d       	adc	r26, r1
 5f2:	66 1f       	adc	r22, r22
 5f4:	82 9f       	mul	r24, r18
 5f6:	22 27       	eor	r18, r18
 5f8:	b0 0d       	add	r27, r0
 5fa:	a1 1d       	adc	r26, r1
 5fc:	62 1f       	adc	r22, r18
 5fe:	73 9f       	mul	r23, r19
 600:	b0 0d       	add	r27, r0
 602:	a1 1d       	adc	r26, r1
 604:	62 1f       	adc	r22, r18
 606:	83 9f       	mul	r24, r19
 608:	a0 0d       	add	r26, r0
 60a:	61 1d       	adc	r22, r1
 60c:	22 1f       	adc	r18, r18
 60e:	74 9f       	mul	r23, r20
 610:	33 27       	eor	r19, r19
 612:	a0 0d       	add	r26, r0
 614:	61 1d       	adc	r22, r1
 616:	23 1f       	adc	r18, r19
 618:	84 9f       	mul	r24, r20
 61a:	60 0d       	add	r22, r0
 61c:	21 1d       	adc	r18, r1
 61e:	82 2f       	mov	r24, r18
 620:	76 2f       	mov	r23, r22
 622:	6a 2f       	mov	r22, r26
 624:	11 24       	eor	r1, r1
 626:	9f 57       	subi	r25, 0x7F	; 127
 628:	50 40       	sbci	r21, 0x00	; 0
 62a:	8a f0       	brmi	.+34     	; 0x64e <__mulsf3_pse+0x84>
 62c:	e1 f0       	breq	.+56     	; 0x666 <__mulsf3_pse+0x9c>
 62e:	88 23       	and	r24, r24
 630:	4a f0       	brmi	.+18     	; 0x644 <__mulsf3_pse+0x7a>
 632:	ee 0f       	add	r30, r30
 634:	ff 1f       	adc	r31, r31
 636:	bb 1f       	adc	r27, r27
 638:	66 1f       	adc	r22, r22
 63a:	77 1f       	adc	r23, r23
 63c:	88 1f       	adc	r24, r24
 63e:	91 50       	subi	r25, 0x01	; 1
 640:	50 40       	sbci	r21, 0x00	; 0
 642:	a9 f7       	brne	.-22     	; 0x62e <__mulsf3_pse+0x64>
 644:	9e 3f       	cpi	r25, 0xFE	; 254
 646:	51 05       	cpc	r21, r1
 648:	70 f0       	brcs	.+28     	; 0x666 <__mulsf3_pse+0x9c>
 64a:	60 cf       	rjmp	.-320    	; 0x50c <__fp_inf>
 64c:	aa cf       	rjmp	.-172    	; 0x5a2 <__fp_szero>
 64e:	5f 3f       	cpi	r21, 0xFF	; 255
 650:	ec f3       	brlt	.-6      	; 0x64c <__mulsf3_pse+0x82>
 652:	98 3e       	cpi	r25, 0xE8	; 232
 654:	dc f3       	brlt	.-10     	; 0x64c <__mulsf3_pse+0x82>
 656:	86 95       	lsr	r24
 658:	77 95       	ror	r23
 65a:	67 95       	ror	r22
 65c:	b7 95       	ror	r27
 65e:	f7 95       	ror	r31
 660:	e7 95       	ror	r30
 662:	9f 5f       	subi	r25, 0xFF	; 255
 664:	c1 f7       	brne	.-16     	; 0x656 <__mulsf3_pse+0x8c>
 666:	fe 2b       	or	r31, r30
 668:	88 0f       	add	r24, r24
 66a:	91 1d       	adc	r25, r1
 66c:	96 95       	lsr	r25
 66e:	87 95       	ror	r24
 670:	97 f9       	bld	r25, 7
 672:	08 95       	ret

00000674 <__itoa_ncheck>:
 674:	bb 27       	eor	r27, r27
 676:	4a 30       	cpi	r20, 0x0A	; 10
 678:	31 f4       	brne	.+12     	; 0x686 <__itoa_ncheck+0x12>
 67a:	99 23       	and	r25, r25
 67c:	22 f4       	brpl	.+8      	; 0x686 <__itoa_ncheck+0x12>
 67e:	bd e2       	ldi	r27, 0x2D	; 45
 680:	90 95       	com	r25
 682:	81 95       	neg	r24
 684:	9f 4f       	sbci	r25, 0xFF	; 255
 686:	01 c0       	rjmp	.+2      	; 0x68a <__utoa_common>

00000688 <__utoa_ncheck>:
 688:	bb 27       	eor	r27, r27

0000068a <__utoa_common>:
 68a:	fb 01       	movw	r30, r22
 68c:	55 27       	eor	r21, r21
 68e:	aa 27       	eor	r26, r26
 690:	88 0f       	add	r24, r24
 692:	99 1f       	adc	r25, r25
 694:	aa 1f       	adc	r26, r26
 696:	a4 17       	cp	r26, r20
 698:	10 f0       	brcs	.+4      	; 0x69e <__utoa_common+0x14>
 69a:	a4 1b       	sub	r26, r20
 69c:	83 95       	inc	r24
 69e:	50 51       	subi	r21, 0x10	; 16
 6a0:	b9 f7       	brne	.-18     	; 0x690 <__utoa_common+0x6>
 6a2:	a0 5d       	subi	r26, 0xD0	; 208
 6a4:	aa 33       	cpi	r26, 0x3A	; 58
 6a6:	08 f0       	brcs	.+2      	; 0x6aa <__utoa_common+0x20>
 6a8:	a9 5d       	subi	r26, 0xD9	; 217
 6aa:	a1 93       	st	Z+, r26
 6ac:	00 97       	sbiw	r24, 0x00	; 0
 6ae:	79 f7       	brne	.-34     	; 0x68e <__utoa_common+0x4>
 6b0:	b1 11       	cpse	r27, r1
 6b2:	b1 93       	st	Z+, r27
 6b4:	11 92       	st	Z+, r1
 6b6:	cb 01       	movw	r24, r22
 6b8:	00 c0       	rjmp	.+0      	; 0x6ba <strrev>

000006ba <strrev>:
 6ba:	dc 01       	movw	r26, r24
 6bc:	fc 01       	movw	r30, r24
 6be:	67 2f       	mov	r22, r23
 6c0:	71 91       	ld	r23, Z+
 6c2:	77 23       	and	r23, r23
 6c4:	e1 f7       	brne	.-8      	; 0x6be <strrev+0x4>
 6c6:	32 97       	sbiw	r30, 0x02	; 2
 6c8:	04 c0       	rjmp	.+8      	; 0x6d2 <strrev+0x18>
 6ca:	7c 91       	ld	r23, X
 6cc:	6d 93       	st	X+, r22
 6ce:	70 83       	st	Z, r23
 6d0:	62 91       	ld	r22, -Z
 6d2:	ae 17       	cp	r26, r30
 6d4:	bf 07       	cpc	r27, r31
 6d6:	c8 f3       	brcs	.-14     	; 0x6ca <strrev+0x10>
 6d8:	08 95       	ret

000006da <_exit>:
 6da:	f8 94       	cli

000006dc <__stop_program>:
 6dc:	ff cf       	rjmp	.-2      	; 0x6dc <__stop_program>
