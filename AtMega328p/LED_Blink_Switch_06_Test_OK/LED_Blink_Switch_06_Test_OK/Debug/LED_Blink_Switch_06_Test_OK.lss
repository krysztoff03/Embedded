
LED_Blink_Switch_06_Test_OK.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000116  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000028  00000000  00000000  00000146  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000b1  00000000  00000000  0000016e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000074  00000000  00000000  0000021f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000dc  00000000  00000000  00000293  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000034  00000000  00000000  00000370  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000175  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000018  00000000  00000000  00000519  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 4a 00 	call	0x94	; 0x94 <main>
  78:	0c 94 5f 00 	jmp	0xbe	; 0xbe <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <timer1_init>:
#include <avr/io.h>

void timer1_init()
{
	//Set up timer with Prescaler = 256
	TCCR1B |= (1 << CS12);
  80:	e1 e8       	ldi	r30, 0x81	; 129
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	80 81       	ld	r24, Z
  86:	84 60       	ori	r24, 0x04	; 4
  88:	80 83       	st	Z, r24
	//Initialize counter
	TCNT1 = 0;
  8a:	10 92 85 00 	sts	0x0085, r1
  8e:	10 92 84 00 	sts	0x0084, r1
  92:	08 95       	ret

00000094 <main>:
}

int main(void)
{
	//Pin D4 set as output
	DDRD |= (1 << PORTD4);
  94:	54 9a       	sbi	0x0a, 4	; 10
	//Initialize Timer1
	timer1_init();
  96:	0e 94 40 00 	call	0x80	; 0x80 <timer1_init>
    {
        //When the switch is active, turn on the LED which blinks with 0.6 seconds delay
		if(!(PINC & (1 << PORTC0)))
		{
			//Value based on the formula Target Timer Count = (Input Frequency / (Prescaler * Target Frequency)) - 1
			if(TCNT1 >= 37649)
  9a:	e4 e8       	ldi	r30, 0x84	; 132
  9c:	f0 e0       	ldi	r31, 0x00	; 0
			{
				//Toggle the LED
				PORTD ^= (1 << PORTD4);
  9e:	20 e1       	ldi	r18, 0x10	; 16
	timer1_init();
	
    while(1)
    {
        //When the switch is active, turn on the LED which blinks with 0.6 seconds delay
		if(!(PINC & (1 << PORTC0)))
  a0:	30 99       	sbic	0x06, 0	; 6
  a2:	0b c0       	rjmp	.+22     	; 0xba <main+0x26>
		{
			//Value based on the formula Target Timer Count = (Input Frequency / (Prescaler * Target Frequency)) - 1
			if(TCNT1 >= 37649)
  a4:	80 81       	ld	r24, Z
  a6:	91 81       	ldd	r25, Z+1	; 0x01
  a8:	81 31       	cpi	r24, 0x11	; 17
  aa:	93 49       	sbci	r25, 0x93	; 147
  ac:	c8 f3       	brcs	.-14     	; 0xa0 <main+0xc>
			{
				//Toggle the LED
				PORTD ^= (1 << PORTD4);
  ae:	8b b1       	in	r24, 0x0b	; 11
  b0:	82 27       	eor	r24, r18
  b2:	8b b9       	out	0x0b, r24	; 11
				//Reset timer value
				TCNT1 = 0;
  b4:	11 82       	std	Z+1, r1	; 0x01
  b6:	10 82       	st	Z, r1
  b8:	f3 cf       	rjmp	.-26     	; 0xa0 <main+0xc>
			}
		}
		else
		{
			//Turn off the LED
			PORTD &= ~(1 << PORTD4);
  ba:	5c 98       	cbi	0x0b, 4	; 11
  bc:	f1 cf       	rjmp	.-30     	; 0xa0 <main+0xc>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>
