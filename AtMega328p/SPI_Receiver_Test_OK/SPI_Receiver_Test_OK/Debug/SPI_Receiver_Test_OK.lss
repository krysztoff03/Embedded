
SPI_Receiver_Test_OK.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800200  000002f0  00000364  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002f0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000380  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000b0  00000000  00000000  000003b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000008db  00000000  00000000  00000460  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000418  00000000  00000000  00000d3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000054e  00000000  00000000  00001153  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000160  00000000  00000000  000016a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000002a2  00000000  00000000  00001804  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000004b0  00000000  00000000  00001aa6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000a8  00000000  00000000  00001f56  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	86 c0       	rjmp	.+268    	; 0x112 <__bad_interrupt>
   6:	00 00       	nop
   8:	84 c0       	rjmp	.+264    	; 0x112 <__bad_interrupt>
   a:	00 00       	nop
   c:	82 c0       	rjmp	.+260    	; 0x112 <__bad_interrupt>
   e:	00 00       	nop
  10:	80 c0       	rjmp	.+256    	; 0x112 <__bad_interrupt>
  12:	00 00       	nop
  14:	7e c0       	rjmp	.+252    	; 0x112 <__bad_interrupt>
  16:	00 00       	nop
  18:	7c c0       	rjmp	.+248    	; 0x112 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7a c0       	rjmp	.+244    	; 0x112 <__bad_interrupt>
  1e:	00 00       	nop
  20:	78 c0       	rjmp	.+240    	; 0x112 <__bad_interrupt>
  22:	00 00       	nop
  24:	76 c0       	rjmp	.+236    	; 0x112 <__bad_interrupt>
  26:	00 00       	nop
  28:	74 c0       	rjmp	.+232    	; 0x112 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	72 c0       	rjmp	.+228    	; 0x112 <__bad_interrupt>
  2e:	00 00       	nop
  30:	70 c0       	rjmp	.+224    	; 0x112 <__bad_interrupt>
  32:	00 00       	nop
  34:	6e c0       	rjmp	.+220    	; 0x112 <__bad_interrupt>
  36:	00 00       	nop
  38:	6c c0       	rjmp	.+216    	; 0x112 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6a c0       	rjmp	.+212    	; 0x112 <__bad_interrupt>
  3e:	00 00       	nop
  40:	68 c0       	rjmp	.+208    	; 0x112 <__bad_interrupt>
  42:	00 00       	nop
  44:	66 c0       	rjmp	.+204    	; 0x112 <__bad_interrupt>
  46:	00 00       	nop
  48:	64 c0       	rjmp	.+200    	; 0x112 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	62 c0       	rjmp	.+196    	; 0x112 <__bad_interrupt>
  4e:	00 00       	nop
  50:	60 c0       	rjmp	.+192    	; 0x112 <__bad_interrupt>
  52:	00 00       	nop
  54:	5e c0       	rjmp	.+188    	; 0x112 <__bad_interrupt>
  56:	00 00       	nop
  58:	5c c0       	rjmp	.+184    	; 0x112 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5a c0       	rjmp	.+180    	; 0x112 <__bad_interrupt>
  5e:	00 00       	nop
  60:	58 c0       	rjmp	.+176    	; 0x112 <__bad_interrupt>
  62:	00 00       	nop
  64:	56 c0       	rjmp	.+172    	; 0x112 <__bad_interrupt>
  66:	00 00       	nop
  68:	54 c0       	rjmp	.+168    	; 0x112 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	52 c0       	rjmp	.+164    	; 0x112 <__bad_interrupt>
  6e:	00 00       	nop
  70:	50 c0       	rjmp	.+160    	; 0x112 <__bad_interrupt>
  72:	00 00       	nop
  74:	4e c0       	rjmp	.+156    	; 0x112 <__bad_interrupt>
  76:	00 00       	nop
  78:	4c c0       	rjmp	.+152    	; 0x112 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4a c0       	rjmp	.+148    	; 0x112 <__bad_interrupt>
  7e:	00 00       	nop
  80:	48 c0       	rjmp	.+144    	; 0x112 <__bad_interrupt>
  82:	00 00       	nop
  84:	46 c0       	rjmp	.+140    	; 0x112 <__bad_interrupt>
  86:	00 00       	nop
  88:	44 c0       	rjmp	.+136    	; 0x112 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	42 c0       	rjmp	.+132    	; 0x112 <__bad_interrupt>
  8e:	00 00       	nop
  90:	40 c0       	rjmp	.+128    	; 0x112 <__bad_interrupt>
  92:	00 00       	nop
  94:	3e c0       	rjmp	.+124    	; 0x112 <__bad_interrupt>
  96:	00 00       	nop
  98:	3c c0       	rjmp	.+120    	; 0x112 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	3a c0       	rjmp	.+116    	; 0x112 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	38 c0       	rjmp	.+112    	; 0x112 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	36 c0       	rjmp	.+108    	; 0x112 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	34 c0       	rjmp	.+104    	; 0x112 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	32 c0       	rjmp	.+100    	; 0x112 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	30 c0       	rjmp	.+96     	; 0x112 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	2e c0       	rjmp	.+92     	; 0x112 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	2c c0       	rjmp	.+88     	; 0x112 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	2a c0       	rjmp	.+84     	; 0x112 <__bad_interrupt>
  be:	00 00       	nop
  c0:	28 c0       	rjmp	.+80     	; 0x112 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	26 c0       	rjmp	.+76     	; 0x112 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	24 c0       	rjmp	.+72     	; 0x112 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	22 c0       	rjmp	.+68     	; 0x112 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	20 c0       	rjmp	.+64     	; 0x112 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	1e c0       	rjmp	.+60     	; 0x112 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	1c c0       	rjmp	.+56     	; 0x112 <__bad_interrupt>
  da:	00 00       	nop
  dc:	1a c0       	rjmp	.+52     	; 0x112 <__bad_interrupt>
  de:	00 00       	nop
  e0:	18 c0       	rjmp	.+48     	; 0x112 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e0 ef       	ldi	r30, 0xF0	; 240
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ac 31       	cpi	r26, 0x1C	; 28
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	96 d0       	rcall	.+300    	; 0x23c <main>
 110:	ed c0       	rjmp	.+474    	; 0x2ec <_exit>

00000112 <__bad_interrupt>:
 112:	76 cf       	rjmp	.-276    	; 0x0 <__vectors>

00000114 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
 114:	12 9a       	sbi	0x02, 2	; 2
 116:	00 c0       	rjmp	.+0      	; 0x118 <toggle_e+0x4>
 118:	12 98       	cbi	0x02, 2	; 2
 11a:	08 95       	ret

0000011c <lcd_write>:
 11c:	cf 93       	push	r28
 11e:	c8 2f       	mov	r28, r24
 120:	66 23       	and	r22, r22
 122:	11 f0       	breq	.+4      	; 0x128 <lcd_write+0xc>
 124:	10 9a       	sbi	0x02, 0	; 2
 126:	01 c0       	rjmp	.+2      	; 0x12a <lcd_write+0xe>
 128:	10 98       	cbi	0x02, 0	; 2
 12a:	0b 9a       	sbi	0x01, 3	; 1
 12c:	0c 9a       	sbi	0x01, 4	; 1
 12e:	0d 9a       	sbi	0x01, 5	; 1
 130:	0e 9a       	sbi	0x01, 6	; 1
 132:	16 98       	cbi	0x02, 6	; 2
 134:	15 98       	cbi	0x02, 5	; 2
 136:	14 98       	cbi	0x02, 4	; 2
 138:	13 98       	cbi	0x02, 3	; 2
 13a:	cc 23       	and	r28, r28
 13c:	0c f4       	brge	.+2      	; 0x140 <lcd_write+0x24>
 13e:	16 9a       	sbi	0x02, 6	; 2
 140:	c6 fd       	sbrc	r28, 6
 142:	15 9a       	sbi	0x02, 5	; 2
 144:	c5 fd       	sbrc	r28, 5
 146:	14 9a       	sbi	0x02, 4	; 2
 148:	c4 fd       	sbrc	r28, 4
 14a:	13 9a       	sbi	0x02, 3	; 2
 14c:	e3 df       	rcall	.-58     	; 0x114 <toggle_e>
 14e:	16 98       	cbi	0x02, 6	; 2
 150:	15 98       	cbi	0x02, 5	; 2
 152:	14 98       	cbi	0x02, 4	; 2
 154:	13 98       	cbi	0x02, 3	; 2
 156:	c3 fd       	sbrc	r28, 3
 158:	16 9a       	sbi	0x02, 6	; 2
 15a:	c2 fd       	sbrc	r28, 2
 15c:	15 9a       	sbi	0x02, 5	; 2
 15e:	c1 fd       	sbrc	r28, 1
 160:	14 9a       	sbi	0x02, 4	; 2
 162:	c0 fd       	sbrc	r28, 0
 164:	13 9a       	sbi	0x02, 3	; 2
 166:	d6 df       	rcall	.-84     	; 0x114 <toggle_e>
 168:	13 9a       	sbi	0x02, 3	; 2
 16a:	14 9a       	sbi	0x02, 4	; 2
 16c:	15 9a       	sbi	0x02, 5	; 2
 16e:	16 9a       	sbi	0x02, 6	; 2
 170:	cf 91       	pop	r28
 172:	08 95       	ret

00000174 <lcd_command>:
 174:	e0 ea       	ldi	r30, 0xA0	; 160
 176:	ff e0       	ldi	r31, 0x0F	; 15
 178:	31 97       	sbiw	r30, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <lcd_command+0x4>
 17c:	60 e0       	ldi	r22, 0x00	; 0
 17e:	ce cf       	rjmp	.-100    	; 0x11c <lcd_write>
 180:	08 95       	ret

00000182 <lcd_gotoxy>:
 182:	61 11       	cpse	r22, r1
 184:	03 c0       	rjmp	.+6      	; 0x18c <lcd_gotoxy+0xa>
 186:	80 58       	subi	r24, 0x80	; 128
 188:	f5 cf       	rjmp	.-22     	; 0x174 <lcd_command>
 18a:	08 95       	ret
 18c:	80 54       	subi	r24, 0x40	; 64
 18e:	f2 cf       	rjmp	.-28     	; 0x174 <lcd_command>
 190:	08 95       	ret

00000192 <lcd_clrscr>:
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	ef cf       	rjmp	.-34     	; 0x174 <lcd_command>
 196:	08 95       	ret

00000198 <lcd_putc>:
 198:	e0 ea       	ldi	r30, 0xA0	; 160
 19a:	ff e0       	ldi	r31, 0x0F	; 15
 19c:	31 97       	sbiw	r30, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <lcd_putc+0x4>
 1a0:	8a 30       	cpi	r24, 0x0A	; 10
 1a2:	19 f4       	brne	.+6      	; 0x1aa <lcd_putc+0x12>
 1a4:	80 ec       	ldi	r24, 0xC0	; 192
 1a6:	e6 cf       	rjmp	.-52     	; 0x174 <lcd_command>
 1a8:	08 95       	ret
 1aa:	61 e0       	ldi	r22, 0x01	; 1
 1ac:	b7 cf       	rjmp	.-146    	; 0x11c <lcd_write>
 1ae:	08 95       	ret

000001b0 <lcd_puts>:
 1b0:	cf 93       	push	r28
 1b2:	df 93       	push	r29
 1b4:	ec 01       	movw	r28, r24
 1b6:	21 96       	adiw	r28, 0x01	; 1
 1b8:	fc 01       	movw	r30, r24
 1ba:	80 81       	ld	r24, Z
 1bc:	88 23       	and	r24, r24
 1be:	21 f0       	breq	.+8      	; 0x1c8 <lcd_puts+0x18>
 1c0:	eb df       	rcall	.-42     	; 0x198 <lcd_putc>
 1c2:	89 91       	ld	r24, Y+
 1c4:	81 11       	cpse	r24, r1
 1c6:	fc cf       	rjmp	.-8      	; 0x1c0 <lcd_puts+0x10>
 1c8:	df 91       	pop	r29
 1ca:	cf 91       	pop	r28
 1cc:	08 95       	ret

000001ce <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 1ce:	cf 93       	push	r28
 1d0:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 1d2:	08 9a       	sbi	0x01, 0	; 1
#if LCD_READ_REQUIRED
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
#endif
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 1d4:	0a 9a       	sbi	0x01, 2	; 1
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 1d6:	0b 9a       	sbi	0x01, 3	; 1
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 1d8:	0c 9a       	sbi	0x01, 4	; 1
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 1da:	0d 9a       	sbi	0x01, 5	; 1
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 1dc:	0e 9a       	sbi	0x01, 6	; 1
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1de:	e0 e0       	ldi	r30, 0x00	; 0
 1e0:	fa ef       	ldi	r31, 0xFA	; 250
 1e2:	31 97       	sbiw	r30, 0x01	; 1
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <lcd_init+0x14>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 1e6:	14 9a       	sbi	0x02, 4	; 2
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 1e8:	13 9a       	sbi	0x02, 3	; 2
    lcd_e_toggle();
 1ea:	94 df       	rcall	.-216    	; 0x114 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1ec:	e0 e0       	ldi	r30, 0x00	; 0
 1ee:	fe e4       	ldi	r31, 0x4E	; 78
 1f0:	31 97       	sbiw	r30, 0x01	; 1
 1f2:	f1 f7       	brne	.-4      	; 0x1f0 <lcd_init+0x22>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 1f4:	8f df       	rcall	.-226    	; 0x114 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1f6:	e0 e0       	ldi	r30, 0x00	; 0
 1f8:	f1 e0       	ldi	r31, 0x01	; 1
 1fa:	31 97       	sbiw	r30, 0x01	; 1
 1fc:	f1 f7       	brne	.-4      	; 0x1fa <lcd_init+0x2c>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 1fe:	8a df       	rcall	.-236    	; 0x114 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 200:	e0 e0       	ldi	r30, 0x00	; 0
 202:	f1 e0       	ldi	r31, 0x01	; 1
 204:	31 97       	sbiw	r30, 0x01	; 1
 206:	f1 f7       	brne	.-4      	; 0x204 <lcd_init+0x36>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 208:	13 98       	cbi	0x02, 3	; 2
    lcd_e_toggle();
 20a:	84 df       	rcall	.-248    	; 0x114 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 20c:	e0 e0       	ldi	r30, 0x00	; 0
 20e:	f1 e0       	ldi	r31, 0x01	; 1
 210:	31 97       	sbiw	r30, 0x01	; 1
 212:	f1 f7       	brne	.-4      	; 0x210 <lcd_init+0x42>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 214:	88 e2       	ldi	r24, 0x28	; 40
 216:	ae df       	rcall	.-164    	; 0x174 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 218:	88 e0       	ldi	r24, 0x08	; 8
 21a:	ac df       	rcall	.-168    	; 0x174 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 21c:	ba df       	rcall	.-140    	; 0x192 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 21e:	86 e0       	ldi	r24, 0x06	; 6
 220:	a9 df       	rcall	.-174    	; 0x174 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 222:	8c 2f       	mov	r24, r28
 224:	a7 df       	rcall	.-178    	; 0x174 <lcd_command>

 226:	cf 91       	pop	r28
 228:	08 95       	ret

0000022a <SPI_init>:
	SPDR = data;
	//wait till transmission is complete
	while(!(SPSR & (1 << SPIF)));
	//return received data
	return (SPDR);
}
 22a:	23 9a       	sbi	0x04, 3	; 4
 22c:	80 e4       	ldi	r24, 0x40	; 64
 22e:	8c bd       	out	0x2c, r24	; 44
 230:	08 95       	ret

00000232 <SPI_receive>:

char SPI_receive()
{
	//wait till reception is complete
	while(!(SPSR & (1 << SPIF)));
 232:	0d b4       	in	r0, 0x2d	; 45
 234:	07 fe       	sbrs	r0, 7
 236:	fd cf       	rjmp	.-6      	; 0x232 <SPI_receive>
	//return received data
	return SPDR;
 238:	8e b5       	in	r24, 0x2e	; 46
}
 23a:	08 95       	ret

0000023c <main>:

int main(void)
{
 23c:	cf 93       	push	r28
 23e:	df 93       	push	r29
 240:	00 d0       	rcall	.+0      	; 0x242 <main+0x6>
 242:	1f 92       	push	r1
 244:	1f 92       	push	r1
 246:	cd b7       	in	r28, 0x3d	; 61
 248:	de b7       	in	r29, 0x3e	; 62
	//SPI initialization
	SPI_init();
 24a:	ef df       	rcall	.-34     	; 0x22a <SPI_init>
	////counter sent through SPI
	uint8_t count;
	//array of chars used to convert the counter with itoa function
	char buffer[5];
	//LCD initialization
	lcd_init(LCD_DISP_ON);
 24c:	8c e0       	ldi	r24, 0x0C	; 12
 24e:	bf df       	rcall	.-130    	; 0x1ce <lcd_init>
	lcd_clrscr();
 250:	a0 df       	rcall	.-192    	; 0x192 <lcd_clrscr>
	lcd_gotoxy(0, 0);
 252:	60 e0       	ldi	r22, 0x00	; 0
 254:	80 e0       	ldi	r24, 0x00	; 0
 256:	95 df       	rcall	.-214    	; 0x182 <lcd_gotoxy>
	lcd_puts("Slave Device");
 258:	80 e0       	ldi	r24, 0x00	; 0
 25a:	92 e0       	ldi	r25, 0x02	; 2
 25c:	a9 df       	rcall	.-174    	; 0x1b0 <lcd_puts>
	lcd_gotoxy(0, 1);
 25e:	61 e0       	ldi	r22, 0x01	; 1
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	8f df       	rcall	.-226    	; 0x182 <lcd_gotoxy>
	lcd_puts("ReceivedData:");
 264:	8d e0       	ldi	r24, 0x0D	; 13
 266:	92 e0       	ldi	r25, 0x02	; 2
 268:	a3 df       	rcall	.-186    	; 0x1b0 <lcd_puts>
	
	while(1)
	{
		lcd_gotoxy(13, 1);
 26a:	61 e0       	ldi	r22, 0x01	; 1
 26c:	8d e0       	ldi	r24, 0x0D	; 13
 26e:	89 df       	rcall	.-238    	; 0x182 <lcd_gotoxy>
		count = SPI_receive();
 270:	e0 df       	rcall	.-64     	; 0x232 <SPI_receive>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 272:	4a e0       	ldi	r20, 0x0A	; 10
 274:	be 01       	movw	r22, r28
 276:	6f 5f       	subi	r22, 0xFF	; 255
 278:	7f 4f       	sbci	r23, 0xFF	; 255
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	04 d0       	rcall	.+8      	; 0x286 <__itoa_ncheck>
		itoa(count, buffer, 10);
		lcd_puts(buffer);
 27e:	ce 01       	movw	r24, r28
 280:	01 96       	adiw	r24, 0x01	; 1
 282:	96 df       	rcall	.-212    	; 0x1b0 <lcd_puts>
 284:	f2 cf       	rjmp	.-28     	; 0x26a <main+0x2e>

00000286 <__itoa_ncheck>:
 286:	bb 27       	eor	r27, r27
 288:	4a 30       	cpi	r20, 0x0A	; 10
 28a:	31 f4       	brne	.+12     	; 0x298 <__itoa_ncheck+0x12>
 28c:	99 23       	and	r25, r25
 28e:	22 f4       	brpl	.+8      	; 0x298 <__itoa_ncheck+0x12>
 290:	bd e2       	ldi	r27, 0x2D	; 45
 292:	90 95       	com	r25
 294:	81 95       	neg	r24
 296:	9f 4f       	sbci	r25, 0xFF	; 255
 298:	01 c0       	rjmp	.+2      	; 0x29c <__utoa_common>

0000029a <__utoa_ncheck>:
 29a:	bb 27       	eor	r27, r27

0000029c <__utoa_common>:
 29c:	fb 01       	movw	r30, r22
 29e:	55 27       	eor	r21, r21
 2a0:	aa 27       	eor	r26, r26
 2a2:	88 0f       	add	r24, r24
 2a4:	99 1f       	adc	r25, r25
 2a6:	aa 1f       	adc	r26, r26
 2a8:	a4 17       	cp	r26, r20
 2aa:	10 f0       	brcs	.+4      	; 0x2b0 <__utoa_common+0x14>
 2ac:	a4 1b       	sub	r26, r20
 2ae:	83 95       	inc	r24
 2b0:	50 51       	subi	r21, 0x10	; 16
 2b2:	b9 f7       	brne	.-18     	; 0x2a2 <__utoa_common+0x6>
 2b4:	a0 5d       	subi	r26, 0xD0	; 208
 2b6:	aa 33       	cpi	r26, 0x3A	; 58
 2b8:	08 f0       	brcs	.+2      	; 0x2bc <__utoa_common+0x20>
 2ba:	a9 5d       	subi	r26, 0xD9	; 217
 2bc:	a1 93       	st	Z+, r26
 2be:	00 97       	sbiw	r24, 0x00	; 0
 2c0:	79 f7       	brne	.-34     	; 0x2a0 <__utoa_common+0x4>
 2c2:	b1 11       	cpse	r27, r1
 2c4:	b1 93       	st	Z+, r27
 2c6:	11 92       	st	Z+, r1
 2c8:	cb 01       	movw	r24, r22
 2ca:	00 c0       	rjmp	.+0      	; 0x2cc <strrev>

000002cc <strrev>:
 2cc:	dc 01       	movw	r26, r24
 2ce:	fc 01       	movw	r30, r24
 2d0:	67 2f       	mov	r22, r23
 2d2:	71 91       	ld	r23, Z+
 2d4:	77 23       	and	r23, r23
 2d6:	e1 f7       	brne	.-8      	; 0x2d0 <strrev+0x4>
 2d8:	32 97       	sbiw	r30, 0x02	; 2
 2da:	04 c0       	rjmp	.+8      	; 0x2e4 <strrev+0x18>
 2dc:	7c 91       	ld	r23, X
 2de:	6d 93       	st	X+, r22
 2e0:	70 83       	st	Z, r23
 2e2:	62 91       	ld	r22, -Z
 2e4:	ae 17       	cp	r26, r30
 2e6:	bf 07       	cpc	r27, r31
 2e8:	c8 f3       	brcs	.-14     	; 0x2dc <strrev+0x10>
 2ea:	08 95       	ret

000002ec <_exit>:
 2ec:	f8 94       	cli

000002ee <__stop_program>:
 2ee:	ff cf       	rjmp	.-2      	; 0x2ee <__stop_program>
