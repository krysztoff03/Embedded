
CAN_Bus_Master_FINAL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000013a  00800200  00000b7c  00000c10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b7c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  0080033a  0080033a  00000d4a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d4a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000138  00000000  00000000  00000d7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001803  00000000  00000000  00000eb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000072c  00000000  00000000  000026b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ea8  00000000  00000000  00002de1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000030c  00000000  00000000  00003c8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004be  00000000  00000000  00003f98  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a70  00000000  00000000  00004456  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000120  00000000  00000000  00004ec6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	63 c0       	rjmp	.+198    	; 0x124 <__vector_23>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	68 c0       	rjmp	.+208    	; 0x146 <__vector_29>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	13 e0       	ldi	r17, 0x03	; 3
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ec e7       	ldi	r30, 0x7C	; 124
  fc:	fb e0       	ldi	r31, 0x0B	; 11
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	aa 33       	cpi	r26, 0x3A	; 58
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	23 e0       	ldi	r18, 0x03	; 3
 110:	aa e3       	ldi	r26, 0x3A	; 58
 112:	b3 e0       	ldi	r27, 0x03	; 3
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ad 33       	cpi	r26, 0x3D	; 61
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	12 d1       	rcall	.+548    	; 0x344 <main>
 120:	2b c5       	rjmp	.+2646   	; 0xb78 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <__vector_23>:

/* Variable that holds the 10-bit result of ADC */
static volatile uint16_t adcResult;

ISR(TIMER0_OVF_vect)
{
 124:	1f 92       	push	r1
 126:	0f 92       	push	r0
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	0f 92       	push	r0
 12c:	11 24       	eor	r1, r1
 12e:	8f 93       	push	r24
	/* Keep the number of overflows */
	totalOverflows++;
 130:	80 91 3c 03 	lds	r24, 0x033C
 134:	8f 5f       	subi	r24, 0xFF	; 255
 136:	80 93 3c 03 	sts	0x033C, r24
}
 13a:	8f 91       	pop	r24
 13c:	0f 90       	pop	r0
 13e:	0f be       	out	0x3f, r0	; 63
 140:	0f 90       	pop	r0
 142:	1f 90       	pop	r1
 144:	18 95       	reti

00000146 <__vector_29>:

ISR(ADC_vect)
{
 146:	1f 92       	push	r1
 148:	0f 92       	push	r0
 14a:	0f b6       	in	r0, 0x3f	; 63
 14c:	0f 92       	push	r0
 14e:	11 24       	eor	r1, r1
 150:	0b b6       	in	r0, 0x3b	; 59
 152:	0f 92       	push	r0
 154:	2f 93       	push	r18
 156:	8f 93       	push	r24
 158:	9f 93       	push	r25
 15a:	ef 93       	push	r30
 15c:	ff 93       	push	r31
	/* Variable that holds the first 8 bits of the 10 bits ADC resolution */
	uint8_t adclReg = ADCL;
 15e:	80 91 78 00 	lds	r24, 0x0078
	/* ADCL starts with the first 8 bits of final 10 bits, then ADCH 2 remaining bits 
	   will be left shifted 8 positions to the left */
	adcResult = (ADCH << 8) | adclReg;
 162:	20 91 79 00 	lds	r18, 0x0079
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	92 2b       	or	r25, r18
 16a:	90 93 3b 03 	sts	0x033B, r25
 16e:	80 93 3a 03 	sts	0x033A, r24
	/* Start single conversion */
	ADCSRA |= (1 << ADSC);
 172:	ea e7       	ldi	r30, 0x7A	; 122
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	80 81       	ld	r24, Z
 178:	80 64       	ori	r24, 0x40	; 64
 17a:	80 83       	st	Z, r24
}
 17c:	ff 91       	pop	r31
 17e:	ef 91       	pop	r30
 180:	9f 91       	pop	r25
 182:	8f 91       	pop	r24
 184:	2f 91       	pop	r18
 186:	0f 90       	pop	r0
 188:	0b be       	out	0x3b, r0	; 59
 18a:	0f 90       	pop	r0
 18c:	0f be       	out	0x3f, r0	; 63
 18e:	0f 90       	pop	r0
 190:	1f 90       	pop	r1
 192:	18 95       	reti

00000194 <spi_init>:


void spi_init()
{
	//Set MOSI, SCK and SS as output
	DDRB |= (1 << PB2) | (1 << PB1) | (1 << PB0);
 194:	84 b1       	in	r24, 0x04	; 4
 196:	87 60       	ori	r24, 0x07	; 7
 198:	84 b9       	out	0x04, r24	; 4
 19a:	08 95       	ret

0000019c <mcp2515_init_and_test>:
}

void mcp2515_init_and_test()
{
 19c:	cf 93       	push	r28
 19e:	df 93       	push	r29
 1a0:	cd b7       	in	r28, 0x3d	; 61
 1a2:	de b7       	in	r29, 0x3e	; 62
 1a4:	2b 97       	sbiw	r28, 0x0b	; 11
 1a6:	0f b6       	in	r0, 0x3f	; 63
 1a8:	f8 94       	cli
 1aa:	de bf       	out	0x3e, r29	; 62
 1ac:	0f be       	out	0x3f, r0	; 63
 1ae:	cd bf       	out	0x3d, r28	; 61
	if(!mcp2515_init())
 1b0:	ae d2       	rcall	.+1372   	; 0x70e <mcp2515_init>
 1b2:	81 11       	cpse	r24, r1
 1b4:	0e c0       	rjmp	.+28     	; 0x1d2 <mcp2515_init_and_test+0x36>
	{
		//LCD clear screen
		lcd_clrscr();
 1b6:	21 d2       	rcall	.+1090   	; 0x5fa <lcd_clrscr>
		//Set cursor on line 1
		lcd_gotoxy(0, 0);
 1b8:	60 e0       	ldi	r22, 0x00	; 0
 1ba:	80 e0       	ldi	r24, 0x00	; 0
 1bc:	16 d2       	rcall	.+1068   	; 0x5ea <lcd_gotoxy>
		lcd_puts("Error: CAN Bus");
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	92 e0       	ldi	r25, 0x02	; 2
 1c2:	2d d2       	rcall	.+1114   	; 0x61e <lcd_puts>
		//Set cursor on line 2
		lcd_gotoxy(0, 1);
 1c4:	61 e0       	ldi	r22, 0x01	; 1
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	10 d2       	rcall	.+1056   	; 0x5ea <lcd_gotoxy>
		lcd_puts("not initialized!");
 1ca:	8f e0       	ldi	r24, 0x0F	; 15
 1cc:	92 e0       	ldi	r25, 0x02	; 2
 1ce:	27 d2       	rcall	.+1102   	; 0x61e <lcd_puts>
 1d0:	0e c0       	rjmp	.+28     	; 0x1ee <mcp2515_init_and_test+0x52>
	}
	else
	{
		//LCD clear screen
		lcd_clrscr();
 1d2:	13 d2       	rcall	.+1062   	; 0x5fa <lcd_clrscr>
		lcd_home();
 1d4:	15 d2       	rcall	.+1066   	; 0x600 <lcd_home>
		//Set cursor on line 1
		lcd_gotoxy(5, 0);
 1d6:	60 e0       	ldi	r22, 0x00	; 0
 1d8:	85 e0       	ldi	r24, 0x05	; 5
 1da:	07 d2       	rcall	.+1038   	; 0x5ea <lcd_gotoxy>
		lcd_puts("CAN Bus");
 1dc:	87 e0       	ldi	r24, 0x07	; 7
 1de:	92 e0       	ldi	r25, 0x02	; 2
 1e0:	1e d2       	rcall	.+1084   	; 0x61e <lcd_puts>
		//Set cursor on line 2
		lcd_gotoxy(2, 1);
 1e2:	61 e0       	ldi	r22, 0x01	; 1
 1e4:	82 e0       	ldi	r24, 0x02	; 2
 1e6:	01 d2       	rcall	.+1026   	; 0x5ea <lcd_gotoxy>
		lcd_puts("initialized!");
 1e8:	83 e1       	ldi	r24, 0x13	; 19
 1ea:	92 e0       	ldi	r25, 0x02	; 2
 1ec:	18 d2       	rcall	.+1072   	; 0x61e <lcd_puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ee:	2f ef       	ldi	r18, 0xFF	; 255
 1f0:	87 ea       	ldi	r24, 0xA7	; 167
 1f2:	91 e6       	ldi	r25, 0x61	; 97
 1f4:	21 50       	subi	r18, 0x01	; 1
 1f6:	80 40       	sbci	r24, 0x00	; 0
 1f8:	90 40       	sbci	r25, 0x00	; 0
 1fa:	e1 f7       	brne	.-8      	; 0x1f4 <mcp2515_init_and_test+0x58>
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <mcp2515_init_and_test+0x62>
 1fe:	00 00       	nop
	
	_delay_ms(2000);
	
	//Test message used only to test the MCP2515 module
	tCAN testMessage;
	testMessage.id = 123;
 200:	8b e7       	ldi	r24, 0x7B	; 123
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	9a 83       	std	Y+2, r25	; 0x02
 206:	89 83       	std	Y+1, r24	; 0x01
	testMessage.header.rtr = 0;
 208:	8b 81       	ldd	r24, Y+3	; 0x03
	testMessage.header.length = 2;
 20a:	80 7e       	andi	r24, 0xE0	; 224
 20c:	84 60       	ori	r24, 0x04	; 4
 20e:	8b 83       	std	Y+3, r24	; 0x03
	testMessage.data[0] = 0xFF;
 210:	8f ef       	ldi	r24, 0xFF	; 255
 212:	8c 83       	std	Y+4, r24	; 0x04
	testMessage.data[1] = 0xFF;
 214:	8d 83       	std	Y+5, r24	; 0x05
	
	//Switch to Loopback Mode to test the MCP2515 module
	mcp2515_bit_modify(CANCTRL, (1 << REQOP2) | (1 << REQOP1) | (1 << REQOP0), (1 << REQOP1));
 216:	40 e4       	ldi	r20, 0x40	; 64
 218:	60 ee       	ldi	r22, 0xE0	; 224
 21a:	8f e0       	ldi	r24, 0x0F	; 15
 21c:	5e d2       	rcall	.+1212   	; 0x6da <mcp2515_bit_modify>
	
	//Send test message
	if(mcp2515_send_message(&testMessage))
 21e:	ce 01       	movw	r24, r28
 220:	01 96       	adiw	r24, 0x01	; 1
 222:	b5 d2       	rcall	.+1386   	; 0x78e <mcp2515_send_message>
 224:	88 23       	and	r24, r24
 226:	71 f0       	breq	.+28     	; 0x244 <mcp2515_init_and_test+0xa8>
	{
		//LCD clear screen
		lcd_clrscr();
 228:	e8 d1       	rcall	.+976    	; 0x5fa <lcd_clrscr>
		//Set cursor on line 1
		lcd_gotoxy(0, 0);
 22a:	60 e0       	ldi	r22, 0x00	; 0
 22c:	80 e0       	ldi	r24, 0x00	; 0
 22e:	dd d1       	rcall	.+954    	; 0x5ea <lcd_gotoxy>
		lcd_puts("Message writenn");
 230:	80 e2       	ldi	r24, 0x20	; 32
 232:	92 e0       	ldi	r25, 0x02	; 2
 234:	f4 d1       	rcall	.+1000   	; 0x61e <lcd_puts>
		//Set cursor on line 2
		lcd_gotoxy(4, 1);
 236:	61 e0       	ldi	r22, 0x01	; 1
 238:	84 e0       	ldi	r24, 0x04	; 4
 23a:	d7 d1       	rcall	.+942    	; 0x5ea <lcd_gotoxy>
		lcd_puts("to buffer!");
 23c:	80 e3       	ldi	r24, 0x30	; 48
 23e:	92 e0       	ldi	r25, 0x02	; 2
 240:	ee d1       	rcall	.+988    	; 0x61e <lcd_puts>
 242:	0d c0       	rjmp	.+26     	; 0x25e <mcp2515_init_and_test+0xc2>
	}
	else
	{
		//LCD clear screen
		lcd_clrscr();
 244:	da d1       	rcall	.+948    	; 0x5fa <lcd_clrscr>
		//Set cursor on line 1
		lcd_gotoxy(0, 0);
 246:	60 e0       	ldi	r22, 0x00	; 0
 248:	80 e0       	ldi	r24, 0x00	; 0
 24a:	cf d1       	rcall	.+926    	; 0x5ea <lcd_gotoxy>
		lcd_puts("Message not");
 24c:	8b e3       	ldi	r24, 0x3B	; 59
 24e:	92 e0       	ldi	r25, 0x02	; 2
 250:	e6 d1       	rcall	.+972    	; 0x61e <lcd_puts>
		//Set cursor on line 2
		lcd_gotoxy(0, 1);
 252:	61 e0       	ldi	r22, 0x01	; 1
 254:	80 e0       	ldi	r24, 0x00	; 0
 256:	c9 d1       	rcall	.+914    	; 0x5ea <lcd_gotoxy>
		lcd_puts("writenn to buffer");
 258:	87 e4       	ldi	r24, 0x47	; 71
 25a:	92 e0       	ldi	r25, 0x02	; 2
 25c:	e0 d1       	rcall	.+960    	; 0x61e <lcd_puts>
 25e:	2f ef       	ldi	r18, 0xFF	; 255
 260:	83 ed       	ldi	r24, 0xD3	; 211
 262:	90 e3       	ldi	r25, 0x30	; 48
 264:	21 50       	subi	r18, 0x01	; 1
 266:	80 40       	sbci	r24, 0x00	; 0
 268:	90 40       	sbci	r25, 0x00	; 0
 26a:	e1 f7       	brne	.-8      	; 0x264 <mcp2515_init_and_test+0xc8>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <mcp2515_init_and_test+0xd2>
 26e:	00 00       	nop
	}
	_delay_ms(1000);
	if(mcp2515_check_message())
 270:	8a d2       	rcall	.+1300   	; 0x786 <mcp2515_check_message>
 272:	88 23       	and	r24, r24
 274:	f1 f0       	breq	.+60     	; 0x2b2 <mcp2515_init_and_test+0x116>
	{
		//LCD clear screen
		lcd_clrscr();
 276:	c1 d1       	rcall	.+898    	; 0x5fa <lcd_clrscr>
		//Set cursor on line 1
		lcd_gotoxy(0, 0);
 278:	60 e0       	ldi	r22, 0x00	; 0
 27a:	80 e0       	ldi	r24, 0x00	; 0
 27c:	b6 d1       	rcall	.+876    	; 0x5ea <lcd_gotoxy>
		lcd_puts("Message received");
 27e:	89 e5       	ldi	r24, 0x59	; 89
 280:	92 e0       	ldi	r25, 0x02	; 2
 282:	cd d1       	rcall	.+922    	; 0x61e <lcd_puts>
 284:	2f ef       	ldi	r18, 0xFF	; 255
 286:	83 ed       	ldi	r24, 0xD3	; 211
 288:	90 e3       	ldi	r25, 0x30	; 48
 28a:	21 50       	subi	r18, 0x01	; 1
 28c:	80 40       	sbci	r24, 0x00	; 0
 28e:	90 40       	sbci	r25, 0x00	; 0
 290:	e1 f7       	brne	.-8      	; 0x28a <mcp2515_init_and_test+0xee>
 292:	00 c0       	rjmp	.+0      	; 0x294 <mcp2515_init_and_test+0xf8>
 294:	00 00       	nop
		_delay_ms(1000);
		//LCD clear screen
		lcd_clrscr();
 296:	b1 d1       	rcall	.+866    	; 0x5fa <lcd_clrscr>
		//Set cursor on line 1
		lcd_gotoxy(0, 0);
 298:	60 e0       	ldi	r22, 0x00	; 0
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	a6 d1       	rcall	.+844    	; 0x5ea <lcd_gotoxy>
		lcd_puts("CAN Bus tested");
 29e:	8a e6       	ldi	r24, 0x6A	; 106
 2a0:	92 e0       	ldi	r25, 0x02	; 2
 2a2:	bd d1       	rcall	.+890    	; 0x61e <lcd_puts>
		//Set cursor on line 2
		lcd_gotoxy(0, 1);
 2a4:	61 e0       	ldi	r22, 0x01	; 1
 2a6:	80 e0       	ldi	r24, 0x00	; 0
 2a8:	a0 d1       	rcall	.+832    	; 0x5ea <lcd_gotoxy>
		lcd_puts("successfully!");
 2aa:	89 e7       	ldi	r24, 0x79	; 121
 2ac:	92 e0       	ldi	r25, 0x02	; 2
 2ae:	b7 d1       	rcall	.+878    	; 0x61e <lcd_puts>
 2b0:	0d c0       	rjmp	.+26     	; 0x2cc <mcp2515_init_and_test+0x130>
	}
	else
	{
		//LCD clear screen
		lcd_clrscr();
 2b2:	a3 d1       	rcall	.+838    	; 0x5fa <lcd_clrscr>
		//Set cursor on line 1
		lcd_gotoxy(0, 0);
 2b4:	60 e0       	ldi	r22, 0x00	; 0
 2b6:	80 e0       	ldi	r24, 0x00	; 0
 2b8:	98 d1       	rcall	.+816    	; 0x5ea <lcd_gotoxy>
		lcd_puts("Message not");
 2ba:	8b e3       	ldi	r24, 0x3B	; 59
 2bc:	92 e0       	ldi	r25, 0x02	; 2
 2be:	af d1       	rcall	.+862    	; 0x61e <lcd_puts>
		//Set cursor on line 2
		lcd_gotoxy(4, 0);
 2c0:	60 e0       	ldi	r22, 0x00	; 0
 2c2:	84 e0       	ldi	r24, 0x04	; 4
 2c4:	92 d1       	rcall	.+804    	; 0x5ea <lcd_gotoxy>
		lcd_puts("received!");
 2c6:	87 e8       	ldi	r24, 0x87	; 135
 2c8:	92 e0       	ldi	r25, 0x02	; 2
 2ca:	a9 d1       	rcall	.+850    	; 0x61e <lcd_puts>
	}
}
 2cc:	2b 96       	adiw	r28, 0x0b	; 11
 2ce:	0f b6       	in	r0, 0x3f	; 63
 2d0:	f8 94       	cli
 2d2:	de bf       	out	0x3e, r29	; 62
 2d4:	0f be       	out	0x3f, r0	; 63
 2d6:	cd bf       	out	0x3d, r28	; 61
 2d8:	df 91       	pop	r29
 2da:	cf 91       	pop	r28
 2dc:	08 95       	ret

000002de <mcp2515_normal_mode>:

void mcp2515_normal_mode()
{
	//Switch to Normal Mode
	mcp2515_bit_modify(CANCTRL, (1 << REQOP2) | (1 << REQOP1) | (1 << REQOP0), 0);
 2de:	40 e0       	ldi	r20, 0x00	; 0
 2e0:	60 ee       	ldi	r22, 0xE0	; 224
 2e2:	8f e0       	ldi	r24, 0x0F	; 15
 2e4:	fa c1       	rjmp	.+1012   	; 0x6da <mcp2515_bit_modify>
 2e6:	08 95       	ret

000002e8 <timer0_init>:
}

void timer0_init()
{
	/* Set up Timer0 with Prescaler = 1024 */
	TCCR0B |= (1 << CS02) | (1 << CS00);
 2e8:	85 b5       	in	r24, 0x25	; 37
 2ea:	85 60       	ori	r24, 0x05	; 5
 2ec:	85 bd       	out	0x25, r24	; 37
	/* Initialize counter */
	TCNT0 = 0;
 2ee:	16 bc       	out	0x26, r1	; 38
	/* Enable overflow interrupt */
	TIMSK0 |= (1 << TOIE0);
 2f0:	ee e6       	ldi	r30, 0x6E	; 110
 2f2:	f0 e0       	ldi	r31, 0x00	; 0
 2f4:	80 81       	ld	r24, Z
 2f6:	81 60       	ori	r24, 0x01	; 1
 2f8:	80 83       	st	Z, r24
	/* Initialize overflows counter */
	totalOverflows = 0;
 2fa:	10 92 3c 03 	sts	0x033C, r1
 2fe:	08 95       	ret

00000300 <adc_init>:
//}

void adc_init()
{
	/* Clear OC1A on Compare Match */
	TCCR1A |= (1 << COM1A1) | (1 << WGM11);
 300:	e0 e8       	ldi	r30, 0x80	; 128
 302:	f0 e0       	ldi	r31, 0x00	; 0
 304:	80 81       	ld	r24, Z
 306:	82 68       	ori	r24, 0x82	; 130
 308:	80 83       	st	Z, r24
	/* Fast PWM mode 14 with prescaler of 64 */
	TCCR1B |= (1 << WGM13) | (1 << WGM12) | (1 << CS11) | (1 << CS10);
 30a:	e1 e8       	ldi	r30, 0x81	; 129
 30c:	f0 e0       	ldi	r31, 0x00	; 0
 30e:	80 81       	ld	r24, Z
 310:	8b 61       	ori	r24, 0x1B	; 27
 312:	80 83       	st	Z, r24
	/* TOP value calculated with Fpwm = Fcpu / (N * (1 + TOP)), N - Prescaler = 64; */
	ICR1 = 4999;
 314:	87 e8       	ldi	r24, 0x87	; 135
 316:	93 e1       	ldi	r25, 0x13	; 19
 318:	90 93 87 00 	sts	0x0087, r25
 31c:	80 93 86 00 	sts	0x0086, r24
	///* Set Pin B1 (9) as output (OC1A) */
	//DDRB |= (1 << PINB1); 
	OCR1A = 250;
 320:	8a ef       	ldi	r24, 0xFA	; 250
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	90 93 89 00 	sts	0x0089, r25
 328:	80 93 88 00 	sts	0x0088, r24
	
	/* AREF = AVcc, Potentiometer connected on channel 0 (Pin A0) */
	ADMUX = (1 << REFS0);
 32c:	80 e4       	ldi	r24, 0x40	; 64
 32e:	80 93 7c 00 	sts	0x007C, r24
	
	/* Enable ADC with a prescaler = 128 (16000000 / 128 = 125000 KHz) */
	ADCSRA |= (1 << ADEN) | (1 << ADIE) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
 332:	ea e7       	ldi	r30, 0x7A	; 122
 334:	f0 e0       	ldi	r31, 0x00	; 0
 336:	80 81       	ld	r24, Z
 338:	8f 68       	ori	r24, 0x8F	; 143
 33a:	80 83       	st	Z, r24
	/* Start single conversion */
	ADCSRA |= (1 << ADSC);
 33c:	80 81       	ld	r24, Z
 33e:	80 64       	ori	r24, 0x40	; 64
 340:	80 83       	st	Z, r24
 342:	08 95       	ret

00000344 <main>:
		rightSignalFlag = 0;
	}
}*/

int main(void)
{
 344:	cf 93       	push	r28
 346:	df 93       	push	r29
 348:	cd b7       	in	r28, 0x3d	; 61
 34a:	de b7       	in	r29, 0x3e	; 62
 34c:	a1 97       	sbiw	r28, 0x21	; 33
 34e:	0f b6       	in	r0, 0x3f	; 63
 350:	f8 94       	cli
 352:	de bf       	out	0x3e, r29	; 62
 354:	0f be       	out	0x3f, r0	; 63
 356:	cd bf       	out	0x3d, r28	; 61
	/* Messages sent through CAN bus (canTX_Signal = left, right and hazard signals,
	   canTX_Brake = brake signal, canTX_Headlight = headlights and servomotors signals */
	tCAN canTX_Signal;
	canTX_Signal.id = 0x1A1;
 358:	81 ea       	ldi	r24, 0xA1	; 161
 35a:	91 e0       	ldi	r25, 0x01	; 1
 35c:	9a 83       	std	Y+2, r25	; 0x02
 35e:	89 83       	std	Y+1, r24	; 0x01
	canTX_Signal.header.rtr = 0;
 360:	8b 81       	ldd	r24, Y+3	; 0x03
	canTX_Signal.header.length = 2;
 362:	80 7e       	andi	r24, 0xE0	; 224
 364:	84 60       	ori	r24, 0x04	; 4
 366:	8b 83       	std	Y+3, r24	; 0x03
	canTX_Signal.data[0] = 0x00;
 368:	1c 82       	std	Y+4, r1	; 0x04
	canTX_Signal.data[1] = 0x00;
 36a:	1d 82       	std	Y+5, r1	; 0x05
	
	tCAN canTX_Brake;
	canTX_Brake.id = 0xC9;
 36c:	89 ec       	ldi	r24, 0xC9	; 201
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	9d 87       	std	Y+13, r25	; 0x0d
 372:	8c 87       	std	Y+12, r24	; 0x0c
	canTX_Brake.header.rtr = 0;
 374:	8e 85       	ldd	r24, Y+14	; 0x0e
	canTX_Brake.header.length = 2;
 376:	80 7e       	andi	r24, 0xE0	; 224
 378:	84 60       	ori	r24, 0x04	; 4
 37a:	8e 87       	std	Y+14, r24	; 0x0e
	canTX_Brake.data[0] = 0x00;
 37c:	1f 86       	std	Y+15, r1	; 0x0f
	canTX_Brake.data[1] = 0x00;
 37e:	18 8a       	std	Y+16, r1	; 0x10
	
	tCAN canTX_Headlight;
	canTX_Headlight.id = 0x321;
 380:	81 e2       	ldi	r24, 0x21	; 33
 382:	93 e0       	ldi	r25, 0x03	; 3
 384:	98 8f       	std	Y+24, r25	; 0x18
 386:	8f 8b       	std	Y+23, r24	; 0x17
	canTX_Headlight.header.rtr = 0;
 388:	89 8d       	ldd	r24, Y+25	; 0x19
	canTX_Headlight.header.length = 2;
 38a:	80 7e       	andi	r24, 0xE0	; 224
 38c:	84 60       	ori	r24, 0x04	; 4
 38e:	89 8f       	std	Y+25, r24	; 0x19
	canTX_Headlight.data[0] = 0x00;
 390:	1a 8e       	std	Y+26, r1	; 0x1a
	canTX_Headlight.data[1] = 0x00;
 392:	1b 8e       	std	Y+27, r1	; 0x1b
	
	//Enable global interrupts
	sei();
 394:	78 94       	sei
	//LCD initialization with display ON, cursor OFF
	lcd_init(LCD_DISP_ON);
 396:	8c e0       	ldi	r24, 0x0C	; 12
 398:	51 d1       	rcall	.+674    	; 0x63c <lcd_init>
	//SPI initialization
	spi_init();
 39a:	fc de       	rcall	.-520    	; 0x194 <spi_init>
	/* MCP2515 initialization and test */
	mcp2515_init_and_test();
 39c:	ff de       	rcall	.-514    	; 0x19c <mcp2515_init_and_test>
	/* Set MCP2515 to Normal Mode of operation */
	mcp2515_normal_mode();
 39e:	9f df       	rcall	.-194    	; 0x2de <mcp2515_normal_mode>
	/* Timer0 initialization */
	timer0_init();
 3a0:	a3 df       	rcall	.-186    	; 0x2e8 <timer0_init>
	/* Timer1 initialization */
	//timer1_init();
	/* ADC initialization*/
	adc_init();
 3a2:	ae df       	rcall	.-164    	; 0x300 <adc_init>
	
	/* Dummy Pin used for toggling */
	DDRE |= LED;
 3a4:	6c 9a       	sbi	0x0d, 4	; 13
	
	/* PB6 as input - left signal */
	DDRB &= ~LEFT_SIGNAL;
 3a6:	26 98       	cbi	0x04, 6	; 4
	//PCICR = (1 << PCIE0);
	///* Enable PCINT6 (Pin B6) */
	//PCMSK0 = (1 << PCINT6);
	
	/* PB7 as input - right signal */
	DDRB &= ~RIGHT_SIGNAL;
 3a8:	27 98       	cbi	0x04, 7	; 4
	//PCICR = (1 << PCIE0);
	///* Enable PCINT7 (Pin B7) */
	//PCMSK0 = (1 << PCINT7);
	
	/* PB5 as input - hazard signal */
	DDRH &= ~HAZARD_SIGNAL;
 3aa:	e1 e0       	ldi	r30, 0x01	; 1
 3ac:	f1 e0       	ldi	r31, 0x01	; 1
 3ae:	80 81       	ld	r24, Z
 3b0:	8f 7b       	andi	r24, 0xBF	; 191
 3b2:	80 83       	st	Z, r24
	
	/* PB4 as input - brake signal */
	DDRB &= ~BRAKE_LIGHT;
 3b4:	24 98       	cbi	0x04, 4	; 4
	
	/* PE4 as output - led brake light */
	//DDRE |= (1 << PE4);
	
	/* PH4 as input - headlights and servomotors signal */
	DDRH &= ~HEAD_LIGHT;
 3b6:	80 81       	ld	r24, Z
 3b8:	8f 7e       	andi	r24, 0xEF	; 239
 3ba:	80 83       	st	Z, r24
	
	DDRB |= (1 << PB5);
 3bc:	25 9a       	sbi	0x04, 5	; 4
	float ocrResult = (ocrMax - ocrMin) * 1023;
	
	uint16_t ocr1Value;
	
	/* Clear the LCD before entering the infinite loop */
	lcd_clrscr();
 3be:	1d d1       	rcall	.+570    	; 0x5fa <lcd_clrscr>
    while(1)
    {
		if(PINH & HEAD_LIGHT)
 3c0:	00 e0       	ldi	r16, 0x00	; 0
 3c2:	11 e0       	ldi	r17, 0x01	; 1
		}
		
		else if(PINB & BRAKE_LIGHT)
		{
			PORTE |= LED;
			canTX_Brake.data[0] = 0xFF;
 3c4:	dd 24       	eor	r13, r13
 3c6:	da 94       	dec	r13
			if(totalOverflows >= 36)
			{
				/* Check if the timer0 counts 195 ticks */
				if(TCNT0 >= 195)
				{
					PORTE ^= LED;
 3c8:	68 94       	set
 3ca:	cc 24       	eor	r12, r12
 3cc:	c4 f8       	bld	r12, 4
						lcd_home();
						lcd_puts("Hazard Signal On!");
					}
					else
					{
						canTX_Signal.data[0] = 0x06;
 3ce:	0f 2e       	mov	r0, r31
 3d0:	f6 e0       	ldi	r31, 0x06	; 6
 3d2:	9f 2e       	mov	r9, r31
 3d4:	f0 2d       	mov	r31, r0
					PORTE ^= LED;
					/*  */
					if(!(PINE & LED))
					{
						canTX_Signal.data[0] = 0x06;
						canTX_Signal.data[1] = 0x01;
 3d6:	aa 24       	eor	r10, r10
 3d8:	a3 94       	inc	r10
						lcd_home();
						lcd_puts("Right Signal On!");
					}
					else
					{
						canTX_Signal.data[0] = 0x02;
 3da:	68 94       	set
 3dc:	88 24       	eor	r8, r8
 3de:	81 f8       	bld	r8, 1
						lcd_home();
						lcd_puts("Left Signal On! ");
					}
					else
					{
						canTX_Signal.data[0] = 0x04;
 3e0:	68 94       	set
 3e2:	bb 24       	eor	r11, r11
 3e4:	b2 f8       	bld	r11, 2
	lcd_clrscr();
    while(1)
    {
		if(PINH & HEAD_LIGHT)
		{
			OCR1A = (int)((ocrResult * adcResult) + 250);
 3e6:	0f 2e       	mov	r0, r31
 3e8:	f8 e8       	ldi	r31, 0x88	; 136
 3ea:	ef 2e       	mov	r14, r31
 3ec:	f1 2c       	mov	r15, r1
 3ee:	f0 2d       	mov	r31, r0
	
	/* Clear the LCD before entering the infinite loop */
	lcd_clrscr();
    while(1)
    {
		if(PINH & HEAD_LIGHT)
 3f0:	f8 01       	movw	r30, r16
 3f2:	80 81       	ld	r24, Z
 3f4:	84 ff       	sbrs	r24, 4
 3f6:	35 c0       	rjmp	.+106    	; 0x462 <main+0x11e>
		{
			OCR1A = (int)((ocrResult * adcResult) + 250);
 3f8:	60 91 3a 03 	lds	r22, 0x033A
 3fc:	70 91 3b 03 	lds	r23, 0x033B
 400:	80 e0       	ldi	r24, 0x00	; 0
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	c8 d2       	rcall	.+1424   	; 0x996 <__floatunsisf>
 406:	20 e0       	ldi	r18, 0x00	; 0
 408:	3e ec       	ldi	r19, 0xCE	; 206
 40a:	47 ec       	ldi	r20, 0xC7	; 199
 40c:	58 e4       	ldi	r21, 0x48	; 72
 40e:	51 d3       	rcall	.+1698   	; 0xab2 <__mulsf3>
 410:	20 e0       	ldi	r18, 0x00	; 0
 412:	30 e0       	ldi	r19, 0x00	; 0
 414:	4a e7       	ldi	r20, 0x7A	; 122
 416:	53 e4       	ldi	r21, 0x43	; 67
 418:	29 d2       	rcall	.+1106   	; 0x86c <__addsf3>
 41a:	8c d2       	rcall	.+1304   	; 0x934 <__fixsfsi>
 41c:	f7 01       	movw	r30, r14
 41e:	71 83       	std	Z+1, r23	; 0x01
 420:	60 83       	st	Z, r22
			PORTE |= LED;
 422:	74 9a       	sbi	0x0e, 4	; 14
			lcd_home();
 424:	ed d0       	rcall	.+474    	; 0x600 <lcd_home>
			lcd_puts("Headlight On!");
 426:	81 e9       	ldi	r24, 0x91	; 145
 428:	92 e0       	ldi	r25, 0x02	; 2
 42a:	f9 d0       	rcall	.+498    	; 0x61e <lcd_puts>
			
			canTX_Headlight.data[0] = 0xFF;
 42c:	da 8e       	std	Y+26, r13	; 0x1a
			canTX_Headlight.data[1] = adcResult / 4;
 42e:	80 91 3a 03 	lds	r24, 0x033A
 432:	90 91 3b 03 	lds	r25, 0x033B
 436:	96 95       	lsr	r25
 438:	87 95       	ror	r24
 43a:	96 95       	lsr	r25
 43c:	87 95       	ror	r24
 43e:	8b 8f       	std	Y+27, r24	; 0x1b
			mcp2515_send_message(&canTX_Headlight);
 440:	ce 01       	movw	r24, r28
 442:	47 96       	adiw	r24, 0x17	; 23
 444:	a4 d1       	rcall	.+840    	; 0x78e <mcp2515_send_message>
			ocr1Value = OCR1A;
 446:	f7 01       	movw	r30, r14
 448:	80 81       	ld	r24, Z
 44a:	91 81       	ldd	r25, Z+1	; 0x01
			if(ocr1Value <= 450)
 44c:	83 3c       	cpi	r24, 0xC3	; 195
 44e:	91 40       	sbci	r25, 0x01	; 1
 450:	20 f4       	brcc	.+8      	; 0x45a <main+0x116>
			{
				//lcd_home();
				lcd_puts("   Turn Left!   ");
 452:	8f e9       	ldi	r24, 0x9F	; 159
 454:	92 e0       	ldi	r25, 0x02	; 2
 456:	e3 d0       	rcall	.+454    	; 0x61e <lcd_puts>
 458:	cb cf       	rjmp	.-106    	; 0x3f0 <main+0xac>
			}
			else
			{
				//lcd_home();
				lcd_puts("   Turn Right!  ");
 45a:	80 eb       	ldi	r24, 0xB0	; 176
 45c:	92 e0       	ldi	r25, 0x02	; 2
 45e:	df d0       	rcall	.+446    	; 0x61e <lcd_puts>
 460:	c7 cf       	rjmp	.-114    	; 0x3f0 <main+0xac>
			}
		}
		
		/* Check if the left signal switch is on */
		else if(PINB & LEFT_SIGNAL)
 462:	1e 9b       	sbis	0x03, 6	; 3
 464:	25 c0       	rjmp	.+74     	; 0x4b0 <main+0x16c>
		{
			/* Check if the number of overflows is equal with 36 */
			if(totalOverflows >= 36)
 466:	80 91 3c 03 	lds	r24, 0x033C
 46a:	84 32       	cpi	r24, 0x24	; 36
 46c:	08 f4       	brcc	.+2      	; 0x470 <main+0x12c>
 46e:	c0 cf       	rjmp	.-128    	; 0x3f0 <main+0xac>
			{
				/* Check if the timer0 counts 195 ticks */
				if(TCNT0 >= 195)
 470:	86 b5       	in	r24, 0x26	; 38
 472:	83 3c       	cpi	r24, 0xC3	; 195
 474:	08 f4       	brcc	.+2      	; 0x478 <main+0x134>
 476:	bc cf       	rjmp	.-136    	; 0x3f0 <main+0xac>
				{
					PORTE ^= LED;
 478:	8e b1       	in	r24, 0x0e	; 14
 47a:	8c 25       	eor	r24, r12
 47c:	8e b9       	out	0x0e, r24	; 14
					/*  */
					if(!(PINE & LED))
 47e:	64 99       	sbic	0x0c, 4	; 12
 480:	0a c0       	rjmp	.+20     	; 0x496 <main+0x152>
					{
						canTX_Signal.data[0] = 0x04;
 482:	bc 82       	std	Y+4, r11	; 0x04
						canTX_Signal.data[1] = 0x01;
 484:	ad 82       	std	Y+5, r10	; 0x05
						mcp2515_send_message(&canTX_Signal);
 486:	ce 01       	movw	r24, r28
 488:	01 96       	adiw	r24, 0x01	; 1
 48a:	81 d1       	rcall	.+770    	; 0x78e <mcp2515_send_message>
						/* Set cursor to home position */
						lcd_home();
 48c:	b9 d0       	rcall	.+370    	; 0x600 <lcd_home>
						lcd_puts("Left Signal On! ");
 48e:	81 ec       	ldi	r24, 0xC1	; 193
 490:	92 e0       	ldi	r25, 0x02	; 2
 492:	c5 d0       	rcall	.+394    	; 0x61e <lcd_puts>
 494:	09 c0       	rjmp	.+18     	; 0x4a8 <main+0x164>
					}
					else
					{
						canTX_Signal.data[0] = 0x04;
 496:	bc 82       	std	Y+4, r11	; 0x04
						canTX_Signal.data[1] = 0x00;
 498:	1d 82       	std	Y+5, r1	; 0x05
						mcp2515_send_message(&canTX_Signal);
 49a:	ce 01       	movw	r24, r28
 49c:	01 96       	adiw	r24, 0x01	; 1
 49e:	77 d1       	rcall	.+750    	; 0x78e <mcp2515_send_message>
						/* Set cursor to home position */
						lcd_home();
 4a0:	af d0       	rcall	.+350    	; 0x600 <lcd_home>
						lcd_puts("Left Signal Off!");
 4a2:	82 ed       	ldi	r24, 0xD2	; 210
 4a4:	92 e0       	ldi	r25, 0x02	; 2
 4a6:	bb d0       	rcall	.+374    	; 0x61e <lcd_puts>
					}
					/* Reset counter */
					TCNT0 = 0;
 4a8:	16 bc       	out	0x26, r1	; 38
					/* Reset overflows counter */
					totalOverflows = 0;
 4aa:	10 92 3c 03 	sts	0x033C, r1
 4ae:	a0 cf       	rjmp	.-192    	; 0x3f0 <main+0xac>
				}
			}
		}
		
		else if(PINB & RIGHT_SIGNAL)
 4b0:	1f 9b       	sbis	0x03, 7	; 3
 4b2:	25 c0       	rjmp	.+74     	; 0x4fe <main+0x1ba>
		{
			/* Check if the number of overflows is equal with 36 */
			if(totalOverflows >= 36)
 4b4:	80 91 3c 03 	lds	r24, 0x033C
 4b8:	84 32       	cpi	r24, 0x24	; 36
 4ba:	08 f4       	brcc	.+2      	; 0x4be <main+0x17a>
 4bc:	99 cf       	rjmp	.-206    	; 0x3f0 <main+0xac>
			{
				/* Check if the timer0 counts 195 ticks */
				if(TCNT0 >= 195)
 4be:	86 b5       	in	r24, 0x26	; 38
 4c0:	83 3c       	cpi	r24, 0xC3	; 195
 4c2:	08 f4       	brcc	.+2      	; 0x4c6 <main+0x182>
 4c4:	95 cf       	rjmp	.-214    	; 0x3f0 <main+0xac>
				{
					PORTE ^= LED;
 4c6:	8e b1       	in	r24, 0x0e	; 14
 4c8:	8c 25       	eor	r24, r12
 4ca:	8e b9       	out	0x0e, r24	; 14
					/*  */
					if(!(PINE & LED))
 4cc:	64 99       	sbic	0x0c, 4	; 12
 4ce:	0a c0       	rjmp	.+20     	; 0x4e4 <main+0x1a0>
					{
						canTX_Signal.data[0] = 0x02;
 4d0:	8c 82       	std	Y+4, r8	; 0x04
						canTX_Signal.data[1] = 0x01;
 4d2:	ad 82       	std	Y+5, r10	; 0x05
						mcp2515_send_message(&canTX_Signal);
 4d4:	ce 01       	movw	r24, r28
 4d6:	01 96       	adiw	r24, 0x01	; 1
 4d8:	5a d1       	rcall	.+692    	; 0x78e <mcp2515_send_message>
						/* Set cursor to home position */
						lcd_home();
 4da:	92 d0       	rcall	.+292    	; 0x600 <lcd_home>
						lcd_puts("Right Signal On!");
 4dc:	83 ee       	ldi	r24, 0xE3	; 227
 4de:	92 e0       	ldi	r25, 0x02	; 2
 4e0:	9e d0       	rcall	.+316    	; 0x61e <lcd_puts>
 4e2:	09 c0       	rjmp	.+18     	; 0x4f6 <main+0x1b2>
					}
					else
					{
						canTX_Signal.data[0] = 0x02;
 4e4:	8c 82       	std	Y+4, r8	; 0x04
						canTX_Signal.data[1] = 0x00;
 4e6:	1d 82       	std	Y+5, r1	; 0x05
						mcp2515_send_message(&canTX_Signal);
 4e8:	ce 01       	movw	r24, r28
 4ea:	01 96       	adiw	r24, 0x01	; 1
 4ec:	50 d1       	rcall	.+672    	; 0x78e <mcp2515_send_message>
						/* Set cursor to home position */
						lcd_home();
 4ee:	88 d0       	rcall	.+272    	; 0x600 <lcd_home>
						lcd_puts("Right Signal Off");
 4f0:	84 ef       	ldi	r24, 0xF4	; 244
 4f2:	92 e0       	ldi	r25, 0x02	; 2
 4f4:	94 d0       	rcall	.+296    	; 0x61e <lcd_puts>
					}
					/* Reset counter */
					TCNT0 = 0;
 4f6:	16 bc       	out	0x26, r1	; 38
					/* Reset overflows counter */
					totalOverflows = 0;
 4f8:	10 92 3c 03 	sts	0x033C, r1
 4fc:	79 cf       	rjmp	.-270    	; 0x3f0 <main+0xac>
				}
			}
		}
		
		else if(PINH & HAZARD_SIGNAL)
 4fe:	f8 01       	movw	r30, r16
 500:	80 81       	ld	r24, Z
 502:	86 ff       	sbrs	r24, 6
 504:	25 c0       	rjmp	.+74     	; 0x550 <main+0x20c>
		{
			/* Check if the number of overflows is equal with 36 */
			if(totalOverflows >= 36)
 506:	80 91 3c 03 	lds	r24, 0x033C
 50a:	84 32       	cpi	r24, 0x24	; 36
 50c:	08 f4       	brcc	.+2      	; 0x510 <main+0x1cc>
 50e:	70 cf       	rjmp	.-288    	; 0x3f0 <main+0xac>
			{
				/* Check if the timer0 counts 195 ticks */
				if(TCNT0 >= 195)
 510:	86 b5       	in	r24, 0x26	; 38
 512:	83 3c       	cpi	r24, 0xC3	; 195
 514:	08 f4       	brcc	.+2      	; 0x518 <main+0x1d4>
 516:	6c cf       	rjmp	.-296    	; 0x3f0 <main+0xac>
				{
					PORTE ^= LED;
 518:	8e b1       	in	r24, 0x0e	; 14
 51a:	8c 25       	eor	r24, r12
 51c:	8e b9       	out	0x0e, r24	; 14
					/*  */
					if(!(PINE & LED))
 51e:	64 99       	sbic	0x0c, 4	; 12
 520:	0a c0       	rjmp	.+20     	; 0x536 <main+0x1f2>
					{
						canTX_Signal.data[0] = 0x06;
 522:	9c 82       	std	Y+4, r9	; 0x04
						canTX_Signal.data[1] = 0x01;
 524:	ad 82       	std	Y+5, r10	; 0x05
						mcp2515_send_message(&canTX_Signal);
 526:	ce 01       	movw	r24, r28
 528:	01 96       	adiw	r24, 0x01	; 1
 52a:	31 d1       	rcall	.+610    	; 0x78e <mcp2515_send_message>
						/* Set cursor to home position */
						lcd_home();
 52c:	69 d0       	rcall	.+210    	; 0x600 <lcd_home>
						lcd_puts("Hazard Signal On!");
 52e:	85 e0       	ldi	r24, 0x05	; 5
 530:	93 e0       	ldi	r25, 0x03	; 3
 532:	75 d0       	rcall	.+234    	; 0x61e <lcd_puts>
 534:	09 c0       	rjmp	.+18     	; 0x548 <main+0x204>
					}
					else
					{
						canTX_Signal.data[0] = 0x06;
 536:	9c 82       	std	Y+4, r9	; 0x04
						canTX_Signal.data[1] = 0x00;
 538:	1d 82       	std	Y+5, r1	; 0x05
						mcp2515_send_message(&canTX_Signal);
 53a:	ce 01       	movw	r24, r28
 53c:	01 96       	adiw	r24, 0x01	; 1
 53e:	27 d1       	rcall	.+590    	; 0x78e <mcp2515_send_message>
						/* Set cursor to home position */
						lcd_home();
 540:	5f d0       	rcall	.+190    	; 0x600 <lcd_home>
						lcd_puts("HazardSignal Off");
 542:	87 e1       	ldi	r24, 0x17	; 23
 544:	93 e0       	ldi	r25, 0x03	; 3
 546:	6b d0       	rcall	.+214    	; 0x61e <lcd_puts>
					}
					/* Reset counter */
					TCNT0 = 0;
 548:	16 bc       	out	0x26, r1	; 38
					/* Reset overflows counter */
					totalOverflows = 0;
 54a:	10 92 3c 03 	sts	0x033C, r1
 54e:	50 cf       	rjmp	.-352    	; 0x3f0 <main+0xac>
				}
			}
		}
		
		else if(PINB & BRAKE_LIGHT)
 550:	1c 9b       	sbis	0x03, 4	; 3
 552:	0b c0       	rjmp	.+22     	; 0x56a <main+0x226>
		{
			PORTE |= LED;
 554:	74 9a       	sbi	0x0e, 4	; 14
			canTX_Brake.data[0] = 0xFF;
 556:	df 86       	std	Y+15, r13	; 0x0f
			canTX_Brake.data[1] = 0x00;
 558:	18 8a       	std	Y+16, r1	; 0x10
			mcp2515_send_message(&canTX_Brake);
 55a:	ce 01       	movw	r24, r28
 55c:	0c 96       	adiw	r24, 0x0c	; 12
 55e:	17 d1       	rcall	.+558    	; 0x78e <mcp2515_send_message>
			lcd_home();
 560:	4f d0       	rcall	.+158    	; 0x600 <lcd_home>
			lcd_puts(" Brake Pressed! ");
 562:	88 e2       	ldi	r24, 0x28	; 40
 564:	93 e0       	ldi	r25, 0x03	; 3
 566:	5b d0       	rcall	.+182    	; 0x61e <lcd_puts>
 568:	43 cf       	rjmp	.-378    	; 0x3f0 <main+0xac>
			//_delay_ms(500);
			//lcd_clrscr();
		}
		
		else if(!(PINB & BRAKE_LIGHT))
 56a:	1c 99       	sbic	0x03, 4	; 3
 56c:	41 cf       	rjmp	.-382    	; 0x3f0 <main+0xac>
		{
			mcp2515_send_message(&canTX_Brake);
 56e:	ce 01       	movw	r24, r28
 570:	0c 96       	adiw	r24, 0x0c	; 12
 572:	0d d1       	rcall	.+538    	; 0x78e <mcp2515_send_message>
			PORTE &= ~LED;
 574:	74 98       	cbi	0x0e, 4	; 14
			canTX_Brake.data[0] = 0x00;
 576:	1f 86       	std	Y+15, r1	; 0x0f
			canTX_Brake.data[1] = 0x00;
 578:	18 8a       	std	Y+16, r1	; 0x10
 57a:	3a cf       	rjmp	.-396    	; 0x3f0 <main+0xac>

0000057c <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
 57c:	12 9a       	sbi	0x02, 2	; 2
 57e:	00 c0       	rjmp	.+0      	; 0x580 <toggle_e+0x4>
 580:	12 98       	cbi	0x02, 2	; 2
 582:	08 95       	ret

00000584 <lcd_write>:
 584:	cf 93       	push	r28
 586:	c8 2f       	mov	r28, r24
 588:	66 23       	and	r22, r22
 58a:	11 f0       	breq	.+4      	; 0x590 <lcd_write+0xc>
 58c:	10 9a       	sbi	0x02, 0	; 2
 58e:	01 c0       	rjmp	.+2      	; 0x592 <lcd_write+0xe>
 590:	10 98       	cbi	0x02, 0	; 2
 592:	0b 9a       	sbi	0x01, 3	; 1
 594:	0c 9a       	sbi	0x01, 4	; 1
 596:	0d 9a       	sbi	0x01, 5	; 1
 598:	0e 9a       	sbi	0x01, 6	; 1
 59a:	16 98       	cbi	0x02, 6	; 2
 59c:	15 98       	cbi	0x02, 5	; 2
 59e:	14 98       	cbi	0x02, 4	; 2
 5a0:	13 98       	cbi	0x02, 3	; 2
 5a2:	cc 23       	and	r28, r28
 5a4:	0c f4       	brge	.+2      	; 0x5a8 <lcd_write+0x24>
 5a6:	16 9a       	sbi	0x02, 6	; 2
 5a8:	c6 fd       	sbrc	r28, 6
 5aa:	15 9a       	sbi	0x02, 5	; 2
 5ac:	c5 fd       	sbrc	r28, 5
 5ae:	14 9a       	sbi	0x02, 4	; 2
 5b0:	c4 fd       	sbrc	r28, 4
 5b2:	13 9a       	sbi	0x02, 3	; 2
 5b4:	e3 df       	rcall	.-58     	; 0x57c <toggle_e>
 5b6:	16 98       	cbi	0x02, 6	; 2
 5b8:	15 98       	cbi	0x02, 5	; 2
 5ba:	14 98       	cbi	0x02, 4	; 2
 5bc:	13 98       	cbi	0x02, 3	; 2
 5be:	c3 fd       	sbrc	r28, 3
 5c0:	16 9a       	sbi	0x02, 6	; 2
 5c2:	c2 fd       	sbrc	r28, 2
 5c4:	15 9a       	sbi	0x02, 5	; 2
 5c6:	c1 fd       	sbrc	r28, 1
 5c8:	14 9a       	sbi	0x02, 4	; 2
 5ca:	c0 fd       	sbrc	r28, 0
 5cc:	13 9a       	sbi	0x02, 3	; 2
 5ce:	d6 df       	rcall	.-84     	; 0x57c <toggle_e>
 5d0:	13 9a       	sbi	0x02, 3	; 2
 5d2:	14 9a       	sbi	0x02, 4	; 2
 5d4:	15 9a       	sbi	0x02, 5	; 2
 5d6:	16 9a       	sbi	0x02, 6	; 2
 5d8:	cf 91       	pop	r28
 5da:	08 95       	ret

000005dc <lcd_command>:
 5dc:	e0 ea       	ldi	r30, 0xA0	; 160
 5de:	ff e0       	ldi	r31, 0x0F	; 15
 5e0:	31 97       	sbiw	r30, 0x01	; 1
 5e2:	f1 f7       	brne	.-4      	; 0x5e0 <lcd_command+0x4>
 5e4:	60 e0       	ldi	r22, 0x00	; 0
 5e6:	ce cf       	rjmp	.-100    	; 0x584 <lcd_write>
 5e8:	08 95       	ret

000005ea <lcd_gotoxy>:
 5ea:	61 11       	cpse	r22, r1
 5ec:	03 c0       	rjmp	.+6      	; 0x5f4 <lcd_gotoxy+0xa>
 5ee:	80 58       	subi	r24, 0x80	; 128
 5f0:	f5 cf       	rjmp	.-22     	; 0x5dc <lcd_command>
 5f2:	08 95       	ret
 5f4:	80 54       	subi	r24, 0x40	; 64
 5f6:	f2 cf       	rjmp	.-28     	; 0x5dc <lcd_command>
 5f8:	08 95       	ret

000005fa <lcd_clrscr>:
 5fa:	81 e0       	ldi	r24, 0x01	; 1
 5fc:	ef cf       	rjmp	.-34     	; 0x5dc <lcd_command>
 5fe:	08 95       	ret

00000600 <lcd_home>:
 600:	82 e0       	ldi	r24, 0x02	; 2
 602:	ec cf       	rjmp	.-40     	; 0x5dc <lcd_command>
 604:	08 95       	ret

00000606 <lcd_putc>:
 606:	e0 ea       	ldi	r30, 0xA0	; 160
 608:	ff e0       	ldi	r31, 0x0F	; 15
 60a:	31 97       	sbiw	r30, 0x01	; 1
 60c:	f1 f7       	brne	.-4      	; 0x60a <lcd_putc+0x4>
 60e:	8a 30       	cpi	r24, 0x0A	; 10
 610:	19 f4       	brne	.+6      	; 0x618 <lcd_putc+0x12>
 612:	80 ec       	ldi	r24, 0xC0	; 192
 614:	e3 cf       	rjmp	.-58     	; 0x5dc <lcd_command>
 616:	08 95       	ret
 618:	61 e0       	ldi	r22, 0x01	; 1
 61a:	b4 cf       	rjmp	.-152    	; 0x584 <lcd_write>
 61c:	08 95       	ret

0000061e <lcd_puts>:
 61e:	cf 93       	push	r28
 620:	df 93       	push	r29
 622:	ec 01       	movw	r28, r24
 624:	21 96       	adiw	r28, 0x01	; 1
 626:	fc 01       	movw	r30, r24
 628:	80 81       	ld	r24, Z
 62a:	88 23       	and	r24, r24
 62c:	21 f0       	breq	.+8      	; 0x636 <lcd_puts+0x18>
 62e:	eb df       	rcall	.-42     	; 0x606 <lcd_putc>
 630:	89 91       	ld	r24, Y+
 632:	81 11       	cpse	r24, r1
 634:	fc cf       	rjmp	.-8      	; 0x62e <lcd_puts+0x10>
 636:	df 91       	pop	r29
 638:	cf 91       	pop	r28
 63a:	08 95       	ret

0000063c <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 63c:	cf 93       	push	r28
 63e:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 640:	08 9a       	sbi	0x01, 0	; 1
#if LCD_READ_REQUIRED
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
#endif
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 642:	0a 9a       	sbi	0x01, 2	; 1
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 644:	0b 9a       	sbi	0x01, 3	; 1
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 646:	0c 9a       	sbi	0x01, 4	; 1
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 648:	0d 9a       	sbi	0x01, 5	; 1
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 64a:	0e 9a       	sbi	0x01, 6	; 1
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 64c:	e0 e0       	ldi	r30, 0x00	; 0
 64e:	fa ef       	ldi	r31, 0xFA	; 250
 650:	31 97       	sbiw	r30, 0x01	; 1
 652:	f1 f7       	brne	.-4      	; 0x650 <lcd_init+0x14>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 654:	14 9a       	sbi	0x02, 4	; 2
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 656:	13 9a       	sbi	0x02, 3	; 2
    lcd_e_toggle();
 658:	91 df       	rcall	.-222    	; 0x57c <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 65a:	e0 e0       	ldi	r30, 0x00	; 0
 65c:	fe e4       	ldi	r31, 0x4E	; 78
 65e:	31 97       	sbiw	r30, 0x01	; 1
 660:	f1 f7       	brne	.-4      	; 0x65e <lcd_init+0x22>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 662:	8c df       	rcall	.-232    	; 0x57c <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 664:	e0 e0       	ldi	r30, 0x00	; 0
 666:	f1 e0       	ldi	r31, 0x01	; 1
 668:	31 97       	sbiw	r30, 0x01	; 1
 66a:	f1 f7       	brne	.-4      	; 0x668 <lcd_init+0x2c>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 66c:	87 df       	rcall	.-242    	; 0x57c <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 66e:	e0 e0       	ldi	r30, 0x00	; 0
 670:	f1 e0       	ldi	r31, 0x01	; 1
 672:	31 97       	sbiw	r30, 0x01	; 1
 674:	f1 f7       	brne	.-4      	; 0x672 <lcd_init+0x36>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 676:	13 98       	cbi	0x02, 3	; 2
    lcd_e_toggle();
 678:	81 df       	rcall	.-254    	; 0x57c <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 67a:	e0 e0       	ldi	r30, 0x00	; 0
 67c:	f1 e0       	ldi	r31, 0x01	; 1
 67e:	31 97       	sbiw	r30, 0x01	; 1
 680:	f1 f7       	brne	.-4      	; 0x67e <lcd_init+0x42>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 682:	88 e2       	ldi	r24, 0x28	; 40
 684:	ab df       	rcall	.-170    	; 0x5dc <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 686:	88 e0       	ldi	r24, 0x08	; 8
 688:	a9 df       	rcall	.-174    	; 0x5dc <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 68a:	b7 df       	rcall	.-146    	; 0x5fa <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 68c:	86 e0       	ldi	r24, 0x06	; 6
 68e:	a6 df       	rcall	.-180    	; 0x5dc <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 690:	8c 2f       	mov	r24, r28
 692:	a4 df       	rcall	.-184    	; 0x5dc <lcd_command>

 694:	cf 91       	pop	r28
 696:	08 95       	ret

00000698 <spi_putc>:
	else {
		mcp2515_bit_modify(CANINTF, (1<<RX1IF), 0);
	}
	
	return (status & 0x07) + 1;
}
 698:	8e bd       	out	0x2e, r24	; 46
 69a:	0d b4       	in	r0, 0x2d	; 45
 69c:	07 fe       	sbrs	r0, 7
 69e:	fd cf       	rjmp	.-6      	; 0x69a <spi_putc+0x2>
 6a0:	8e b5       	in	r24, 0x2e	; 46
 6a2:	08 95       	ret

000006a4 <mcp2515_write_register>:
 6a4:	cf 93       	push	r28
 6a6:	df 93       	push	r29
 6a8:	d8 2f       	mov	r29, r24
 6aa:	c6 2f       	mov	r28, r22
 6ac:	28 98       	cbi	0x05, 0	; 5
 6ae:	82 e0       	ldi	r24, 0x02	; 2
 6b0:	f3 df       	rcall	.-26     	; 0x698 <spi_putc>
 6b2:	8d 2f       	mov	r24, r29
 6b4:	f1 df       	rcall	.-30     	; 0x698 <spi_putc>
 6b6:	8c 2f       	mov	r24, r28
 6b8:	ef df       	rcall	.-34     	; 0x698 <spi_putc>
 6ba:	28 9a       	sbi	0x05, 0	; 5
 6bc:	df 91       	pop	r29
 6be:	cf 91       	pop	r28
 6c0:	08 95       	ret

000006c2 <mcp2515_read_register>:
 6c2:	cf 93       	push	r28
 6c4:	c8 2f       	mov	r28, r24
 6c6:	28 98       	cbi	0x05, 0	; 5
 6c8:	83 e0       	ldi	r24, 0x03	; 3
 6ca:	e6 df       	rcall	.-52     	; 0x698 <spi_putc>
 6cc:	8c 2f       	mov	r24, r28
 6ce:	e4 df       	rcall	.-56     	; 0x698 <spi_putc>
 6d0:	8f ef       	ldi	r24, 0xFF	; 255
 6d2:	e2 df       	rcall	.-60     	; 0x698 <spi_putc>
 6d4:	28 9a       	sbi	0x05, 0	; 5
 6d6:	cf 91       	pop	r28
 6d8:	08 95       	ret

000006da <mcp2515_bit_modify>:
 6da:	1f 93       	push	r17
 6dc:	cf 93       	push	r28
 6de:	df 93       	push	r29
 6e0:	18 2f       	mov	r17, r24
 6e2:	d6 2f       	mov	r29, r22
 6e4:	c4 2f       	mov	r28, r20
 6e6:	28 98       	cbi	0x05, 0	; 5
 6e8:	85 e0       	ldi	r24, 0x05	; 5
 6ea:	d6 df       	rcall	.-84     	; 0x698 <spi_putc>
 6ec:	81 2f       	mov	r24, r17
 6ee:	d4 df       	rcall	.-88     	; 0x698 <spi_putc>
 6f0:	8d 2f       	mov	r24, r29
 6f2:	d2 df       	rcall	.-92     	; 0x698 <spi_putc>
 6f4:	8c 2f       	mov	r24, r28
 6f6:	d0 df       	rcall	.-96     	; 0x698 <spi_putc>
 6f8:	28 9a       	sbi	0x05, 0	; 5
 6fa:	df 91       	pop	r29
 6fc:	cf 91       	pop	r28
 6fe:	1f 91       	pop	r17
 700:	08 95       	ret

00000702 <mcp2515_read_status>:
 702:	28 98       	cbi	0x05, 0	; 5
 704:	c9 df       	rcall	.-110    	; 0x698 <spi_putc>
 706:	8f ef       	ldi	r24, 0xFF	; 255
 708:	c7 df       	rcall	.-114    	; 0x698 <spi_putc>
 70a:	28 9a       	sbi	0x05, 0	; 5
 70c:	08 95       	ret

0000070e <mcp2515_init>:
 70e:	28 9a       	sbi	0x05, 0	; 5
 710:	20 9a       	sbi	0x04, 0	; 4
 712:	29 98       	cbi	0x05, 1	; 5
 714:	2a 98       	cbi	0x05, 2	; 5
 716:	2b 98       	cbi	0x05, 3	; 5
 718:	21 9a       	sbi	0x04, 1	; 4
 71a:	22 9a       	sbi	0x04, 2	; 4
 71c:	23 98       	cbi	0x04, 3	; 4
 71e:	50 98       	cbi	0x0a, 0	; 10
 720:	58 9a       	sbi	0x0b, 0	; 11
 722:	81 e5       	ldi	r24, 0x51	; 81
 724:	8c bd       	out	0x2c, r24	; 44
 726:	1d bc       	out	0x2d, r1	; 45
 728:	28 98       	cbi	0x05, 0	; 5
 72a:	80 ec       	ldi	r24, 0xC0	; 192
 72c:	b5 df       	rcall	.-150    	; 0x698 <spi_putc>
 72e:	28 9a       	sbi	0x05, 0	; 5
 730:	8f e3       	ldi	r24, 0x3F	; 63
 732:	9c e9       	ldi	r25, 0x9C	; 156
 734:	01 97       	sbiw	r24, 0x01	; 1
 736:	f1 f7       	brne	.-4      	; 0x734 <mcp2515_init+0x26>
 738:	00 c0       	rjmp	.+0      	; 0x73a <mcp2515_init+0x2c>
 73a:	00 00       	nop
 73c:	28 98       	cbi	0x05, 0	; 5
 73e:	82 e0       	ldi	r24, 0x02	; 2
 740:	ab df       	rcall	.-170    	; 0x698 <spi_putc>
 742:	88 e2       	ldi	r24, 0x28	; 40
 744:	a9 df       	rcall	.-174    	; 0x698 <spi_putc>
 746:	82 e0       	ldi	r24, 0x02	; 2
 748:	a7 df       	rcall	.-178    	; 0x698 <spi_putc>
 74a:	80 e9       	ldi	r24, 0x90	; 144
 74c:	a5 df       	rcall	.-182    	; 0x698 <spi_putc>
 74e:	87 e0       	ldi	r24, 0x07	; 7
 750:	a3 df       	rcall	.-186    	; 0x698 <spi_putc>
 752:	83 e0       	ldi	r24, 0x03	; 3
 754:	a1 df       	rcall	.-190    	; 0x698 <spi_putc>
 756:	28 9a       	sbi	0x05, 0	; 5
 758:	8a e2       	ldi	r24, 0x2A	; 42
 75a:	b3 df       	rcall	.-154    	; 0x6c2 <mcp2515_read_register>
 75c:	87 30       	cpi	r24, 0x07	; 7
 75e:	89 f4       	brne	.+34     	; 0x782 <mcp2515_init+0x74>
 760:	60 e0       	ldi	r22, 0x00	; 0
 762:	8c e0       	ldi	r24, 0x0C	; 12
 764:	9f df       	rcall	.-194    	; 0x6a4 <mcp2515_write_register>
 766:	60 e0       	ldi	r22, 0x00	; 0
 768:	8d e0       	ldi	r24, 0x0D	; 13
 76a:	9c df       	rcall	.-200    	; 0x6a4 <mcp2515_write_register>
 76c:	60 e6       	ldi	r22, 0x60	; 96
 76e:	80 e6       	ldi	r24, 0x60	; 96
 770:	99 df       	rcall	.-206    	; 0x6a4 <mcp2515_write_register>
 772:	60 e6       	ldi	r22, 0x60	; 96
 774:	80 e7       	ldi	r24, 0x70	; 112
 776:	96 df       	rcall	.-212    	; 0x6a4 <mcp2515_write_register>
 778:	60 e0       	ldi	r22, 0x00	; 0
 77a:	8f e0       	ldi	r24, 0x0F	; 15
 77c:	93 df       	rcall	.-218    	; 0x6a4 <mcp2515_write_register>
 77e:	81 e0       	ldi	r24, 0x01	; 1
 780:	08 95       	ret
 782:	80 e0       	ldi	r24, 0x00	; 0
 784:	08 95       	ret

00000786 <mcp2515_check_message>:
 786:	89 b1       	in	r24, 0x09	; 9
 788:	80 95       	com	r24
 78a:	81 70       	andi	r24, 0x01	; 1
 78c:	08 95       	ret

0000078e <mcp2515_send_message>:

// ----------------------------------------------------------------------------
uint8_t mcp2515_send_message(tCAN *message)
{
 78e:	df 92       	push	r13
 790:	ef 92       	push	r14
 792:	ff 92       	push	r15
 794:	0f 93       	push	r16
 796:	1f 93       	push	r17
 798:	cf 93       	push	r28
 79a:	df 93       	push	r29
 79c:	1f 92       	push	r1
 79e:	cd b7       	in	r28, 0x3d	; 61
 7a0:	de b7       	in	r29, 0x3e	; 62
 7a2:	8c 01       	movw	r16, r24
	uint8_t status = mcp2515_read_status(SPI_READ_STATUS);
 7a4:	80 ea       	ldi	r24, 0xA0	; 160
 7a6:	ad df       	rcall	.-166    	; 0x702 <mcp2515_read_status>
 7a8:	89 83       	std	Y+1, r24	; 0x01
	 *  2	TXB0CNTRL.TXREQ
	 *  4	TXB1CNTRL.TXREQ
	 *  6	TXB2CNTRL.TXREQ
	 */
	uint8_t address;
	if (bit_is_clear(status, 2)) {
 7aa:	89 81       	ldd	r24, Y+1	; 0x01
 7ac:	82 ff       	sbrs	r24, 2
 7ae:	0a c0       	rjmp	.+20     	; 0x7c4 <mcp2515_send_message+0x36>
		address = 0x00;
	}
	else if (bit_is_clear(status, 4)) {
 7b0:	89 81       	ldd	r24, Y+1	; 0x01
 7b2:	84 ff       	sbrs	r24, 4
 7b4:	09 c0       	rjmp	.+18     	; 0x7c8 <mcp2515_send_message+0x3a>
		address = 0x02;
	} 
	else if (bit_is_clear(status, 6)) {
 7b6:	89 81       	ldd	r24, Y+1	; 0x01
 7b8:	86 fd       	sbrc	r24, 6
 7ba:	4d c0       	rjmp	.+154    	; 0x856 <mcp2515_send_message+0xc8>
		address = 0x04;
 7bc:	68 94       	set
 7be:	dd 24       	eor	r13, r13
 7c0:	d2 f8       	bld	r13, 2
 7c2:	05 c0       	rjmp	.+10     	; 0x7ce <mcp2515_send_message+0x40>
	 *  4	TXB1CNTRL.TXREQ
	 *  6	TXB2CNTRL.TXREQ
	 */
	uint8_t address;
	if (bit_is_clear(status, 2)) {
		address = 0x00;
 7c4:	d1 2c       	mov	r13, r1
 7c6:	03 c0       	rjmp	.+6      	; 0x7ce <mcp2515_send_message+0x40>
	}
	else if (bit_is_clear(status, 4)) {
		address = 0x02;
 7c8:	68 94       	set
 7ca:	dd 24       	eor	r13, r13
 7cc:	d1 f8       	bld	r13, 1
	else {
		// all buffer used => could not send message
		return 0;
	}
	
	RESET(MCP2515_CS);
 7ce:	28 98       	cbi	0x05, 0	; 5
	spi_putc(SPI_WRITE_TX | address);
 7d0:	8d 2d       	mov	r24, r13
 7d2:	80 64       	ori	r24, 0x40	; 64
 7d4:	61 df       	rcall	.-318    	; 0x698 <spi_putc>
	
	spi_putc(message->id >> 3);
 7d6:	f8 01       	movw	r30, r16
 7d8:	20 81       	ld	r18, Z
 7da:	31 81       	ldd	r19, Z+1	; 0x01
 7dc:	c9 01       	movw	r24, r18
 7de:	96 95       	lsr	r25
 7e0:	87 95       	ror	r24
 7e2:	96 95       	lsr	r25
 7e4:	87 95       	ror	r24
 7e6:	96 95       	lsr	r25
 7e8:	87 95       	ror	r24
 7ea:	56 df       	rcall	.-340    	; 0x698 <spi_putc>
    spi_putc(message->id << 5);
 7ec:	f8 01       	movw	r30, r16
 7ee:	80 81       	ld	r24, Z
 7f0:	82 95       	swap	r24
 7f2:	88 0f       	add	r24, r24
 7f4:	80 7e       	andi	r24, 0xE0	; 224
 7f6:	50 df       	rcall	.-352    	; 0x698 <spi_putc>
	
	spi_putc(0);
 7f8:	80 e0       	ldi	r24, 0x00	; 0
 7fa:	4e df       	rcall	.-356    	; 0x698 <spi_putc>
	spi_putc(0);
 7fc:	80 e0       	ldi	r24, 0x00	; 0
 7fe:	4c df       	rcall	.-360    	; 0x698 <spi_putc>
	
	uint8_t length = message->header.length & 0x0f;
 800:	f8 01       	movw	r30, r16
 802:	82 81       	ldd	r24, Z+2	; 0x02
 804:	e8 2e       	mov	r14, r24
 806:	e6 94       	lsr	r14
 808:	fe 2d       	mov	r31, r14
 80a:	ff 70       	andi	r31, 0x0F	; 15
 80c:	ef 2e       	mov	r14, r31
	
	if (message->header.rtr) {
 80e:	80 ff       	sbrs	r24, 0
 810:	04 c0       	rjmp	.+8      	; 0x81a <mcp2515_send_message+0x8c>
		// a rtr-frame has a length, but contains no data
		spi_putc((1<<RTR) | length);
 812:	8f 2f       	mov	r24, r31
 814:	80 64       	ori	r24, 0x40	; 64
 816:	40 df       	rcall	.-384    	; 0x698 <spi_putc>
 818:	0e c0       	rjmp	.+28     	; 0x836 <mcp2515_send_message+0xa8>
	}
	else {
		// set message length
		spi_putc(length);
 81a:	8f 2f       	mov	r24, r31
 81c:	3d df       	rcall	.-390    	; 0x698 <spi_putc>
		
		// data
		for (uint8_t i=0;i<length;i++) {
 81e:	ee 20       	and	r14, r14
 820:	51 f0       	breq	.+20     	; 0x836 <mcp2515_send_message+0xa8>
 822:	0d 5f       	subi	r16, 0xFD	; 253
 824:	1f 4f       	sbci	r17, 0xFF	; 255
 826:	f1 2c       	mov	r15, r1
			spi_putc(message->data[i]);
 828:	f8 01       	movw	r30, r16
 82a:	81 91       	ld	r24, Z+
 82c:	8f 01       	movw	r16, r30
 82e:	34 df       	rcall	.-408    	; 0x698 <spi_putc>
	else {
		// set message length
		spi_putc(length);
		
		// data
		for (uint8_t i=0;i<length;i++) {
 830:	f3 94       	inc	r15
 832:	fe 14       	cp	r15, r14
 834:	c8 f3       	brcs	.-14     	; 0x828 <mcp2515_send_message+0x9a>
			spi_putc(message->data[i]);
		}
	}
	SET(MCP2515_CS);
 836:	28 9a       	sbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 838:	f5 e0       	ldi	r31, 0x05	; 5
 83a:	fa 95       	dec	r31
 83c:	f1 f7       	brne	.-4      	; 0x83a <mcp2515_send_message+0xac>
 83e:	00 00       	nop
	
	_delay_us(1);
	
	// send message
	RESET(MCP2515_CS);
 840:	28 98       	cbi	0x05, 0	; 5
	address = (address == 0) ? 1 : address;
 842:	d1 10       	cpse	r13, r1
 844:	02 c0       	rjmp	.+4      	; 0x84a <mcp2515_send_message+0xbc>
 846:	dd 24       	eor	r13, r13
 848:	d3 94       	inc	r13
	spi_putc(SPI_RTS | address);
 84a:	8d 2d       	mov	r24, r13
 84c:	80 68       	ori	r24, 0x80	; 128
 84e:	24 df       	rcall	.-440    	; 0x698 <spi_putc>
	SET(MCP2515_CS);
 850:	28 9a       	sbi	0x05, 0	; 5
	
	return address;
 852:	8d 2d       	mov	r24, r13
 854:	01 c0       	rjmp	.+2      	; 0x858 <mcp2515_send_message+0xca>
	else if (bit_is_clear(status, 6)) {
		address = 0x04;
	}
	else {
		// all buffer used => could not send message
		return 0;
 856:	80 e0       	ldi	r24, 0x00	; 0
	address = (address == 0) ? 1 : address;
	spi_putc(SPI_RTS | address);
	SET(MCP2515_CS);
	
	return address;
}
 858:	0f 90       	pop	r0
 85a:	df 91       	pop	r29
 85c:	cf 91       	pop	r28
 85e:	1f 91       	pop	r17
 860:	0f 91       	pop	r16
 862:	ff 90       	pop	r15
 864:	ef 90       	pop	r14
 866:	df 90       	pop	r13
 868:	08 95       	ret

0000086a <__subsf3>:
 86a:	50 58       	subi	r21, 0x80	; 128

0000086c <__addsf3>:
 86c:	bb 27       	eor	r27, r27
 86e:	aa 27       	eor	r26, r26
 870:	0e d0       	rcall	.+28     	; 0x88e <__addsf3x>
 872:	e5 c0       	rjmp	.+458    	; 0xa3e <__fp_round>
 874:	d6 d0       	rcall	.+428    	; 0xa22 <__fp_pscA>
 876:	30 f0       	brcs	.+12     	; 0x884 <__addsf3+0x18>
 878:	db d0       	rcall	.+438    	; 0xa30 <__fp_pscB>
 87a:	20 f0       	brcs	.+8      	; 0x884 <__addsf3+0x18>
 87c:	31 f4       	brne	.+12     	; 0x88a <__addsf3+0x1e>
 87e:	9f 3f       	cpi	r25, 0xFF	; 255
 880:	11 f4       	brne	.+4      	; 0x886 <__addsf3+0x1a>
 882:	1e f4       	brtc	.+6      	; 0x88a <__addsf3+0x1e>
 884:	cb c0       	rjmp	.+406    	; 0xa1c <__fp_nan>
 886:	0e f4       	brtc	.+2      	; 0x88a <__addsf3+0x1e>
 888:	e0 95       	com	r30
 88a:	e7 fb       	bst	r30, 7
 88c:	c1 c0       	rjmp	.+386    	; 0xa10 <__fp_inf>

0000088e <__addsf3x>:
 88e:	e9 2f       	mov	r30, r25
 890:	e7 d0       	rcall	.+462    	; 0xa60 <__fp_split3>
 892:	80 f3       	brcs	.-32     	; 0x874 <__addsf3+0x8>
 894:	ba 17       	cp	r27, r26
 896:	62 07       	cpc	r22, r18
 898:	73 07       	cpc	r23, r19
 89a:	84 07       	cpc	r24, r20
 89c:	95 07       	cpc	r25, r21
 89e:	18 f0       	brcs	.+6      	; 0x8a6 <__addsf3x+0x18>
 8a0:	71 f4       	brne	.+28     	; 0x8be <__addsf3x+0x30>
 8a2:	9e f5       	brtc	.+102    	; 0x90a <__addsf3x+0x7c>
 8a4:	ff c0       	rjmp	.+510    	; 0xaa4 <__fp_zero>
 8a6:	0e f4       	brtc	.+2      	; 0x8aa <__addsf3x+0x1c>
 8a8:	e0 95       	com	r30
 8aa:	0b 2e       	mov	r0, r27
 8ac:	ba 2f       	mov	r27, r26
 8ae:	a0 2d       	mov	r26, r0
 8b0:	0b 01       	movw	r0, r22
 8b2:	b9 01       	movw	r22, r18
 8b4:	90 01       	movw	r18, r0
 8b6:	0c 01       	movw	r0, r24
 8b8:	ca 01       	movw	r24, r20
 8ba:	a0 01       	movw	r20, r0
 8bc:	11 24       	eor	r1, r1
 8be:	ff 27       	eor	r31, r31
 8c0:	59 1b       	sub	r21, r25
 8c2:	99 f0       	breq	.+38     	; 0x8ea <__addsf3x+0x5c>
 8c4:	59 3f       	cpi	r21, 0xF9	; 249
 8c6:	50 f4       	brcc	.+20     	; 0x8dc <__addsf3x+0x4e>
 8c8:	50 3e       	cpi	r21, 0xE0	; 224
 8ca:	68 f1       	brcs	.+90     	; 0x926 <__addsf3x+0x98>
 8cc:	1a 16       	cp	r1, r26
 8ce:	f0 40       	sbci	r31, 0x00	; 0
 8d0:	a2 2f       	mov	r26, r18
 8d2:	23 2f       	mov	r18, r19
 8d4:	34 2f       	mov	r19, r20
 8d6:	44 27       	eor	r20, r20
 8d8:	58 5f       	subi	r21, 0xF8	; 248
 8da:	f3 cf       	rjmp	.-26     	; 0x8c2 <__addsf3x+0x34>
 8dc:	46 95       	lsr	r20
 8de:	37 95       	ror	r19
 8e0:	27 95       	ror	r18
 8e2:	a7 95       	ror	r26
 8e4:	f0 40       	sbci	r31, 0x00	; 0
 8e6:	53 95       	inc	r21
 8e8:	c9 f7       	brne	.-14     	; 0x8dc <__addsf3x+0x4e>
 8ea:	7e f4       	brtc	.+30     	; 0x90a <__addsf3x+0x7c>
 8ec:	1f 16       	cp	r1, r31
 8ee:	ba 0b       	sbc	r27, r26
 8f0:	62 0b       	sbc	r22, r18
 8f2:	73 0b       	sbc	r23, r19
 8f4:	84 0b       	sbc	r24, r20
 8f6:	ba f0       	brmi	.+46     	; 0x926 <__addsf3x+0x98>
 8f8:	91 50       	subi	r25, 0x01	; 1
 8fa:	a1 f0       	breq	.+40     	; 0x924 <__addsf3x+0x96>
 8fc:	ff 0f       	add	r31, r31
 8fe:	bb 1f       	adc	r27, r27
 900:	66 1f       	adc	r22, r22
 902:	77 1f       	adc	r23, r23
 904:	88 1f       	adc	r24, r24
 906:	c2 f7       	brpl	.-16     	; 0x8f8 <__addsf3x+0x6a>
 908:	0e c0       	rjmp	.+28     	; 0x926 <__addsf3x+0x98>
 90a:	ba 0f       	add	r27, r26
 90c:	62 1f       	adc	r22, r18
 90e:	73 1f       	adc	r23, r19
 910:	84 1f       	adc	r24, r20
 912:	48 f4       	brcc	.+18     	; 0x926 <__addsf3x+0x98>
 914:	87 95       	ror	r24
 916:	77 95       	ror	r23
 918:	67 95       	ror	r22
 91a:	b7 95       	ror	r27
 91c:	f7 95       	ror	r31
 91e:	9e 3f       	cpi	r25, 0xFE	; 254
 920:	08 f0       	brcs	.+2      	; 0x924 <__addsf3x+0x96>
 922:	b3 cf       	rjmp	.-154    	; 0x88a <__addsf3+0x1e>
 924:	93 95       	inc	r25
 926:	88 0f       	add	r24, r24
 928:	08 f0       	brcs	.+2      	; 0x92c <__addsf3x+0x9e>
 92a:	99 27       	eor	r25, r25
 92c:	ee 0f       	add	r30, r30
 92e:	97 95       	ror	r25
 930:	87 95       	ror	r24
 932:	08 95       	ret

00000934 <__fixsfsi>:
 934:	04 d0       	rcall	.+8      	; 0x93e <__fixunssfsi>
 936:	68 94       	set
 938:	b1 11       	cpse	r27, r1
 93a:	b5 c0       	rjmp	.+362    	; 0xaa6 <__fp_szero>
 93c:	08 95       	ret

0000093e <__fixunssfsi>:
 93e:	98 d0       	rcall	.+304    	; 0xa70 <__fp_splitA>
 940:	88 f0       	brcs	.+34     	; 0x964 <__fixunssfsi+0x26>
 942:	9f 57       	subi	r25, 0x7F	; 127
 944:	90 f0       	brcs	.+36     	; 0x96a <__fixunssfsi+0x2c>
 946:	b9 2f       	mov	r27, r25
 948:	99 27       	eor	r25, r25
 94a:	b7 51       	subi	r27, 0x17	; 23
 94c:	a0 f0       	brcs	.+40     	; 0x976 <__fixunssfsi+0x38>
 94e:	d1 f0       	breq	.+52     	; 0x984 <__fixunssfsi+0x46>
 950:	66 0f       	add	r22, r22
 952:	77 1f       	adc	r23, r23
 954:	88 1f       	adc	r24, r24
 956:	99 1f       	adc	r25, r25
 958:	1a f0       	brmi	.+6      	; 0x960 <__fixunssfsi+0x22>
 95a:	ba 95       	dec	r27
 95c:	c9 f7       	brne	.-14     	; 0x950 <__fixunssfsi+0x12>
 95e:	12 c0       	rjmp	.+36     	; 0x984 <__fixunssfsi+0x46>
 960:	b1 30       	cpi	r27, 0x01	; 1
 962:	81 f0       	breq	.+32     	; 0x984 <__fixunssfsi+0x46>
 964:	9f d0       	rcall	.+318    	; 0xaa4 <__fp_zero>
 966:	b1 e0       	ldi	r27, 0x01	; 1
 968:	08 95       	ret
 96a:	9c c0       	rjmp	.+312    	; 0xaa4 <__fp_zero>
 96c:	67 2f       	mov	r22, r23
 96e:	78 2f       	mov	r23, r24
 970:	88 27       	eor	r24, r24
 972:	b8 5f       	subi	r27, 0xF8	; 248
 974:	39 f0       	breq	.+14     	; 0x984 <__fixunssfsi+0x46>
 976:	b9 3f       	cpi	r27, 0xF9	; 249
 978:	cc f3       	brlt	.-14     	; 0x96c <__fixunssfsi+0x2e>
 97a:	86 95       	lsr	r24
 97c:	77 95       	ror	r23
 97e:	67 95       	ror	r22
 980:	b3 95       	inc	r27
 982:	d9 f7       	brne	.-10     	; 0x97a <__fixunssfsi+0x3c>
 984:	3e f4       	brtc	.+14     	; 0x994 <__fixunssfsi+0x56>
 986:	90 95       	com	r25
 988:	80 95       	com	r24
 98a:	70 95       	com	r23
 98c:	61 95       	neg	r22
 98e:	7f 4f       	sbci	r23, 0xFF	; 255
 990:	8f 4f       	sbci	r24, 0xFF	; 255
 992:	9f 4f       	sbci	r25, 0xFF	; 255
 994:	08 95       	ret

00000996 <__floatunsisf>:
 996:	e8 94       	clt
 998:	09 c0       	rjmp	.+18     	; 0x9ac <__floatsisf+0x12>

0000099a <__floatsisf>:
 99a:	97 fb       	bst	r25, 7
 99c:	3e f4       	brtc	.+14     	; 0x9ac <__floatsisf+0x12>
 99e:	90 95       	com	r25
 9a0:	80 95       	com	r24
 9a2:	70 95       	com	r23
 9a4:	61 95       	neg	r22
 9a6:	7f 4f       	sbci	r23, 0xFF	; 255
 9a8:	8f 4f       	sbci	r24, 0xFF	; 255
 9aa:	9f 4f       	sbci	r25, 0xFF	; 255
 9ac:	99 23       	and	r25, r25
 9ae:	a9 f0       	breq	.+42     	; 0x9da <__floatsisf+0x40>
 9b0:	f9 2f       	mov	r31, r25
 9b2:	96 e9       	ldi	r25, 0x96	; 150
 9b4:	bb 27       	eor	r27, r27
 9b6:	93 95       	inc	r25
 9b8:	f6 95       	lsr	r31
 9ba:	87 95       	ror	r24
 9bc:	77 95       	ror	r23
 9be:	67 95       	ror	r22
 9c0:	b7 95       	ror	r27
 9c2:	f1 11       	cpse	r31, r1
 9c4:	f8 cf       	rjmp	.-16     	; 0x9b6 <__floatsisf+0x1c>
 9c6:	fa f4       	brpl	.+62     	; 0xa06 <__floatsisf+0x6c>
 9c8:	bb 0f       	add	r27, r27
 9ca:	11 f4       	brne	.+4      	; 0x9d0 <__floatsisf+0x36>
 9cc:	60 ff       	sbrs	r22, 0
 9ce:	1b c0       	rjmp	.+54     	; 0xa06 <__floatsisf+0x6c>
 9d0:	6f 5f       	subi	r22, 0xFF	; 255
 9d2:	7f 4f       	sbci	r23, 0xFF	; 255
 9d4:	8f 4f       	sbci	r24, 0xFF	; 255
 9d6:	9f 4f       	sbci	r25, 0xFF	; 255
 9d8:	16 c0       	rjmp	.+44     	; 0xa06 <__floatsisf+0x6c>
 9da:	88 23       	and	r24, r24
 9dc:	11 f0       	breq	.+4      	; 0x9e2 <__floatsisf+0x48>
 9de:	96 e9       	ldi	r25, 0x96	; 150
 9e0:	11 c0       	rjmp	.+34     	; 0xa04 <__floatsisf+0x6a>
 9e2:	77 23       	and	r23, r23
 9e4:	21 f0       	breq	.+8      	; 0x9ee <__floatsisf+0x54>
 9e6:	9e e8       	ldi	r25, 0x8E	; 142
 9e8:	87 2f       	mov	r24, r23
 9ea:	76 2f       	mov	r23, r22
 9ec:	05 c0       	rjmp	.+10     	; 0x9f8 <__floatsisf+0x5e>
 9ee:	66 23       	and	r22, r22
 9f0:	71 f0       	breq	.+28     	; 0xa0e <__floatsisf+0x74>
 9f2:	96 e8       	ldi	r25, 0x86	; 134
 9f4:	86 2f       	mov	r24, r22
 9f6:	70 e0       	ldi	r23, 0x00	; 0
 9f8:	60 e0       	ldi	r22, 0x00	; 0
 9fa:	2a f0       	brmi	.+10     	; 0xa06 <__floatsisf+0x6c>
 9fc:	9a 95       	dec	r25
 9fe:	66 0f       	add	r22, r22
 a00:	77 1f       	adc	r23, r23
 a02:	88 1f       	adc	r24, r24
 a04:	da f7       	brpl	.-10     	; 0x9fc <__floatsisf+0x62>
 a06:	88 0f       	add	r24, r24
 a08:	96 95       	lsr	r25
 a0a:	87 95       	ror	r24
 a0c:	97 f9       	bld	r25, 7
 a0e:	08 95       	ret

00000a10 <__fp_inf>:
 a10:	97 f9       	bld	r25, 7
 a12:	9f 67       	ori	r25, 0x7F	; 127
 a14:	80 e8       	ldi	r24, 0x80	; 128
 a16:	70 e0       	ldi	r23, 0x00	; 0
 a18:	60 e0       	ldi	r22, 0x00	; 0
 a1a:	08 95       	ret

00000a1c <__fp_nan>:
 a1c:	9f ef       	ldi	r25, 0xFF	; 255
 a1e:	80 ec       	ldi	r24, 0xC0	; 192
 a20:	08 95       	ret

00000a22 <__fp_pscA>:
 a22:	00 24       	eor	r0, r0
 a24:	0a 94       	dec	r0
 a26:	16 16       	cp	r1, r22
 a28:	17 06       	cpc	r1, r23
 a2a:	18 06       	cpc	r1, r24
 a2c:	09 06       	cpc	r0, r25
 a2e:	08 95       	ret

00000a30 <__fp_pscB>:
 a30:	00 24       	eor	r0, r0
 a32:	0a 94       	dec	r0
 a34:	12 16       	cp	r1, r18
 a36:	13 06       	cpc	r1, r19
 a38:	14 06       	cpc	r1, r20
 a3a:	05 06       	cpc	r0, r21
 a3c:	08 95       	ret

00000a3e <__fp_round>:
 a3e:	09 2e       	mov	r0, r25
 a40:	03 94       	inc	r0
 a42:	00 0c       	add	r0, r0
 a44:	11 f4       	brne	.+4      	; 0xa4a <__fp_round+0xc>
 a46:	88 23       	and	r24, r24
 a48:	52 f0       	brmi	.+20     	; 0xa5e <__fp_round+0x20>
 a4a:	bb 0f       	add	r27, r27
 a4c:	40 f4       	brcc	.+16     	; 0xa5e <__fp_round+0x20>
 a4e:	bf 2b       	or	r27, r31
 a50:	11 f4       	brne	.+4      	; 0xa56 <__fp_round+0x18>
 a52:	60 ff       	sbrs	r22, 0
 a54:	04 c0       	rjmp	.+8      	; 0xa5e <__fp_round+0x20>
 a56:	6f 5f       	subi	r22, 0xFF	; 255
 a58:	7f 4f       	sbci	r23, 0xFF	; 255
 a5a:	8f 4f       	sbci	r24, 0xFF	; 255
 a5c:	9f 4f       	sbci	r25, 0xFF	; 255
 a5e:	08 95       	ret

00000a60 <__fp_split3>:
 a60:	57 fd       	sbrc	r21, 7
 a62:	90 58       	subi	r25, 0x80	; 128
 a64:	44 0f       	add	r20, r20
 a66:	55 1f       	adc	r21, r21
 a68:	59 f0       	breq	.+22     	; 0xa80 <__fp_splitA+0x10>
 a6a:	5f 3f       	cpi	r21, 0xFF	; 255
 a6c:	71 f0       	breq	.+28     	; 0xa8a <__fp_splitA+0x1a>
 a6e:	47 95       	ror	r20

00000a70 <__fp_splitA>:
 a70:	88 0f       	add	r24, r24
 a72:	97 fb       	bst	r25, 7
 a74:	99 1f       	adc	r25, r25
 a76:	61 f0       	breq	.+24     	; 0xa90 <__fp_splitA+0x20>
 a78:	9f 3f       	cpi	r25, 0xFF	; 255
 a7a:	79 f0       	breq	.+30     	; 0xa9a <__fp_splitA+0x2a>
 a7c:	87 95       	ror	r24
 a7e:	08 95       	ret
 a80:	12 16       	cp	r1, r18
 a82:	13 06       	cpc	r1, r19
 a84:	14 06       	cpc	r1, r20
 a86:	55 1f       	adc	r21, r21
 a88:	f2 cf       	rjmp	.-28     	; 0xa6e <__fp_split3+0xe>
 a8a:	46 95       	lsr	r20
 a8c:	f1 df       	rcall	.-30     	; 0xa70 <__fp_splitA>
 a8e:	08 c0       	rjmp	.+16     	; 0xaa0 <__fp_splitA+0x30>
 a90:	16 16       	cp	r1, r22
 a92:	17 06       	cpc	r1, r23
 a94:	18 06       	cpc	r1, r24
 a96:	99 1f       	adc	r25, r25
 a98:	f1 cf       	rjmp	.-30     	; 0xa7c <__fp_splitA+0xc>
 a9a:	86 95       	lsr	r24
 a9c:	71 05       	cpc	r23, r1
 a9e:	61 05       	cpc	r22, r1
 aa0:	08 94       	sec
 aa2:	08 95       	ret

00000aa4 <__fp_zero>:
 aa4:	e8 94       	clt

00000aa6 <__fp_szero>:
 aa6:	bb 27       	eor	r27, r27
 aa8:	66 27       	eor	r22, r22
 aaa:	77 27       	eor	r23, r23
 aac:	cb 01       	movw	r24, r22
 aae:	97 f9       	bld	r25, 7
 ab0:	08 95       	ret

00000ab2 <__mulsf3>:
 ab2:	0b d0       	rcall	.+22     	; 0xaca <__mulsf3x>
 ab4:	c4 cf       	rjmp	.-120    	; 0xa3e <__fp_round>
 ab6:	b5 df       	rcall	.-150    	; 0xa22 <__fp_pscA>
 ab8:	28 f0       	brcs	.+10     	; 0xac4 <__mulsf3+0x12>
 aba:	ba df       	rcall	.-140    	; 0xa30 <__fp_pscB>
 abc:	18 f0       	brcs	.+6      	; 0xac4 <__mulsf3+0x12>
 abe:	95 23       	and	r25, r21
 ac0:	09 f0       	breq	.+2      	; 0xac4 <__mulsf3+0x12>
 ac2:	a6 cf       	rjmp	.-180    	; 0xa10 <__fp_inf>
 ac4:	ab cf       	rjmp	.-170    	; 0xa1c <__fp_nan>
 ac6:	11 24       	eor	r1, r1
 ac8:	ee cf       	rjmp	.-36     	; 0xaa6 <__fp_szero>

00000aca <__mulsf3x>:
 aca:	ca df       	rcall	.-108    	; 0xa60 <__fp_split3>
 acc:	a0 f3       	brcs	.-24     	; 0xab6 <__mulsf3+0x4>

00000ace <__mulsf3_pse>:
 ace:	95 9f       	mul	r25, r21
 ad0:	d1 f3       	breq	.-12     	; 0xac6 <__mulsf3+0x14>
 ad2:	95 0f       	add	r25, r21
 ad4:	50 e0       	ldi	r21, 0x00	; 0
 ad6:	55 1f       	adc	r21, r21
 ad8:	62 9f       	mul	r22, r18
 ada:	f0 01       	movw	r30, r0
 adc:	72 9f       	mul	r23, r18
 ade:	bb 27       	eor	r27, r27
 ae0:	f0 0d       	add	r31, r0
 ae2:	b1 1d       	adc	r27, r1
 ae4:	63 9f       	mul	r22, r19
 ae6:	aa 27       	eor	r26, r26
 ae8:	f0 0d       	add	r31, r0
 aea:	b1 1d       	adc	r27, r1
 aec:	aa 1f       	adc	r26, r26
 aee:	64 9f       	mul	r22, r20
 af0:	66 27       	eor	r22, r22
 af2:	b0 0d       	add	r27, r0
 af4:	a1 1d       	adc	r26, r1
 af6:	66 1f       	adc	r22, r22
 af8:	82 9f       	mul	r24, r18
 afa:	22 27       	eor	r18, r18
 afc:	b0 0d       	add	r27, r0
 afe:	a1 1d       	adc	r26, r1
 b00:	62 1f       	adc	r22, r18
 b02:	73 9f       	mul	r23, r19
 b04:	b0 0d       	add	r27, r0
 b06:	a1 1d       	adc	r26, r1
 b08:	62 1f       	adc	r22, r18
 b0a:	83 9f       	mul	r24, r19
 b0c:	a0 0d       	add	r26, r0
 b0e:	61 1d       	adc	r22, r1
 b10:	22 1f       	adc	r18, r18
 b12:	74 9f       	mul	r23, r20
 b14:	33 27       	eor	r19, r19
 b16:	a0 0d       	add	r26, r0
 b18:	61 1d       	adc	r22, r1
 b1a:	23 1f       	adc	r18, r19
 b1c:	84 9f       	mul	r24, r20
 b1e:	60 0d       	add	r22, r0
 b20:	21 1d       	adc	r18, r1
 b22:	82 2f       	mov	r24, r18
 b24:	76 2f       	mov	r23, r22
 b26:	6a 2f       	mov	r22, r26
 b28:	11 24       	eor	r1, r1
 b2a:	9f 57       	subi	r25, 0x7F	; 127
 b2c:	50 40       	sbci	r21, 0x00	; 0
 b2e:	8a f0       	brmi	.+34     	; 0xb52 <__mulsf3_pse+0x84>
 b30:	e1 f0       	breq	.+56     	; 0xb6a <__mulsf3_pse+0x9c>
 b32:	88 23       	and	r24, r24
 b34:	4a f0       	brmi	.+18     	; 0xb48 <__mulsf3_pse+0x7a>
 b36:	ee 0f       	add	r30, r30
 b38:	ff 1f       	adc	r31, r31
 b3a:	bb 1f       	adc	r27, r27
 b3c:	66 1f       	adc	r22, r22
 b3e:	77 1f       	adc	r23, r23
 b40:	88 1f       	adc	r24, r24
 b42:	91 50       	subi	r25, 0x01	; 1
 b44:	50 40       	sbci	r21, 0x00	; 0
 b46:	a9 f7       	brne	.-22     	; 0xb32 <__mulsf3_pse+0x64>
 b48:	9e 3f       	cpi	r25, 0xFE	; 254
 b4a:	51 05       	cpc	r21, r1
 b4c:	70 f0       	brcs	.+28     	; 0xb6a <__mulsf3_pse+0x9c>
 b4e:	60 cf       	rjmp	.-320    	; 0xa10 <__fp_inf>
 b50:	aa cf       	rjmp	.-172    	; 0xaa6 <__fp_szero>
 b52:	5f 3f       	cpi	r21, 0xFF	; 255
 b54:	ec f3       	brlt	.-6      	; 0xb50 <__mulsf3_pse+0x82>
 b56:	98 3e       	cpi	r25, 0xE8	; 232
 b58:	dc f3       	brlt	.-10     	; 0xb50 <__mulsf3_pse+0x82>
 b5a:	86 95       	lsr	r24
 b5c:	77 95       	ror	r23
 b5e:	67 95       	ror	r22
 b60:	b7 95       	ror	r27
 b62:	f7 95       	ror	r31
 b64:	e7 95       	ror	r30
 b66:	9f 5f       	subi	r25, 0xFF	; 255
 b68:	c1 f7       	brne	.-16     	; 0xb5a <__mulsf3_pse+0x8c>
 b6a:	fe 2b       	or	r31, r30
 b6c:	88 0f       	add	r24, r24
 b6e:	91 1d       	adc	r25, r1
 b70:	96 95       	lsr	r25
 b72:	87 95       	ror	r24
 b74:	97 f9       	bld	r25, 7
 b76:	08 95       	ret

00000b78 <_exit>:
 b78:	f8 94       	cli

00000b7a <__stop_program>:
 b7a:	ff cf       	rjmp	.-2      	; 0xb7a <__stop_program>
