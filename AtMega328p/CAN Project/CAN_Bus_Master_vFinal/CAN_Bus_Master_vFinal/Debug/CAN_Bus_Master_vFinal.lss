
CAN_Bus_Master_vFinal.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000136  00800200  00000dec  00000e80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000dec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000010a  00800336  00800336  00000fb6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000fb6  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000188  00000000  00000000  00000fe6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001ec1  00000000  00000000  0000116e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000843  00000000  00000000  0000302f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001276  00000000  00000000  00003872  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003dc  00000000  00000000  00004ae8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000636  00000000  00000000  00004ec4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c93  00000000  00000000  000054fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000160  00000000  00000000  0000618d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	8a c0       	rjmp	.+276    	; 0x172 <__vector_23>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	e8 c4       	rjmp	.+2512   	; 0xa36 <__vector_25>
  66:	00 00       	nop
  68:	0a c5       	rjmp	.+2580   	; 0xa7e <__vector_26>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	57 c0       	rjmp	.+174    	; 0x124 <__vector_29>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	13 e0       	ldi	r17, 0x03	; 3
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ec ee       	ldi	r30, 0xEC	; 236
  fc:	fd e0       	ldi	r31, 0x0D	; 13
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a6 33       	cpi	r26, 0x36	; 54
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	24 e0       	ldi	r18, 0x04	; 4
 110:	a6 e3       	ldi	r26, 0x36	; 54
 112:	b3 e0       	ldi	r27, 0x03	; 3
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a0 34       	cpi	r26, 0x40	; 64
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	0b d1       	rcall	.+534    	; 0x336 <main>
 120:	63 c6       	rjmp	.+3270   	; 0xde8 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <__vector_29>:

/* Variable that holds the button's value when is pressed and debounced */
volatile uint8_t button_down;

ISR(ADC_vect)
{
 124:	1f 92       	push	r1
 126:	0f 92       	push	r0
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	0f 92       	push	r0
 12c:	11 24       	eor	r1, r1
 12e:	0b b6       	in	r0, 0x3b	; 59
 130:	0f 92       	push	r0
 132:	2f 93       	push	r18
 134:	8f 93       	push	r24
 136:	9f 93       	push	r25
 138:	ef 93       	push	r30
 13a:	ff 93       	push	r31
	/* Variable that holds the first 8 bits of the 10 bits ADC resolution */\
	uint8_t adclReg = ADCL;
 13c:	80 91 78 00 	lds	r24, 0x0078
	/* ADCL starts with the first 8 bits of final 10 bits, then ADCH 2 remaining bits
	will be left shifted 8 positions to the left */
	adcResult = (ADCH << 8) | adclReg;
 140:	20 91 79 00 	lds	r18, 0x0079
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	92 2b       	or	r25, r18
 148:	90 93 39 03 	sts	0x0339, r25
 14c:	80 93 38 03 	sts	0x0338, r24
	/* Start single conversion */
	ADCSRA |= (1 << ADSC);
 150:	ea e7       	ldi	r30, 0x7A	; 122
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	80 81       	ld	r24, Z
 156:	80 64       	ori	r24, 0x40	; 64
 158:	80 83       	st	Z, r24
}
 15a:	ff 91       	pop	r31
 15c:	ef 91       	pop	r30
 15e:	9f 91       	pop	r25
 160:	8f 91       	pop	r24
 162:	2f 91       	pop	r18
 164:	0f 90       	pop	r0
 166:	0b be       	out	0x3b, r0	; 59
 168:	0f 90       	pop	r0
 16a:	0f be       	out	0x3f, r0	; 63
 16c:	0f 90       	pop	r0
 16e:	1f 90       	pop	r1
 170:	18 95       	reti

00000172 <__vector_23>:
   600ms - 587.52ms = 12.48ms
   To achieve a delay of 12.48ms, we will have 12.48ms / 0.064ms = 195 ticks */
/************************************************************************/

ISR(TIMER0_OVF_vect)
{
 172:	1f 92       	push	r1
 174:	0f 92       	push	r0
 176:	0f b6       	in	r0, 0x3f	; 63
 178:	0f 92       	push	r0
 17a:	11 24       	eor	r1, r1
 17c:	8f 93       	push	r24
	/* Keep the number of overflows */
	totalOverflows++;
 17e:	80 91 3e 04 	lds	r24, 0x043E
 182:	8f 5f       	subi	r24, 0xFF	; 255
 184:	80 93 3e 04 	sts	0x043E, r24
}
 188:	8f 91       	pop	r24
 18a:	0f 90       	pop	r0
 18c:	0f be       	out	0x3f, r0	; 63
 18e:	0f 90       	pop	r0
 190:	1f 90       	pop	r1
 192:	18 95       	reti

00000194 <spi_init>:
}

void spi_init()
{
	/* Set MOSI, SCK and SS as outputs */
	DDRB |= (1 << PB2) | (1 << PB1) | (1 << PB0);
 194:	84 b1       	in	r24, 0x04	; 4
 196:	87 60       	ori	r24, 0x07	; 7
 198:	84 b9       	out	0x04, r24	; 4
 19a:	08 95       	ret

0000019c <mcp2515_init_and_test>:
}

void mcp2515_init_and_test()
{
 19c:	cf 93       	push	r28
 19e:	df 93       	push	r29
 1a0:	cd b7       	in	r28, 0x3d	; 61
 1a2:	de b7       	in	r29, 0x3e	; 62
 1a4:	2b 97       	sbiw	r28, 0x0b	; 11
 1a6:	0f b6       	in	r0, 0x3f	; 63
 1a8:	f8 94       	cli
 1aa:	de bf       	out	0x3e, r29	; 62
 1ac:	0f be       	out	0x3f, r0	; 63
 1ae:	cd bf       	out	0x3d, r28	; 61
	if(!mcp2515_init())
 1b0:	7f d3       	rcall	.+1790   	; 0x8b0 <mcp2515_init>
 1b2:	81 11       	cpse	r24, r1
 1b4:	0c c0       	rjmp	.+24     	; 0x1ce <mcp2515_init_and_test+0x32>
	{
		/* LCD clear screen */
		lcd_clrscr();
 1b6:	f2 d2       	rcall	.+1508   	; 0x79c <lcd_clrscr>
		/* Set cursor on line 1 */
		lcd_home();
 1b8:	f4 d2       	rcall	.+1512   	; 0x7a2 <lcd_home>
		lcd_puts("Error: CAN Bus");
 1ba:	80 e0       	ldi	r24, 0x00	; 0
 1bc:	92 e0       	ldi	r25, 0x02	; 2
 1be:	00 d3       	rcall	.+1536   	; 0x7c0 <lcd_puts>
		/* Set cursor on line 2 */
		lcd_gotoxy(0, 1);
 1c0:	61 e0       	ldi	r22, 0x01	; 1
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	e3 d2       	rcall	.+1478   	; 0x78c <lcd_gotoxy>
		lcd_puts("not initialized!");
 1c6:	8f e0       	ldi	r24, 0x0F	; 15
 1c8:	92 e0       	ldi	r25, 0x02	; 2
 1ca:	fa d2       	rcall	.+1524   	; 0x7c0 <lcd_puts>
 1cc:	0e c0       	rjmp	.+28     	; 0x1ea <mcp2515_init_and_test+0x4e>
	}
	else
	{
		/* LCD clear screen */
		lcd_clrscr();
 1ce:	e6 d2       	rcall	.+1484   	; 0x79c <lcd_clrscr>
		/* Set cursor on line 1 */
		lcd_home();
 1d0:	e8 d2       	rcall	.+1488   	; 0x7a2 <lcd_home>
		lcd_gotoxy(5, 0);
 1d2:	60 e0       	ldi	r22, 0x00	; 0
 1d4:	85 e0       	ldi	r24, 0x05	; 5
 1d6:	da d2       	rcall	.+1460   	; 0x78c <lcd_gotoxy>
		lcd_puts("CAN Bus");
 1d8:	87 e0       	ldi	r24, 0x07	; 7
 1da:	92 e0       	ldi	r25, 0x02	; 2
 1dc:	f1 d2       	rcall	.+1506   	; 0x7c0 <lcd_puts>
		/* Set cursor on line 2 */
		lcd_gotoxy(2, 1);
 1de:	61 e0       	ldi	r22, 0x01	; 1
 1e0:	82 e0       	ldi	r24, 0x02	; 2
 1e2:	d4 d2       	rcall	.+1448   	; 0x78c <lcd_gotoxy>
		lcd_puts("initialized!");
 1e4:	83 e1       	ldi	r24, 0x13	; 19
 1e6:	92 e0       	ldi	r25, 0x02	; 2
 1e8:	eb d2       	rcall	.+1494   	; 0x7c0 <lcd_puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ea:	2f ef       	ldi	r18, 0xFF	; 255
 1ec:	87 ea       	ldi	r24, 0xA7	; 167
 1ee:	91 e6       	ldi	r25, 0x61	; 97
 1f0:	21 50       	subi	r18, 0x01	; 1
 1f2:	80 40       	sbci	r24, 0x00	; 0
 1f4:	90 40       	sbci	r25, 0x00	; 0
 1f6:	e1 f7       	brne	.-8      	; 0x1f0 <mcp2515_init_and_test+0x54>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <mcp2515_init_and_test+0x5e>
 1fa:	00 00       	nop
	
	_delay_ms(2000);
	
	/* Test message used only to test the MCP2515 module */
	tCAN testTXRX;
	testTXRX.id = 0x123;
 1fc:	83 e2       	ldi	r24, 0x23	; 35
 1fe:	91 e0       	ldi	r25, 0x01	; 1
 200:	9a 83       	std	Y+2, r25	; 0x02
 202:	89 83       	std	Y+1, r24	; 0x01
	testTXRX.header.rtr = 0;
 204:	8b 81       	ldd	r24, Y+3	; 0x03
	testTXRX.header.length = 2;
 206:	80 7e       	andi	r24, 0xE0	; 224
 208:	84 60       	ori	r24, 0x04	; 4
 20a:	8b 83       	std	Y+3, r24	; 0x03
	testTXRX.data[0] = 0xFF;
 20c:	8f ef       	ldi	r24, 0xFF	; 255
 20e:	8c 83       	std	Y+4, r24	; 0x04
	testTXRX.data[1] = 0xFF;
 210:	8d 83       	std	Y+5, r24	; 0x05
	
	/* Switch to Loopback Mode to test the MCP2515 module */
	mcp2515_bit_modify(CANCTRL, (1 << REQOP2) | (1 << REQOP1) | (1 << REQOP0), (1 << REQOP1));
 212:	40 e4       	ldi	r20, 0x40	; 64
 214:	60 ee       	ldi	r22, 0xE0	; 224
 216:	8f e0       	ldi	r24, 0x0F	; 15
 218:	31 d3       	rcall	.+1634   	; 0x87c <mcp2515_bit_modify>
	
	/* Send test message */
	if(mcp2515_send_message(&testTXRX))
 21a:	ce 01       	movw	r24, r28
 21c:	01 96       	adiw	r24, 0x01	; 1
 21e:	88 d3       	rcall	.+1808   	; 0x930 <mcp2515_send_message>
 220:	88 23       	and	r24, r24
 222:	61 f0       	breq	.+24     	; 0x23c <mcp2515_init_and_test+0xa0>
	{
		/* LCD clear screen */
		lcd_clrscr();
 224:	bb d2       	rcall	.+1398   	; 0x79c <lcd_clrscr>
		/* Set cursor on line 1 */
		lcd_home();
 226:	bd d2       	rcall	.+1402   	; 0x7a2 <lcd_home>
		lcd_puts("Message writenn");
 228:	80 e2       	ldi	r24, 0x20	; 32
 22a:	92 e0       	ldi	r25, 0x02	; 2
 22c:	c9 d2       	rcall	.+1426   	; 0x7c0 <lcd_puts>
		/* Set cursor on line 2 */
		lcd_gotoxy(4, 1);
 22e:	61 e0       	ldi	r22, 0x01	; 1
 230:	84 e0       	ldi	r24, 0x04	; 4
 232:	ac d2       	rcall	.+1368   	; 0x78c <lcd_gotoxy>
		lcd_puts("to buffer!");
 234:	80 e3       	ldi	r24, 0x30	; 48
 236:	92 e0       	ldi	r25, 0x02	; 2
 238:	c3 d2       	rcall	.+1414   	; 0x7c0 <lcd_puts>
 23a:	0a c0       	rjmp	.+20     	; 0x250 <mcp2515_init_and_test+0xb4>
	}
	else
	{
		/* LCD clear screen */
		lcd_clrscr();
 23c:	af d2       	rcall	.+1374   	; 0x79c <lcd_clrscr>
		/* Set cursor on line 1 */
		lcd_puts("Message not");
 23e:	8b e3       	ldi	r24, 0x3B	; 59
 240:	92 e0       	ldi	r25, 0x02	; 2
 242:	be d2       	rcall	.+1404   	; 0x7c0 <lcd_puts>
		/* Set cursor on line 2 */
		lcd_gotoxy(0, 1);
 244:	61 e0       	ldi	r22, 0x01	; 1
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	a1 d2       	rcall	.+1346   	; 0x78c <lcd_gotoxy>
		lcd_puts("writenn to buffer");
 24a:	87 e4       	ldi	r24, 0x47	; 71
 24c:	92 e0       	ldi	r25, 0x02	; 2
 24e:	b8 d2       	rcall	.+1392   	; 0x7c0 <lcd_puts>
 250:	2f ef       	ldi	r18, 0xFF	; 255
 252:	83 ed       	ldi	r24, 0xD3	; 211
 254:	90 e3       	ldi	r25, 0x30	; 48
 256:	21 50       	subi	r18, 0x01	; 1
 258:	80 40       	sbci	r24, 0x00	; 0
 25a:	90 40       	sbci	r25, 0x00	; 0
 25c:	e1 f7       	brne	.-8      	; 0x256 <mcp2515_init_and_test+0xba>
 25e:	00 c0       	rjmp	.+0      	; 0x260 <mcp2515_init_and_test+0xc4>
 260:	00 00       	nop
	}
	
	_delay_ms(1000);
	
	if(mcp2515_check_message())
 262:	62 d3       	rcall	.+1732   	; 0x928 <mcp2515_check_message>
 264:	88 23       	and	r24, r24
 266:	79 f0       	breq	.+30     	; 0x286 <mcp2515_init_and_test+0xea>
	{
		/* LCD clear screen */
		lcd_clrscr();
 268:	99 d2       	rcall	.+1330   	; 0x79c <lcd_clrscr>
		/* Set cursor on line 1 */
		lcd_home();
 26a:	9b d2       	rcall	.+1334   	; 0x7a2 <lcd_home>
		lcd_puts("Message received");
 26c:	89 e5       	ldi	r24, 0x59	; 89
 26e:	92 e0       	ldi	r25, 0x02	; 2
 270:	a7 d2       	rcall	.+1358   	; 0x7c0 <lcd_puts>
 272:	2f ef       	ldi	r18, 0xFF	; 255
 274:	83 ed       	ldi	r24, 0xD3	; 211
 276:	90 e3       	ldi	r25, 0x30	; 48
 278:	21 50       	subi	r18, 0x01	; 1
 27a:	80 40       	sbci	r24, 0x00	; 0
 27c:	90 40       	sbci	r25, 0x00	; 0
 27e:	e1 f7       	brne	.-8      	; 0x278 <mcp2515_init_and_test+0xdc>
 280:	00 c0       	rjmp	.+0      	; 0x282 <mcp2515_init_and_test+0xe6>
 282:	00 00       	nop
 284:	0b c0       	rjmp	.+22     	; 0x29c <mcp2515_init_and_test+0x100>
		_delay_ms(1000);
	}
	else
	{
		/* LCD clear screen */
		lcd_clrscr();
 286:	8a d2       	rcall	.+1300   	; 0x79c <lcd_clrscr>
		/* Set cursor on line 1 */
		lcd_home();
 288:	8c d2       	rcall	.+1304   	; 0x7a2 <lcd_home>
		lcd_puts("Message not");
 28a:	8b e3       	ldi	r24, 0x3B	; 59
 28c:	92 e0       	ldi	r25, 0x02	; 2
 28e:	98 d2       	rcall	.+1328   	; 0x7c0 <lcd_puts>
		/* Set cursor on line 2 */
		lcd_gotoxy(4, 0);
 290:	60 e0       	ldi	r22, 0x00	; 0
 292:	84 e0       	ldi	r24, 0x04	; 4
 294:	7b d2       	rcall	.+1270   	; 0x78c <lcd_gotoxy>
		lcd_puts("received!");
 296:	8a e6       	ldi	r24, 0x6A	; 106
 298:	92 e0       	ldi	r25, 0x02	; 2
 29a:	92 d2       	rcall	.+1316   	; 0x7c0 <lcd_puts>
	}
}
 29c:	2b 96       	adiw	r28, 0x0b	; 11
 29e:	0f b6       	in	r0, 0x3f	; 63
 2a0:	f8 94       	cli
 2a2:	de bf       	out	0x3e, r29	; 62
 2a4:	0f be       	out	0x3f, r0	; 63
 2a6:	cd bf       	out	0x3d, r28	; 61
 2a8:	df 91       	pop	r29
 2aa:	cf 91       	pop	r28
 2ac:	08 95       	ret

000002ae <mcp2515_normal_mode>:

void mcp2515_normal_mode()
{
	/* Switch the MCP2515 module to normal mode */
	mcp2515_bit_modify(CANCTRL, (1 << REQOP2) | (1 << REQOP1) | (1 << REQOP0), 0);
 2ae:	40 e0       	ldi	r20, 0x00	; 0
 2b0:	60 ee       	ldi	r22, 0xE0	; 224
 2b2:	8f e0       	ldi	r24, 0x0F	; 15
 2b4:	e3 d2       	rcall	.+1478   	; 0x87c <mcp2515_bit_modify>
	lcd_clrscr();
 2b6:	72 d2       	rcall	.+1252   	; 0x79c <lcd_clrscr>
	lcd_home();
 2b8:	74 d2       	rcall	.+1256   	; 0x7a2 <lcd_home>
	lcd_puts("CANBusNormalMode");
 2ba:	84 e7       	ldi	r24, 0x74	; 116
 2bc:	92 e0       	ldi	r25, 0x02	; 2
 2be:	80 d2       	rcall	.+1280   	; 0x7c0 <lcd_puts>
 2c0:	2f ef       	ldi	r18, 0xFF	; 255
 2c2:	83 ed       	ldi	r24, 0xD3	; 211
 2c4:	90 e3       	ldi	r25, 0x30	; 48
 2c6:	21 50       	subi	r18, 0x01	; 1
 2c8:	80 40       	sbci	r24, 0x00	; 0
 2ca:	90 40       	sbci	r25, 0x00	; 0
 2cc:	e1 f7       	brne	.-8      	; 0x2c6 <mcp2515_normal_mode+0x18>
 2ce:	00 c0       	rjmp	.+0      	; 0x2d0 <mcp2515_normal_mode+0x22>
 2d0:	00 00       	nop
 2d2:	08 95       	ret

000002d4 <timer0_init>:
}

void timer0_init()
{
	/* Set up Timer0 with Prescaler = 1024 */
	TCCR0B |= (1 << CS02) | (1 << CS00);
 2d4:	85 b5       	in	r24, 0x25	; 37
 2d6:	85 60       	ori	r24, 0x05	; 5
 2d8:	85 bd       	out	0x25, r24	; 37
	/* Initialize counter */
	TCNT0 = 0;
 2da:	16 bc       	out	0x26, r1	; 38
	/* Enable overflow interrupt */
	TIMSK0 |= (1 << TOIE0);
 2dc:	ee e6       	ldi	r30, 0x6E	; 110
 2de:	f0 e0       	ldi	r31, 0x00	; 0
 2e0:	80 81       	ld	r24, Z
 2e2:	81 60       	ori	r24, 0x01	; 1
 2e4:	80 83       	st	Z, r24
	/* Initialize overflows counter */
	totalOverflows = 0;
 2e6:	10 92 3e 04 	sts	0x043E, r1
 2ea:	08 95       	ret

000002ec <timer1_init>:
}

void timer1_init()
{
	/* Clear OC1A on Compare Match */
	TCCR1A |= (1 << COM1A1) | (1 << WGM11);
 2ec:	e0 e8       	ldi	r30, 0x80	; 128
 2ee:	f0 e0       	ldi	r31, 0x00	; 0
 2f0:	80 81       	ld	r24, Z
 2f2:	82 68       	ori	r24, 0x82	; 130
 2f4:	80 83       	st	Z, r24
	/* Fast PWM mode 14 with prescaler of 64 */
	TCCR1B |= (1 << WGM13) | (1 << WGM12) | (1 << CS11) | (1 << CS10);
 2f6:	e1 e8       	ldi	r30, 0x81	; 129
 2f8:	f0 e0       	ldi	r31, 0x00	; 0
 2fa:	80 81       	ld	r24, Z
 2fc:	8b 61       	ori	r24, 0x1B	; 27
 2fe:	80 83       	st	Z, r24
	/* TOP value calculated with Fpwm = Fcpu / (N * (1 + TOP)), N - Prescaler = 64; 4999 for 20ms */
	ICR1 = 4999;
 300:	87 e8       	ldi	r24, 0x87	; 135
 302:	93 e1       	ldi	r25, 0x13	; 19
 304:	90 93 87 00 	sts	0x0087, r25
 308:	80 93 86 00 	sts	0x0086, r24
	
	OCR1A = 250;
 30c:	8a ef       	ldi	r24, 0xFA	; 250
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	90 93 89 00 	sts	0x0089, r25
 314:	80 93 88 00 	sts	0x0088, r24
 318:	08 95       	ret

0000031a <adc_init>:
}

void adc_init()
{
	/* AREF = AVCC, Potentiometer connected on channel 0 (Pin A0) */
	ADMUX |= (1 << REFS0);
 31a:	ec e7       	ldi	r30, 0x7C	; 124
 31c:	f0 e0       	ldi	r31, 0x00	; 0
 31e:	80 81       	ld	r24, Z
 320:	80 64       	ori	r24, 0x40	; 64
 322:	80 83       	st	Z, r24
	/* Enable ADC with a prescaler = 128, 16000000 / 128 = 125 KHz */
	ADCSRA |= (1 << ADEN) | (1 << ADIE) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
 324:	ea e7       	ldi	r30, 0x7A	; 122
 326:	f0 e0       	ldi	r31, 0x00	; 0
 328:	80 81       	ld	r24, Z
 32a:	8f 68       	ori	r24, 0x8F	; 143
 32c:	80 83       	st	Z, r24
	/* Start single conversion */
	ADCSRA |= (1 << ADSC);
 32e:	80 81       	ld	r24, Z
 330:	80 64       	ori	r24, 0x40	; 64
 332:	80 83       	st	Z, r24
 334:	08 95       	ret

00000336 <main>:
	/* Keep the number of overflows */
	totalOverflows++;
}

int main(void)
{
 336:	cf 93       	push	r28
 338:	df 93       	push	r29
 33a:	cd b7       	in	r28, 0x3d	; 61
 33c:	de b7       	in	r29, 0x3e	; 62
 33e:	a1 97       	sbiw	r28, 0x21	; 33
 340:	0f b6       	in	r0, 0x3f	; 63
 342:	f8 94       	cli
 344:	de bf       	out	0x3e, r29	; 62
 346:	0f be       	out	0x3f, r0	; 63
 348:	cd bf       	out	0x3d, r28	; 61
	/* Messages sent through CAN bus (canTX_Signal = left, right and hazard signals,
	   canTX_Brake = brake signal, canTX_Headlight = headlights and servomotors signals */
	tCAN canTX_Signal;
	canTX_Signal.id = 0x1A1;
 34a:	81 ea       	ldi	r24, 0xA1	; 161
 34c:	91 e0       	ldi	r25, 0x01	; 1
 34e:	9a 83       	std	Y+2, r25	; 0x02
 350:	89 83       	std	Y+1, r24	; 0x01
	canTX_Signal.header.rtr = 0;
 352:	8b 81       	ldd	r24, Y+3	; 0x03
	canTX_Signal.header.length = 2;
 354:	80 7e       	andi	r24, 0xE0	; 224
 356:	84 60       	ori	r24, 0x04	; 4
 358:	8b 83       	std	Y+3, r24	; 0x03
	canTX_Signal.data[0] = 0x00;
 35a:	1c 82       	std	Y+4, r1	; 0x04
	canTX_Signal.data[1] = 0x00;
 35c:	1d 82       	std	Y+5, r1	; 0x05
	
	tCAN canTX_Brake;
	canTX_Brake.id = 0xC9;
 35e:	89 ec       	ldi	r24, 0xC9	; 201
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	9d 87       	std	Y+13, r25	; 0x0d
 364:	8c 87       	std	Y+12, r24	; 0x0c
	canTX_Brake.header.rtr = 0;
 366:	8e 85       	ldd	r24, Y+14	; 0x0e
	canTX_Brake.header.length = 2;
 368:	80 7e       	andi	r24, 0xE0	; 224
 36a:	84 60       	ori	r24, 0x04	; 4
 36c:	8e 87       	std	Y+14, r24	; 0x0e
	canTX_Brake.data[0] = 0x00;
 36e:	1f 86       	std	Y+15, r1	; 0x0f
	canTX_Brake.data[1] = 0x00;
 370:	18 8a       	std	Y+16, r1	; 0x10
	
	tCAN canTX_Headlight;
	canTX_Headlight.id = 0x258;
 372:	88 e5       	ldi	r24, 0x58	; 88
 374:	92 e0       	ldi	r25, 0x02	; 2
 376:	98 8f       	std	Y+24, r25	; 0x18
 378:	8f 8b       	std	Y+23, r24	; 0x17
	canTX_Headlight.header.rtr = 0;
 37a:	89 8d       	ldd	r24, Y+25	; 0x19
	canTX_Headlight.header.length = 2;
 37c:	80 7e       	andi	r24, 0xE0	; 224
 37e:	84 60       	ori	r24, 0x04	; 4
 380:	89 8f       	std	Y+25, r24	; 0x19
	canTX_Headlight.data[0] = 0x00;
 382:	1a 8e       	std	Y+26, r1	; 0x1a
	canTX_Headlight.data[1] = 0x00;
 384:	1b 8e       	std	Y+27, r1	; 0x1b
	
	/* Calculate baudrate */
	USART0_Init(MYUBBR);
 386:	87 e6       	ldi	r24, 0x67	; 103
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	40 d3       	rcall	.+1664   	; 0xa0c <USART0_Init>
	/* Enable global interrupts */
	sei();
 38c:	78 94       	sei
	/* LCD initialization with display ON, cursor OFF */
	lcd_init(LCD_DISP_ON);
 38e:	8c e0       	ldi	r24, 0x0C	; 12
 390:	26 d2       	rcall	.+1100   	; 0x7de <lcd_init>
	/* SPI initialization */
	spi_init();
 392:	00 df       	rcall	.-512    	; 0x194 <spi_init>
	/* MCP2515 initialization and test */
	mcp2515_init_and_test();
 394:	03 df       	rcall	.-506    	; 0x19c <mcp2515_init_and_test>
	/* Set MCP2515 to Normal Mode of operation */
	mcp2515_normal_mode();
 396:	8b df       	rcall	.-234    	; 0x2ae <mcp2515_normal_mode>
	/* Timer0 initialization */
	timer0_init();
 398:	9d df       	rcall	.-198    	; 0x2d4 <timer0_init>
	/* Timer1 initialization */
	timer1_init();
 39a:	a8 df       	rcall	.-176    	; 0x2ec <timer1_init>
	/* ADC initialization */
	adc_init();
 39c:	be df       	rcall	.-132    	; 0x31a <adc_init>
	
	/* Dummy Pin used for toggling, as output */
	DDRE |= LED;
 39e:	6c 9a       	sbi	0x0d, 4	; 13
	
	/* PH4 as input - headlights and servomotors signal */
	DDRH &= ~HEAD_LIGHT;
 3a0:	e1 e0       	ldi	r30, 0x01	; 1
 3a2:	f1 e0       	ldi	r31, 0x01	; 1
 3a4:	80 81       	ld	r24, Z
 3a6:	8f 7e       	andi	r24, 0xEF	; 239
 3a8:	80 83       	st	Z, r24
	/* PB6 as input - left signal */
	DDRB &= ~LEFT_SIGNAL;
 3aa:	26 98       	cbi	0x04, 6	; 4
	/* PB7 as input - right signal */
	DDRB &= ~RIGHT_SIGNAL;
 3ac:	27 98       	cbi	0x04, 7	; 4
	/* PH6 as input - hazard signal */
	DDRH &= ~HAZARD_SIGNAL;
 3ae:	80 81       	ld	r24, Z
 3b0:	8f 7b       	andi	r24, 0xBF	; 191
 3b2:	80 83       	st	Z, r24
	/* PB4 as input - brake light */
	DDRB &= ~BRAKE_LIGHT;
 3b4:	24 98       	cbi	0x04, 4	; 4
	/* Enable pull-up resistor for Pin B4 */
	PORTB |= BRAKE_LIGHT;
 3b6:	2c 9a       	sbi	0x05, 4	; 5
	float ocrMin = 250;
	/* Servomotors 0 degrees direction */
	float ocrMax = 650;
	float ocrResult = (ocrMax - ocrMin) / 1023;
	
	DDRB |= (1 << PB5);
 3b8:	25 9a       	sbi	0x04, 5	; 4
	uint16_t ocr1aResult;
	char ocr1aLCDResult[3];
	char adcLCDResult[4];
	
	/* Clear the LCD before entering the infinite loop */
	lcd_clrscr();
 3ba:	f0 d1       	rcall	.+992    	; 0x79c <lcd_clrscr>
    while(1)
    {
		
		//startingPoint:
        if(PINH & HEAD_LIGHT)
 3bc:	00 e0       	ldi	r16, 0x00	; 0
 3be:	11 e0       	ldi	r17, 0x01	; 1
		{
			canTX_ADC = adcResult / 4;
			canTX_Headlight.data[0] = 0xFF;
 3c0:	cc 24       	eor	r12, r12
 3c2:	ca 94       	dec	r12
			canTX_Headlight.data[1] = canTX_ADC;
			mcp2515_send_message(&canTX_Headlight);
			OCR1A = (int)((ocrResult * adcResult) + 250);
 3c4:	0f 2e       	mov	r0, r31
 3c6:	f8 e8       	ldi	r31, 0x88	; 136
 3c8:	ef 2e       	mov	r14, r31
 3ca:	f1 2c       	mov	r15, r1
 3cc:	f0 2d       	mov	r31, r0
			if(totalOverflows >= 36)
			{
				/* Check if the timer0 counts 195 ticks */
				if(TCNT0 >= 195)
				{
					PORTE ^= LED;
 3ce:	68 94       	set
 3d0:	dd 24       	eor	r13, r13
 3d2:	d4 f8       	bld	r13, 4
						lcd_gotoxy(0, 1);
						lcd_puts("                ");
					}
					else
					{
						canTX_Signal.data[0] = 0x06;
 3d4:	0f 2e       	mov	r0, r31
 3d6:	f6 e0       	ldi	r31, 0x06	; 6
 3d8:	bf 2e       	mov	r11, r31
 3da:	f0 2d       	mov	r31, r0
						lcd_gotoxy(0, 1);
						lcd_puts("                ");
					}
					else
					{
						canTX_Signal.data[0] = 0x02;
 3dc:	68 94       	set
 3de:	99 24       	eor	r9, r9
 3e0:	91 f8       	bld	r9, 1
						lcd_puts("                ");
					}
					else
					{
						//USART_putstring("00");
						canTX_Signal.data[0] = 0x04;
 3e2:	68 94       	set
 3e4:	aa 24       	eor	r10, r10
 3e6:	a2 f8       	bld	r10, 2
	lcd_clrscr();
    while(1)
    {
		
		//startingPoint:
        if(PINH & HEAD_LIGHT)
 3e8:	f8 01       	movw	r30, r16
 3ea:	80 81       	ld	r24, Z
 3ec:	84 ff       	sbrs	r24, 4
 3ee:	44 c0       	rjmp	.+136    	; 0x478 <main+0x142>
		{
			canTX_ADC = adcResult / 4;
 3f0:	80 91 38 03 	lds	r24, 0x0338
 3f4:	90 91 39 03 	lds	r25, 0x0339
			canTX_Headlight.data[0] = 0xFF;
 3f8:	ca 8e       	std	Y+26, r12	; 0x1a
    {
		
		//startingPoint:
        if(PINH & HEAD_LIGHT)
		{
			canTX_ADC = adcResult / 4;
 3fa:	96 95       	lsr	r25
 3fc:	87 95       	ror	r24
 3fe:	96 95       	lsr	r25
 400:	87 95       	ror	r24
 402:	8b 8f       	std	Y+27, r24	; 0x1b
			canTX_Headlight.data[0] = 0xFF;
			canTX_Headlight.data[1] = canTX_ADC;
			mcp2515_send_message(&canTX_Headlight);
 404:	ce 01       	movw	r24, r28
 406:	47 96       	adiw	r24, 0x17	; 23
 408:	93 d2       	rcall	.+1318   	; 0x930 <mcp2515_send_message>
			OCR1A = (int)((ocrResult * adcResult) + 250);
 40a:	60 91 38 03 	lds	r22, 0x0338
 40e:	70 91 39 03 	lds	r23, 0x0339
 412:	80 e0       	ldi	r24, 0x00	; 0
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	f7 d3       	rcall	.+2030   	; 0xc06 <__floatunsisf>
 418:	2d e0       	ldi	r18, 0x0D	; 13
 41a:	32 e3       	ldi	r19, 0x32	; 50
 41c:	48 ec       	ldi	r20, 0xC8	; 200
 41e:	5e e3       	ldi	r21, 0x3E	; 62
 420:	80 d4       	rcall	.+2304   	; 0xd22 <__mulsf3>
 422:	20 e0       	ldi	r18, 0x00	; 0
 424:	30 e0       	ldi	r19, 0x00	; 0
 426:	4a e7       	ldi	r20, 0x7A	; 122
 428:	53 e4       	ldi	r21, 0x43	; 67
 42a:	58 d3       	rcall	.+1712   	; 0xadc <__addsf3>
 42c:	bb d3       	rcall	.+1910   	; 0xba4 <__fixsfsi>
 42e:	f7 01       	movw	r30, r14
 430:	71 83       	std	Z+1, r23	; 0x01
 432:	60 83       	st	Z, r22
			itoa(adcResult / 4, adcLCDResult, 10);
			lcd_gotoxy(0, 1);
			lcd_puts(adcLCDResult);
			lcd_puts("  ");*/
			
			PORTE |= LED;
 434:	74 9a       	sbi	0x0e, 4	; 14
			lcd_gotoxy(0, 0);
 436:	60 e0       	ldi	r22, 0x00	; 0
 438:	80 e0       	ldi	r24, 0x00	; 0
 43a:	a8 d1       	rcall	.+848    	; 0x78c <lcd_gotoxy>
			lcd_puts(" Headlight On!  ");
 43c:	85 e8       	ldi	r24, 0x85	; 133
 43e:	92 e0       	ldi	r25, 0x02	; 2
 440:	bf d1       	rcall	.+894    	; 0x7c0 <lcd_puts>
			
			if(adcResult / 4 <= 127)
 442:	80 91 38 03 	lds	r24, 0x0338
 446:	90 91 39 03 	lds	r25, 0x0339
 44a:	81 15       	cp	r24, r1
 44c:	92 40       	sbci	r25, 0x02	; 2
 44e:	38 f4       	brcc	.+14     	; 0x45e <main+0x128>
			{
				lcd_gotoxy(3, 1);
 450:	61 e0       	ldi	r22, 0x01	; 1
 452:	83 e0       	ldi	r24, 0x03	; 3
 454:	9b d1       	rcall	.+822    	; 0x78c <lcd_gotoxy>
				lcd_puts("Right Turn!");
 456:	86 e9       	ldi	r24, 0x96	; 150
 458:	92 e0       	ldi	r25, 0x02	; 2
 45a:	b2 d1       	rcall	.+868    	; 0x7c0 <lcd_puts>
 45c:	0d c0       	rjmp	.+26     	; 0x478 <main+0x142>
			}
			else if(adcResult / 4 > 128)
 45e:	80 91 38 03 	lds	r24, 0x0338
 462:	90 91 39 03 	lds	r25, 0x0339
 466:	84 30       	cpi	r24, 0x04	; 4
 468:	92 40       	sbci	r25, 0x02	; 2
 46a:	30 f0       	brcs	.+12     	; 0x478 <main+0x142>
			{
				lcd_gotoxy(3, 1);
 46c:	61 e0       	ldi	r22, 0x01	; 1
 46e:	83 e0       	ldi	r24, 0x03	; 3
 470:	8d d1       	rcall	.+794    	; 0x78c <lcd_gotoxy>
				lcd_puts("Left Turn!");
 472:	82 ea       	ldi	r24, 0xA2	; 162
 474:	92 e0       	ldi	r25, 0x02	; 2
 476:	a4 d1       	rcall	.+840    	; 0x7c0 <lcd_puts>
			canTX_Headlight.data[1] = 0x00;
			PORTE &= ~LED;
		}*/
		
		/* Check if the left signal switch is on */
		if(PINB & LEFT_SIGNAL)
 478:	1e 9b       	sbis	0x03, 6	; 3
 47a:	68 c0       	rjmp	.+208    	; 0x54c <main+0x216>
		{
			/* If Hazard switch is on when left switch is on, the Hazard signal is active */
			if(PINH & HAZARD_SIGNAL)
 47c:	f8 01       	movw	r30, r16
 47e:	80 81       	ld	r24, Z
 480:	86 ff       	sbrs	r24, 6
 482:	32 c0       	rjmp	.+100    	; 0x4e8 <main+0x1b2>
			{
				/* Check if the number of overflows is equal with 36 */
				if(totalOverflows >= 36)
 484:	80 91 3e 04 	lds	r24, 0x043E
 488:	84 32       	cpi	r24, 0x24	; 36
 48a:	08 f4       	brcc	.+2      	; 0x48e <main+0x158>
 48c:	fc c0       	rjmp	.+504    	; 0x686 <main+0x350>
				{
					/* Check if the timer0 counts 195 ticks */
					if(TCNT0 >= 195)
 48e:	86 b5       	in	r24, 0x26	; 38
 490:	83 3c       	cpi	r24, 0xC3	; 195
 492:	08 f4       	brcc	.+2      	; 0x496 <main+0x160>
 494:	f8 c0       	rjmp	.+496    	; 0x686 <main+0x350>
					{
						PORTE ^= LED;
 496:	8e b1       	in	r24, 0x0e	; 14
 498:	8d 25       	eor	r24, r13
 49a:	8e b9       	out	0x0e, r24	; 14
						/*  */
						if(!(PINE & LED))
 49c:	64 99       	sbic	0x0c, 4	; 12
 49e:	11 c0       	rjmp	.+34     	; 0x4c2 <main+0x18c>
						{
							canTX_Signal.data[0] = 0x06;
 4a0:	bc 82       	std	Y+4, r11	; 0x04
							canTX_Signal.data[1] = 0x01;
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	8d 83       	std	Y+5, r24	; 0x05
							mcp2515_send_message(&canTX_Signal);
 4a6:	ce 01       	movw	r24, r28
 4a8:	01 96       	adiw	r24, 0x01	; 1
 4aa:	42 d2       	rcall	.+1156   	; 0x930 <mcp2515_send_message>
							/* Set cursor to home position */
							lcd_home();
 4ac:	7a d1       	rcall	.+756    	; 0x7a2 <lcd_home>
							lcd_puts("Hazard Signal On!");
 4ae:	8d ea       	ldi	r24, 0xAD	; 173
 4b0:	92 e0       	ldi	r25, 0x02	; 2
 4b2:	86 d1       	rcall	.+780    	; 0x7c0 <lcd_puts>
							lcd_gotoxy(0, 1);
 4b4:	61 e0       	ldi	r22, 0x01	; 1
 4b6:	80 e0       	ldi	r24, 0x00	; 0
 4b8:	69 d1       	rcall	.+722    	; 0x78c <lcd_gotoxy>
							lcd_puts("                ");
 4ba:	8f eb       	ldi	r24, 0xBF	; 191
 4bc:	92 e0       	ldi	r25, 0x02	; 2
 4be:	80 d1       	rcall	.+768    	; 0x7c0 <lcd_puts>
 4c0:	0f c0       	rjmp	.+30     	; 0x4e0 <main+0x1aa>
						}
						else
						{
							canTX_Signal.data[0] = 0x06;
 4c2:	bc 82       	std	Y+4, r11	; 0x04
							canTX_Signal.data[1] = 0x00;
 4c4:	1d 82       	std	Y+5, r1	; 0x05
							mcp2515_send_message(&canTX_Signal);
 4c6:	ce 01       	movw	r24, r28
 4c8:	01 96       	adiw	r24, 0x01	; 1
 4ca:	32 d2       	rcall	.+1124   	; 0x930 <mcp2515_send_message>
							/* Set cursor to home position */
							lcd_home();
 4cc:	6a d1       	rcall	.+724    	; 0x7a2 <lcd_home>
							lcd_puts("HazardSignal Off");
 4ce:	80 ed       	ldi	r24, 0xD0	; 208
 4d0:	92 e0       	ldi	r25, 0x02	; 2
 4d2:	76 d1       	rcall	.+748    	; 0x7c0 <lcd_puts>
							lcd_gotoxy(0, 1);
 4d4:	61 e0       	ldi	r22, 0x01	; 1
 4d6:	80 e0       	ldi	r24, 0x00	; 0
 4d8:	59 d1       	rcall	.+690    	; 0x78c <lcd_gotoxy>
							lcd_puts("                ");
 4da:	8f eb       	ldi	r24, 0xBF	; 191
 4dc:	92 e0       	ldi	r25, 0x02	; 2
 4de:	70 d1       	rcall	.+736    	; 0x7c0 <lcd_puts>
						}
						/* Reset counter */
						TCNT0 = 0;
 4e0:	16 bc       	out	0x26, r1	; 38
						/* Reset overflows counter */
						totalOverflows = 0;
 4e2:	10 92 3e 04 	sts	0x043E, r1
 4e6:	cf c0       	rjmp	.+414    	; 0x686 <main+0x350>
					}
				}
			}
			/* Check if the number of overflows is equal with 36 */
			else if(totalOverflows >= 36)
 4e8:	80 91 3e 04 	lds	r24, 0x043E
 4ec:	84 32       	cpi	r24, 0x24	; 36
 4ee:	08 f4       	brcc	.+2      	; 0x4f2 <main+0x1bc>
 4f0:	ca c0       	rjmp	.+404    	; 0x686 <main+0x350>
			{
				/* Check if the timer0 counts 195 ticks */
				if(TCNT0 >= 195)
 4f2:	86 b5       	in	r24, 0x26	; 38
 4f4:	83 3c       	cpi	r24, 0xC3	; 195
 4f6:	08 f4       	brcc	.+2      	; 0x4fa <main+0x1c4>
 4f8:	c6 c0       	rjmp	.+396    	; 0x686 <main+0x350>
				{
					PORTE ^= LED;
 4fa:	8e b1       	in	r24, 0x0e	; 14
 4fc:	8d 25       	eor	r24, r13
 4fe:	8e b9       	out	0x0e, r24	; 14
					/*  */
					if(!(PINE & LED))
 500:	64 99       	sbic	0x0c, 4	; 12
 502:	11 c0       	rjmp	.+34     	; 0x526 <main+0x1f0>
					{
						//USART_putstring("FF");
						canTX_Signal.data[0] = 0x04;
 504:	ac 82       	std	Y+4, r10	; 0x04
						canTX_Signal.data[1] = 0x01;
 506:	81 e0       	ldi	r24, 0x01	; 1
 508:	8d 83       	std	Y+5, r24	; 0x05
						mcp2515_send_message(&canTX_Signal);
 50a:	ce 01       	movw	r24, r28
 50c:	01 96       	adiw	r24, 0x01	; 1
 50e:	10 d2       	rcall	.+1056   	; 0x930 <mcp2515_send_message>
						//print_message_on_USART(&canTX_Signal);
						/* Set cursor to home position */
						lcd_home();
 510:	48 d1       	rcall	.+656    	; 0x7a2 <lcd_home>
						lcd_puts("Left Signal On! ");
 512:	81 ee       	ldi	r24, 0xE1	; 225
 514:	92 e0       	ldi	r25, 0x02	; 2
 516:	54 d1       	rcall	.+680    	; 0x7c0 <lcd_puts>
						lcd_gotoxy(0, 1);
 518:	61 e0       	ldi	r22, 0x01	; 1
 51a:	80 e0       	ldi	r24, 0x00	; 0
 51c:	37 d1       	rcall	.+622    	; 0x78c <lcd_gotoxy>
						lcd_puts("                ");
 51e:	8f eb       	ldi	r24, 0xBF	; 191
 520:	92 e0       	ldi	r25, 0x02	; 2
 522:	4e d1       	rcall	.+668    	; 0x7c0 <lcd_puts>
 524:	0f c0       	rjmp	.+30     	; 0x544 <main+0x20e>
					}
					else
					{
						//USART_putstring("00");
						canTX_Signal.data[0] = 0x04;
 526:	ac 82       	std	Y+4, r10	; 0x04
						canTX_Signal.data[1] = 0x00;
 528:	1d 82       	std	Y+5, r1	; 0x05
						mcp2515_send_message(&canTX_Signal);
 52a:	ce 01       	movw	r24, r28
 52c:	01 96       	adiw	r24, 0x01	; 1
 52e:	00 d2       	rcall	.+1024   	; 0x930 <mcp2515_send_message>
						//print_message_on_USART(&canTX_Signal);
						/* Set cursor to home position */
						lcd_home();
 530:	38 d1       	rcall	.+624    	; 0x7a2 <lcd_home>
						lcd_puts("Left Signal Off!");
 532:	82 ef       	ldi	r24, 0xF2	; 242
 534:	92 e0       	ldi	r25, 0x02	; 2
 536:	44 d1       	rcall	.+648    	; 0x7c0 <lcd_puts>
						lcd_gotoxy(0, 1);
 538:	61 e0       	ldi	r22, 0x01	; 1
 53a:	80 e0       	ldi	r24, 0x00	; 0
 53c:	27 d1       	rcall	.+590    	; 0x78c <lcd_gotoxy>
						lcd_puts("                ");
 53e:	8f eb       	ldi	r24, 0xBF	; 191
 540:	92 e0       	ldi	r25, 0x02	; 2
 542:	3e d1       	rcall	.+636    	; 0x7c0 <lcd_puts>
					}
					/* Reset counter */
					TCNT0 = 0;
 544:	16 bc       	out	0x26, r1	; 38
					/* Reset overflows counter */
					totalOverflows = 0;
 546:	10 92 3e 04 	sts	0x043E, r1
 54a:	9d c0       	rjmp	.+314    	; 0x686 <main+0x350>
				}
			}
		}
		
		else if(PINB & RIGHT_SIGNAL)
 54c:	1f 9b       	sbis	0x03, 7	; 3
 54e:	68 c0       	rjmp	.+208    	; 0x620 <main+0x2ea>
		{
			if(PINH & HAZARD_SIGNAL)
 550:	f8 01       	movw	r30, r16
 552:	80 81       	ld	r24, Z
 554:	86 ff       	sbrs	r24, 6
 556:	32 c0       	rjmp	.+100    	; 0x5bc <main+0x286>
			{
				/* Check if the number of overflows is equal with 36 */
				if(totalOverflows >= 36)
 558:	80 91 3e 04 	lds	r24, 0x043E
 55c:	84 32       	cpi	r24, 0x24	; 36
 55e:	08 f4       	brcc	.+2      	; 0x562 <main+0x22c>
 560:	92 c0       	rjmp	.+292    	; 0x686 <main+0x350>
				{
					/* Check if the timer0 counts 195 ticks */
					if(TCNT0 >= 195)
 562:	86 b5       	in	r24, 0x26	; 38
 564:	83 3c       	cpi	r24, 0xC3	; 195
 566:	08 f4       	brcc	.+2      	; 0x56a <main+0x234>
 568:	8e c0       	rjmp	.+284    	; 0x686 <main+0x350>
					{
						PORTE ^= LED;
 56a:	8e b1       	in	r24, 0x0e	; 14
 56c:	8d 25       	eor	r24, r13
 56e:	8e b9       	out	0x0e, r24	; 14
						/*  */
						if(!(PINE & LED))
 570:	64 99       	sbic	0x0c, 4	; 12
 572:	11 c0       	rjmp	.+34     	; 0x596 <main+0x260>
						{
							canTX_Signal.data[0] = 0x06;
 574:	bc 82       	std	Y+4, r11	; 0x04
							canTX_Signal.data[1] = 0x01;
 576:	81 e0       	ldi	r24, 0x01	; 1
 578:	8d 83       	std	Y+5, r24	; 0x05
							mcp2515_send_message(&canTX_Signal);
 57a:	ce 01       	movw	r24, r28
 57c:	01 96       	adiw	r24, 0x01	; 1
 57e:	d8 d1       	rcall	.+944    	; 0x930 <mcp2515_send_message>
							/* Set cursor to home position */
							lcd_home();
 580:	10 d1       	rcall	.+544    	; 0x7a2 <lcd_home>
							lcd_puts("Hazard Signal On!");
 582:	8d ea       	ldi	r24, 0xAD	; 173
 584:	92 e0       	ldi	r25, 0x02	; 2
 586:	1c d1       	rcall	.+568    	; 0x7c0 <lcd_puts>
							lcd_gotoxy(0, 1);
 588:	61 e0       	ldi	r22, 0x01	; 1
 58a:	80 e0       	ldi	r24, 0x00	; 0
 58c:	ff d0       	rcall	.+510    	; 0x78c <lcd_gotoxy>
							lcd_puts("                ");
 58e:	8f eb       	ldi	r24, 0xBF	; 191
 590:	92 e0       	ldi	r25, 0x02	; 2
 592:	16 d1       	rcall	.+556    	; 0x7c0 <lcd_puts>
 594:	0f c0       	rjmp	.+30     	; 0x5b4 <main+0x27e>
						}
						else
						{
							canTX_Signal.data[0] = 0x06;
 596:	bc 82       	std	Y+4, r11	; 0x04
							canTX_Signal.data[1] = 0x00;
 598:	1d 82       	std	Y+5, r1	; 0x05
							mcp2515_send_message(&canTX_Signal);
 59a:	ce 01       	movw	r24, r28
 59c:	01 96       	adiw	r24, 0x01	; 1
 59e:	c8 d1       	rcall	.+912    	; 0x930 <mcp2515_send_message>
							/* Set cursor to home position */
							lcd_home();
 5a0:	00 d1       	rcall	.+512    	; 0x7a2 <lcd_home>
							lcd_puts("HazardSignal Off");
 5a2:	80 ed       	ldi	r24, 0xD0	; 208
 5a4:	92 e0       	ldi	r25, 0x02	; 2
 5a6:	0c d1       	rcall	.+536    	; 0x7c0 <lcd_puts>
							lcd_gotoxy(0, 1);
 5a8:	61 e0       	ldi	r22, 0x01	; 1
 5aa:	80 e0       	ldi	r24, 0x00	; 0
 5ac:	ef d0       	rcall	.+478    	; 0x78c <lcd_gotoxy>
							lcd_puts("                ");
 5ae:	8f eb       	ldi	r24, 0xBF	; 191
 5b0:	92 e0       	ldi	r25, 0x02	; 2
 5b2:	06 d1       	rcall	.+524    	; 0x7c0 <lcd_puts>
						}
						/* Reset counter */
						TCNT0 = 0;
 5b4:	16 bc       	out	0x26, r1	; 38
						/* Reset overflows counter */
						totalOverflows = 0;
 5b6:	10 92 3e 04 	sts	0x043E, r1
 5ba:	65 c0       	rjmp	.+202    	; 0x686 <main+0x350>
					}
				}
			}
			/* Check if the number of overflows is equal with 36 */
			else if(totalOverflows >= 36)
 5bc:	80 91 3e 04 	lds	r24, 0x043E
 5c0:	84 32       	cpi	r24, 0x24	; 36
 5c2:	08 f4       	brcc	.+2      	; 0x5c6 <main+0x290>
 5c4:	60 c0       	rjmp	.+192    	; 0x686 <main+0x350>
			{
				/* Check if the timer0 counts 195 ticks */
				if(TCNT0 >= 195)
 5c6:	86 b5       	in	r24, 0x26	; 38
 5c8:	83 3c       	cpi	r24, 0xC3	; 195
 5ca:	08 f4       	brcc	.+2      	; 0x5ce <main+0x298>
 5cc:	5c c0       	rjmp	.+184    	; 0x686 <main+0x350>
				{
					PORTE ^= LED;
 5ce:	8e b1       	in	r24, 0x0e	; 14
 5d0:	8d 25       	eor	r24, r13
 5d2:	8e b9       	out	0x0e, r24	; 14
					/*  */
					if(!(PINE & LED))
 5d4:	64 99       	sbic	0x0c, 4	; 12
 5d6:	11 c0       	rjmp	.+34     	; 0x5fa <main+0x2c4>
					{
						canTX_Signal.data[0] = 0x02;
 5d8:	9c 82       	std	Y+4, r9	; 0x04
						canTX_Signal.data[1] = 0x01;
 5da:	81 e0       	ldi	r24, 0x01	; 1
 5dc:	8d 83       	std	Y+5, r24	; 0x05
						mcp2515_send_message(&canTX_Signal);
 5de:	ce 01       	movw	r24, r28
 5e0:	01 96       	adiw	r24, 0x01	; 1
 5e2:	a6 d1       	rcall	.+844    	; 0x930 <mcp2515_send_message>
						/* Set cursor to home position */
						lcd_home();
 5e4:	de d0       	rcall	.+444    	; 0x7a2 <lcd_home>
						lcd_puts("Right Signal On!");
 5e6:	83 e0       	ldi	r24, 0x03	; 3
 5e8:	93 e0       	ldi	r25, 0x03	; 3
 5ea:	ea d0       	rcall	.+468    	; 0x7c0 <lcd_puts>
						lcd_gotoxy(0, 1);
 5ec:	61 e0       	ldi	r22, 0x01	; 1
 5ee:	80 e0       	ldi	r24, 0x00	; 0
 5f0:	cd d0       	rcall	.+410    	; 0x78c <lcd_gotoxy>
						lcd_puts("                ");
 5f2:	8f eb       	ldi	r24, 0xBF	; 191
 5f4:	92 e0       	ldi	r25, 0x02	; 2
 5f6:	e4 d0       	rcall	.+456    	; 0x7c0 <lcd_puts>
 5f8:	0f c0       	rjmp	.+30     	; 0x618 <main+0x2e2>
					}
					else
					{
						canTX_Signal.data[0] = 0x02;
 5fa:	9c 82       	std	Y+4, r9	; 0x04
						canTX_Signal.data[1] = 0x00;
 5fc:	1d 82       	std	Y+5, r1	; 0x05
						mcp2515_send_message(&canTX_Signal);
 5fe:	ce 01       	movw	r24, r28
 600:	01 96       	adiw	r24, 0x01	; 1
 602:	96 d1       	rcall	.+812    	; 0x930 <mcp2515_send_message>
						/* Set cursor to home position */
						lcd_home();
 604:	ce d0       	rcall	.+412    	; 0x7a2 <lcd_home>
						lcd_puts("Right Signal Off");
 606:	84 e1       	ldi	r24, 0x14	; 20
 608:	93 e0       	ldi	r25, 0x03	; 3
 60a:	da d0       	rcall	.+436    	; 0x7c0 <lcd_puts>
						lcd_gotoxy(0, 1);
 60c:	61 e0       	ldi	r22, 0x01	; 1
 60e:	80 e0       	ldi	r24, 0x00	; 0
 610:	bd d0       	rcall	.+378    	; 0x78c <lcd_gotoxy>
						lcd_puts("                ");
 612:	8f eb       	ldi	r24, 0xBF	; 191
 614:	92 e0       	ldi	r25, 0x02	; 2
 616:	d4 d0       	rcall	.+424    	; 0x7c0 <lcd_puts>
					}
					/* Reset counter */
					TCNT0 = 0;
 618:	16 bc       	out	0x26, r1	; 38
					/* Reset overflows counter */
					totalOverflows = 0;
 61a:	10 92 3e 04 	sts	0x043E, r1
 61e:	33 c0       	rjmp	.+102    	; 0x686 <main+0x350>
				}
			}
		}
		
		else if(PINH & HAZARD_SIGNAL)
 620:	f8 01       	movw	r30, r16
 622:	80 81       	ld	r24, Z
 624:	86 ff       	sbrs	r24, 6
 626:	2f c0       	rjmp	.+94     	; 0x686 <main+0x350>
		{
			/* Check if the number of overflows is equal with 36 */
			if(totalOverflows >= 36)
 628:	80 91 3e 04 	lds	r24, 0x043E
 62c:	84 32       	cpi	r24, 0x24	; 36
 62e:	58 f1       	brcs	.+86     	; 0x686 <main+0x350>
			{
				/* Check if the timer0 counts 195 ticks */
				if(TCNT0 >= 195)
 630:	86 b5       	in	r24, 0x26	; 38
 632:	83 3c       	cpi	r24, 0xC3	; 195
 634:	40 f1       	brcs	.+80     	; 0x686 <main+0x350>
				{
					PORTE ^= LED;
 636:	8e b1       	in	r24, 0x0e	; 14
 638:	8d 25       	eor	r24, r13
 63a:	8e b9       	out	0x0e, r24	; 14
					/*  */
					if(!(PINE & LED))
 63c:	64 99       	sbic	0x0c, 4	; 12
 63e:	11 c0       	rjmp	.+34     	; 0x662 <main+0x32c>
					{
						canTX_Signal.data[0] = 0x06;
 640:	bc 82       	std	Y+4, r11	; 0x04
						canTX_Signal.data[1] = 0x01;
 642:	81 e0       	ldi	r24, 0x01	; 1
 644:	8d 83       	std	Y+5, r24	; 0x05
						mcp2515_send_message(&canTX_Signal);
 646:	ce 01       	movw	r24, r28
 648:	01 96       	adiw	r24, 0x01	; 1
 64a:	72 d1       	rcall	.+740    	; 0x930 <mcp2515_send_message>
						/* Set cursor to home position */
						lcd_home();
 64c:	aa d0       	rcall	.+340    	; 0x7a2 <lcd_home>
						lcd_puts("Hazard Signal On!");
 64e:	8d ea       	ldi	r24, 0xAD	; 173
 650:	92 e0       	ldi	r25, 0x02	; 2
 652:	b6 d0       	rcall	.+364    	; 0x7c0 <lcd_puts>
						lcd_gotoxy(0, 1);
 654:	61 e0       	ldi	r22, 0x01	; 1
 656:	80 e0       	ldi	r24, 0x00	; 0
 658:	99 d0       	rcall	.+306    	; 0x78c <lcd_gotoxy>
						lcd_puts("                ");
 65a:	8f eb       	ldi	r24, 0xBF	; 191
 65c:	92 e0       	ldi	r25, 0x02	; 2
 65e:	b0 d0       	rcall	.+352    	; 0x7c0 <lcd_puts>
 660:	0f c0       	rjmp	.+30     	; 0x680 <main+0x34a>
					}
					else
					{
						canTX_Signal.data[0] = 0x06;
 662:	bc 82       	std	Y+4, r11	; 0x04
						canTX_Signal.data[1] = 0x00;
 664:	1d 82       	std	Y+5, r1	; 0x05
						mcp2515_send_message(&canTX_Signal);
 666:	ce 01       	movw	r24, r28
 668:	01 96       	adiw	r24, 0x01	; 1
 66a:	62 d1       	rcall	.+708    	; 0x930 <mcp2515_send_message>
						/* Set cursor to home position */
						lcd_home();
 66c:	9a d0       	rcall	.+308    	; 0x7a2 <lcd_home>
						lcd_puts("HazardSignal Off");
 66e:	80 ed       	ldi	r24, 0xD0	; 208
 670:	92 e0       	ldi	r25, 0x02	; 2
 672:	a6 d0       	rcall	.+332    	; 0x7c0 <lcd_puts>
						lcd_gotoxy(0, 1);
 674:	61 e0       	ldi	r22, 0x01	; 1
 676:	80 e0       	ldi	r24, 0x00	; 0
 678:	89 d0       	rcall	.+274    	; 0x78c <lcd_gotoxy>
						lcd_puts("                ");
 67a:	8f eb       	ldi	r24, 0xBF	; 191
 67c:	92 e0       	ldi	r25, 0x02	; 2
 67e:	a0 d0       	rcall	.+320    	; 0x7c0 <lcd_puts>
					}
					/* Reset counter */
					TCNT0 = 0;
 680:	16 bc       	out	0x26, r1	; 38
					/* Reset overflows counter */
					totalOverflows = 0;
 682:	10 92 3e 04 	sts	0x043E, r1
	/* Counter for equal states */
	static uint8_t count = 0;
	/* Holds the number of debounced states */
	static uint8_t button_state = 0;
	/* Check if the button is pressed or not */ 
	uint8_t current_state = (~PINB & BRAKE_LIGHT) != 0;
 686:	83 b1       	in	r24, 0x03	; 3
 688:	82 95       	swap	r24
 68a:	81 70       	andi	r24, 0x01	; 1
 68c:	91 e0       	ldi	r25, 0x01	; 1
 68e:	89 27       	eor	r24, r25
	if(current_state != button_state)
 690:	90 91 37 03 	lds	r25, 0x0337
 694:	89 17       	cp	r24, r25
 696:	89 f0       	breq	.+34     	; 0x6ba <main+0x384>
	{
		/* Button state will change and counter is increased */
		count++;
 698:	90 91 36 03 	lds	r25, 0x0336
 69c:	9f 5f       	subi	r25, 0xFF	; 255
 69e:	90 93 36 03 	sts	0x0336, r25
		if(count >= 4)
 6a2:	94 30       	cpi	r25, 0x04	; 4
 6a4:	60 f0       	brcs	.+24     	; 0x6be <main+0x388>
		{
			/* Button have not bounced for four checks, change state */
			button_state = current_state;
 6a6:	80 93 37 03 	sts	0x0337, r24
			/* If the button was pressed, communicate to main */
			if(current_state != 0)
 6aa:	88 23       	and	r24, r24
 6ac:	19 f0       	breq	.+6      	; 0x6b4 <main+0x37e>
			{
				button_down = 1;
 6ae:	81 e0       	ldi	r24, 0x01	; 1
 6b0:	80 93 3f 04 	sts	0x043F, r24
			}
			count = 0;
 6b4:	10 92 36 03 	sts	0x0336, r1
 6b8:	02 c0       	rjmp	.+4      	; 0x6be <main+0x388>
		}
	}
	else
	{
		/* Reset counter */
		count = 0;
 6ba:	10 92 36 03 	sts	0x0336, r1
		}
		
		/* Update button state */
		debounce();
		/* Check if the button is pressed */
		if(button_down)
 6be:	80 91 3f 04 	lds	r24, 0x043F
 6c2:	88 23       	and	r24, r24
 6c4:	29 f1       	breq	.+74     	; 0x710 <main+0x3da>
		{
			button_down = 0;
 6c6:	10 92 3f 04 	sts	0x043F, r1
			PORTE ^= LED;
 6ca:	8e b1       	in	r24, 0x0e	; 14
 6cc:	8d 25       	eor	r24, r13
 6ce:	8e b9       	out	0x0e, r24	; 14
			canTX_Brake.data[0] = 0x00;
 6d0:	1f 86       	std	Y+15, r1	; 0x0f
			canTX_Brake.data[1] = 0x00;
 6d2:	18 8a       	std	Y+16, r1	; 0x10
			mcp2515_send_message(&canTX_Brake);
 6d4:	ce 01       	movw	r24, r28
 6d6:	0c 96       	adiw	r24, 0x0c	; 12
 6d8:	2b d1       	rcall	.+598    	; 0x930 <mcp2515_send_message>
			lcd_home();
 6da:	63 d0       	rcall	.+198    	; 0x7a2 <lcd_home>
			lcd_puts("                ");
 6dc:	8f eb       	ldi	r24, 0xBF	; 191
 6de:	92 e0       	ldi	r25, 0x02	; 2
 6e0:	6f d0       	rcall	.+222    	; 0x7c0 <lcd_puts>
			lcd_gotoxy(0, 1);
 6e2:	61 e0       	ldi	r22, 0x01	; 1
 6e4:	80 e0       	ldi	r24, 0x00	; 0
 6e6:	52 d0       	rcall	.+164    	; 0x78c <lcd_gotoxy>
			lcd_puts("                ");
 6e8:	8f eb       	ldi	r24, 0xBF	; 191
 6ea:	92 e0       	ldi	r25, 0x02	; 2
 6ec:	69 d0       	rcall	.+210    	; 0x7c0 <lcd_puts>
			if(~PINE & LED)
 6ee:	64 99       	sbic	0x0c, 4	; 12
 6f0:	0f c0       	rjmp	.+30     	; 0x710 <main+0x3da>
			{
				canTX_Brake.data[0] = 0xFF;
 6f2:	cf 86       	std	Y+15, r12	; 0x0f
				canTX_Brake.data[1] = 0x00;
 6f4:	18 8a       	std	Y+16, r1	; 0x10
				mcp2515_send_message(&canTX_Brake);
 6f6:	ce 01       	movw	r24, r28
 6f8:	0c 96       	adiw	r24, 0x0c	; 12
 6fa:	1a d1       	rcall	.+564    	; 0x930 <mcp2515_send_message>
				lcd_home();
 6fc:	52 d0       	rcall	.+164    	; 0x7a2 <lcd_home>
				lcd_puts(" Brake Pressed! ");
 6fe:	85 e2       	ldi	r24, 0x25	; 37
 700:	93 e0       	ldi	r25, 0x03	; 3
 702:	5e d0       	rcall	.+188    	; 0x7c0 <lcd_puts>
				lcd_gotoxy(0, 1);
 704:	61 e0       	ldi	r22, 0x01	; 1
 706:	80 e0       	ldi	r24, 0x00	; 0
 708:	41 d0       	rcall	.+130    	; 0x78c <lcd_gotoxy>
				lcd_puts("                ");
 70a:	8f eb       	ldi	r24, 0xBF	; 191
 70c:	92 e0       	ldi	r25, 0x02	; 2
 70e:	58 d0       	rcall	.+176    	; 0x7c0 <lcd_puts>
 710:	8f e3       	ldi	r24, 0x3F	; 63
 712:	9c e9       	ldi	r25, 0x9C	; 156
 714:	01 97       	sbiw	r24, 0x01	; 1
 716:	f1 f7       	brne	.-4      	; 0x714 <main+0x3de>
 718:	00 c0       	rjmp	.+0      	; 0x71a <main+0x3e4>
 71a:	00 00       	nop
 71c:	65 ce       	rjmp	.-822    	; 0x3e8 <main+0xb2>

0000071e <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
 71e:	12 9a       	sbi	0x02, 2	; 2
 720:	00 c0       	rjmp	.+0      	; 0x722 <toggle_e+0x4>
 722:	12 98       	cbi	0x02, 2	; 2
 724:	08 95       	ret

00000726 <lcd_write>:
 726:	cf 93       	push	r28
 728:	c8 2f       	mov	r28, r24
 72a:	66 23       	and	r22, r22
 72c:	11 f0       	breq	.+4      	; 0x732 <lcd_write+0xc>
 72e:	10 9a       	sbi	0x02, 0	; 2
 730:	01 c0       	rjmp	.+2      	; 0x734 <lcd_write+0xe>
 732:	10 98       	cbi	0x02, 0	; 2
 734:	0b 9a       	sbi	0x01, 3	; 1
 736:	0c 9a       	sbi	0x01, 4	; 1
 738:	0d 9a       	sbi	0x01, 5	; 1
 73a:	0e 9a       	sbi	0x01, 6	; 1
 73c:	16 98       	cbi	0x02, 6	; 2
 73e:	15 98       	cbi	0x02, 5	; 2
 740:	14 98       	cbi	0x02, 4	; 2
 742:	13 98       	cbi	0x02, 3	; 2
 744:	cc 23       	and	r28, r28
 746:	0c f4       	brge	.+2      	; 0x74a <lcd_write+0x24>
 748:	16 9a       	sbi	0x02, 6	; 2
 74a:	c6 fd       	sbrc	r28, 6
 74c:	15 9a       	sbi	0x02, 5	; 2
 74e:	c5 fd       	sbrc	r28, 5
 750:	14 9a       	sbi	0x02, 4	; 2
 752:	c4 fd       	sbrc	r28, 4
 754:	13 9a       	sbi	0x02, 3	; 2
 756:	e3 df       	rcall	.-58     	; 0x71e <toggle_e>
 758:	16 98       	cbi	0x02, 6	; 2
 75a:	15 98       	cbi	0x02, 5	; 2
 75c:	14 98       	cbi	0x02, 4	; 2
 75e:	13 98       	cbi	0x02, 3	; 2
 760:	c3 fd       	sbrc	r28, 3
 762:	16 9a       	sbi	0x02, 6	; 2
 764:	c2 fd       	sbrc	r28, 2
 766:	15 9a       	sbi	0x02, 5	; 2
 768:	c1 fd       	sbrc	r28, 1
 76a:	14 9a       	sbi	0x02, 4	; 2
 76c:	c0 fd       	sbrc	r28, 0
 76e:	13 9a       	sbi	0x02, 3	; 2
 770:	d6 df       	rcall	.-84     	; 0x71e <toggle_e>
 772:	13 9a       	sbi	0x02, 3	; 2
 774:	14 9a       	sbi	0x02, 4	; 2
 776:	15 9a       	sbi	0x02, 5	; 2
 778:	16 9a       	sbi	0x02, 6	; 2
 77a:	cf 91       	pop	r28
 77c:	08 95       	ret

0000077e <lcd_command>:
 77e:	e0 ea       	ldi	r30, 0xA0	; 160
 780:	ff e0       	ldi	r31, 0x0F	; 15
 782:	31 97       	sbiw	r30, 0x01	; 1
 784:	f1 f7       	brne	.-4      	; 0x782 <lcd_command+0x4>
 786:	60 e0       	ldi	r22, 0x00	; 0
 788:	ce cf       	rjmp	.-100    	; 0x726 <lcd_write>
 78a:	08 95       	ret

0000078c <lcd_gotoxy>:
 78c:	61 11       	cpse	r22, r1
 78e:	03 c0       	rjmp	.+6      	; 0x796 <lcd_gotoxy+0xa>
 790:	80 58       	subi	r24, 0x80	; 128
 792:	f5 cf       	rjmp	.-22     	; 0x77e <lcd_command>
 794:	08 95       	ret
 796:	80 54       	subi	r24, 0x40	; 64
 798:	f2 cf       	rjmp	.-28     	; 0x77e <lcd_command>
 79a:	08 95       	ret

0000079c <lcd_clrscr>:
 79c:	81 e0       	ldi	r24, 0x01	; 1
 79e:	ef cf       	rjmp	.-34     	; 0x77e <lcd_command>
 7a0:	08 95       	ret

000007a2 <lcd_home>:
 7a2:	82 e0       	ldi	r24, 0x02	; 2
 7a4:	ec cf       	rjmp	.-40     	; 0x77e <lcd_command>
 7a6:	08 95       	ret

000007a8 <lcd_putc>:
 7a8:	e0 ea       	ldi	r30, 0xA0	; 160
 7aa:	ff e0       	ldi	r31, 0x0F	; 15
 7ac:	31 97       	sbiw	r30, 0x01	; 1
 7ae:	f1 f7       	brne	.-4      	; 0x7ac <lcd_putc+0x4>
 7b0:	8a 30       	cpi	r24, 0x0A	; 10
 7b2:	19 f4       	brne	.+6      	; 0x7ba <lcd_putc+0x12>
 7b4:	80 ec       	ldi	r24, 0xC0	; 192
 7b6:	e3 cf       	rjmp	.-58     	; 0x77e <lcd_command>
 7b8:	08 95       	ret
 7ba:	61 e0       	ldi	r22, 0x01	; 1
 7bc:	b4 cf       	rjmp	.-152    	; 0x726 <lcd_write>
 7be:	08 95       	ret

000007c0 <lcd_puts>:
 7c0:	cf 93       	push	r28
 7c2:	df 93       	push	r29
 7c4:	ec 01       	movw	r28, r24
 7c6:	21 96       	adiw	r28, 0x01	; 1
 7c8:	fc 01       	movw	r30, r24
 7ca:	80 81       	ld	r24, Z
 7cc:	88 23       	and	r24, r24
 7ce:	21 f0       	breq	.+8      	; 0x7d8 <lcd_puts+0x18>
 7d0:	eb df       	rcall	.-42     	; 0x7a8 <lcd_putc>
 7d2:	89 91       	ld	r24, Y+
 7d4:	81 11       	cpse	r24, r1
 7d6:	fc cf       	rjmp	.-8      	; 0x7d0 <lcd_puts+0x10>
 7d8:	df 91       	pop	r29
 7da:	cf 91       	pop	r28
 7dc:	08 95       	ret

000007de <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 7de:	cf 93       	push	r28
 7e0:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 7e2:	08 9a       	sbi	0x01, 0	; 1
#if LCD_READ_REQUIRED
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
#endif
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 7e4:	0a 9a       	sbi	0x01, 2	; 1
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 7e6:	0b 9a       	sbi	0x01, 3	; 1
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 7e8:	0c 9a       	sbi	0x01, 4	; 1
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 7ea:	0d 9a       	sbi	0x01, 5	; 1
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 7ec:	0e 9a       	sbi	0x01, 6	; 1
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 7ee:	e0 e0       	ldi	r30, 0x00	; 0
 7f0:	fa ef       	ldi	r31, 0xFA	; 250
 7f2:	31 97       	sbiw	r30, 0x01	; 1
 7f4:	f1 f7       	brne	.-4      	; 0x7f2 <lcd_init+0x14>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 7f6:	14 9a       	sbi	0x02, 4	; 2
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 7f8:	13 9a       	sbi	0x02, 3	; 2
    lcd_e_toggle();
 7fa:	91 df       	rcall	.-222    	; 0x71e <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 7fc:	e0 e0       	ldi	r30, 0x00	; 0
 7fe:	fe e4       	ldi	r31, 0x4E	; 78
 800:	31 97       	sbiw	r30, 0x01	; 1
 802:	f1 f7       	brne	.-4      	; 0x800 <lcd_init+0x22>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 804:	8c df       	rcall	.-232    	; 0x71e <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 806:	e0 e0       	ldi	r30, 0x00	; 0
 808:	f1 e0       	ldi	r31, 0x01	; 1
 80a:	31 97       	sbiw	r30, 0x01	; 1
 80c:	f1 f7       	brne	.-4      	; 0x80a <lcd_init+0x2c>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 80e:	87 df       	rcall	.-242    	; 0x71e <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 810:	e0 e0       	ldi	r30, 0x00	; 0
 812:	f1 e0       	ldi	r31, 0x01	; 1
 814:	31 97       	sbiw	r30, 0x01	; 1
 816:	f1 f7       	brne	.-4      	; 0x814 <lcd_init+0x36>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 818:	13 98       	cbi	0x02, 3	; 2
    lcd_e_toggle();
 81a:	81 df       	rcall	.-254    	; 0x71e <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 81c:	e0 e0       	ldi	r30, 0x00	; 0
 81e:	f1 e0       	ldi	r31, 0x01	; 1
 820:	31 97       	sbiw	r30, 0x01	; 1
 822:	f1 f7       	brne	.-4      	; 0x820 <lcd_init+0x42>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 824:	88 e2       	ldi	r24, 0x28	; 40
 826:	ab df       	rcall	.-170    	; 0x77e <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 828:	88 e0       	ldi	r24, 0x08	; 8
 82a:	a9 df       	rcall	.-174    	; 0x77e <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 82c:	b7 df       	rcall	.-146    	; 0x79c <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 82e:	86 e0       	ldi	r24, 0x06	; 6
 830:	a6 df       	rcall	.-180    	; 0x77e <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 832:	8c 2f       	mov	r24, r28
 834:	a4 df       	rcall	.-184    	; 0x77e <lcd_command>

 836:	cf 91       	pop	r28
 838:	08 95       	ret

0000083a <spi_putc>:
	else {
		mcp2515_bit_modify(CANINTF, (1<<RX1IF), 0);
	}
	
	return (status & 0x07) + 1;
}
 83a:	8e bd       	out	0x2e, r24	; 46
 83c:	0d b4       	in	r0, 0x2d	; 45
 83e:	07 fe       	sbrs	r0, 7
 840:	fd cf       	rjmp	.-6      	; 0x83c <spi_putc+0x2>
 842:	8e b5       	in	r24, 0x2e	; 46
 844:	08 95       	ret

00000846 <mcp2515_write_register>:
 846:	cf 93       	push	r28
 848:	df 93       	push	r29
 84a:	d8 2f       	mov	r29, r24
 84c:	c6 2f       	mov	r28, r22
 84e:	28 98       	cbi	0x05, 0	; 5
 850:	82 e0       	ldi	r24, 0x02	; 2
 852:	f3 df       	rcall	.-26     	; 0x83a <spi_putc>
 854:	8d 2f       	mov	r24, r29
 856:	f1 df       	rcall	.-30     	; 0x83a <spi_putc>
 858:	8c 2f       	mov	r24, r28
 85a:	ef df       	rcall	.-34     	; 0x83a <spi_putc>
 85c:	28 9a       	sbi	0x05, 0	; 5
 85e:	df 91       	pop	r29
 860:	cf 91       	pop	r28
 862:	08 95       	ret

00000864 <mcp2515_read_register>:
 864:	cf 93       	push	r28
 866:	c8 2f       	mov	r28, r24
 868:	28 98       	cbi	0x05, 0	; 5
 86a:	83 e0       	ldi	r24, 0x03	; 3
 86c:	e6 df       	rcall	.-52     	; 0x83a <spi_putc>
 86e:	8c 2f       	mov	r24, r28
 870:	e4 df       	rcall	.-56     	; 0x83a <spi_putc>
 872:	8f ef       	ldi	r24, 0xFF	; 255
 874:	e2 df       	rcall	.-60     	; 0x83a <spi_putc>
 876:	28 9a       	sbi	0x05, 0	; 5
 878:	cf 91       	pop	r28
 87a:	08 95       	ret

0000087c <mcp2515_bit_modify>:
 87c:	1f 93       	push	r17
 87e:	cf 93       	push	r28
 880:	df 93       	push	r29
 882:	18 2f       	mov	r17, r24
 884:	d6 2f       	mov	r29, r22
 886:	c4 2f       	mov	r28, r20
 888:	28 98       	cbi	0x05, 0	; 5
 88a:	85 e0       	ldi	r24, 0x05	; 5
 88c:	d6 df       	rcall	.-84     	; 0x83a <spi_putc>
 88e:	81 2f       	mov	r24, r17
 890:	d4 df       	rcall	.-88     	; 0x83a <spi_putc>
 892:	8d 2f       	mov	r24, r29
 894:	d2 df       	rcall	.-92     	; 0x83a <spi_putc>
 896:	8c 2f       	mov	r24, r28
 898:	d0 df       	rcall	.-96     	; 0x83a <spi_putc>
 89a:	28 9a       	sbi	0x05, 0	; 5
 89c:	df 91       	pop	r29
 89e:	cf 91       	pop	r28
 8a0:	1f 91       	pop	r17
 8a2:	08 95       	ret

000008a4 <mcp2515_read_status>:
 8a4:	28 98       	cbi	0x05, 0	; 5
 8a6:	c9 df       	rcall	.-110    	; 0x83a <spi_putc>
 8a8:	8f ef       	ldi	r24, 0xFF	; 255
 8aa:	c7 df       	rcall	.-114    	; 0x83a <spi_putc>
 8ac:	28 9a       	sbi	0x05, 0	; 5
 8ae:	08 95       	ret

000008b0 <mcp2515_init>:
 8b0:	28 9a       	sbi	0x05, 0	; 5
 8b2:	20 9a       	sbi	0x04, 0	; 4
 8b4:	29 98       	cbi	0x05, 1	; 5
 8b6:	2a 98       	cbi	0x05, 2	; 5
 8b8:	2b 98       	cbi	0x05, 3	; 5
 8ba:	21 9a       	sbi	0x04, 1	; 4
 8bc:	22 9a       	sbi	0x04, 2	; 4
 8be:	23 98       	cbi	0x04, 3	; 4
 8c0:	50 98       	cbi	0x0a, 0	; 10
 8c2:	58 9a       	sbi	0x0b, 0	; 11
 8c4:	81 e5       	ldi	r24, 0x51	; 81
 8c6:	8c bd       	out	0x2c, r24	; 44
 8c8:	1d bc       	out	0x2d, r1	; 45
 8ca:	28 98       	cbi	0x05, 0	; 5
 8cc:	80 ec       	ldi	r24, 0xC0	; 192
 8ce:	b5 df       	rcall	.-150    	; 0x83a <spi_putc>
 8d0:	28 9a       	sbi	0x05, 0	; 5
 8d2:	8f e3       	ldi	r24, 0x3F	; 63
 8d4:	9c e9       	ldi	r25, 0x9C	; 156
 8d6:	01 97       	sbiw	r24, 0x01	; 1
 8d8:	f1 f7       	brne	.-4      	; 0x8d6 <mcp2515_init+0x26>
 8da:	00 c0       	rjmp	.+0      	; 0x8dc <mcp2515_init+0x2c>
 8dc:	00 00       	nop
 8de:	28 98       	cbi	0x05, 0	; 5
 8e0:	82 e0       	ldi	r24, 0x02	; 2
 8e2:	ab df       	rcall	.-170    	; 0x83a <spi_putc>
 8e4:	88 e2       	ldi	r24, 0x28	; 40
 8e6:	a9 df       	rcall	.-174    	; 0x83a <spi_putc>
 8e8:	82 e0       	ldi	r24, 0x02	; 2
 8ea:	a7 df       	rcall	.-178    	; 0x83a <spi_putc>
 8ec:	80 e9       	ldi	r24, 0x90	; 144
 8ee:	a5 df       	rcall	.-182    	; 0x83a <spi_putc>
 8f0:	87 e0       	ldi	r24, 0x07	; 7
 8f2:	a3 df       	rcall	.-186    	; 0x83a <spi_putc>
 8f4:	83 e0       	ldi	r24, 0x03	; 3
 8f6:	a1 df       	rcall	.-190    	; 0x83a <spi_putc>
 8f8:	28 9a       	sbi	0x05, 0	; 5
 8fa:	8a e2       	ldi	r24, 0x2A	; 42
 8fc:	b3 df       	rcall	.-154    	; 0x864 <mcp2515_read_register>
 8fe:	87 30       	cpi	r24, 0x07	; 7
 900:	89 f4       	brne	.+34     	; 0x924 <mcp2515_init+0x74>
 902:	60 e0       	ldi	r22, 0x00	; 0
 904:	8c e0       	ldi	r24, 0x0C	; 12
 906:	9f df       	rcall	.-194    	; 0x846 <mcp2515_write_register>
 908:	60 e0       	ldi	r22, 0x00	; 0
 90a:	8d e0       	ldi	r24, 0x0D	; 13
 90c:	9c df       	rcall	.-200    	; 0x846 <mcp2515_write_register>
 90e:	60 e6       	ldi	r22, 0x60	; 96
 910:	80 e6       	ldi	r24, 0x60	; 96
 912:	99 df       	rcall	.-206    	; 0x846 <mcp2515_write_register>
 914:	60 e6       	ldi	r22, 0x60	; 96
 916:	80 e7       	ldi	r24, 0x70	; 112
 918:	96 df       	rcall	.-212    	; 0x846 <mcp2515_write_register>
 91a:	60 e0       	ldi	r22, 0x00	; 0
 91c:	8f e0       	ldi	r24, 0x0F	; 15
 91e:	93 df       	rcall	.-218    	; 0x846 <mcp2515_write_register>
 920:	81 e0       	ldi	r24, 0x01	; 1
 922:	08 95       	ret
 924:	80 e0       	ldi	r24, 0x00	; 0
 926:	08 95       	ret

00000928 <mcp2515_check_message>:
 928:	89 b1       	in	r24, 0x09	; 9
 92a:	80 95       	com	r24
 92c:	81 70       	andi	r24, 0x01	; 1
 92e:	08 95       	ret

00000930 <mcp2515_send_message>:

// ----------------------------------------------------------------------------
uint8_t mcp2515_send_message(tCAN *message)
{
 930:	df 92       	push	r13
 932:	ef 92       	push	r14
 934:	ff 92       	push	r15
 936:	0f 93       	push	r16
 938:	1f 93       	push	r17
 93a:	cf 93       	push	r28
 93c:	df 93       	push	r29
 93e:	1f 92       	push	r1
 940:	cd b7       	in	r28, 0x3d	; 61
 942:	de b7       	in	r29, 0x3e	; 62
 944:	8c 01       	movw	r16, r24
	uint8_t status = mcp2515_read_status(SPI_READ_STATUS);
 946:	80 ea       	ldi	r24, 0xA0	; 160
 948:	ad df       	rcall	.-166    	; 0x8a4 <mcp2515_read_status>
 94a:	89 83       	std	Y+1, r24	; 0x01
	 *  2	TXB0CNTRL.TXREQ
	 *  4	TXB1CNTRL.TXREQ
	 *  6	TXB2CNTRL.TXREQ
	 */
	uint8_t address;
	if (bit_is_clear(status, 2)) {
 94c:	89 81       	ldd	r24, Y+1	; 0x01
 94e:	82 ff       	sbrs	r24, 2
 950:	0a c0       	rjmp	.+20     	; 0x966 <mcp2515_send_message+0x36>
		address = 0x00;
	}
	else if (bit_is_clear(status, 4)) {
 952:	89 81       	ldd	r24, Y+1	; 0x01
 954:	84 ff       	sbrs	r24, 4
 956:	09 c0       	rjmp	.+18     	; 0x96a <mcp2515_send_message+0x3a>
		address = 0x02;
	} 
	else if (bit_is_clear(status, 6)) {
 958:	89 81       	ldd	r24, Y+1	; 0x01
 95a:	86 fd       	sbrc	r24, 6
 95c:	4d c0       	rjmp	.+154    	; 0x9f8 <mcp2515_send_message+0xc8>
		address = 0x04;
 95e:	68 94       	set
 960:	dd 24       	eor	r13, r13
 962:	d2 f8       	bld	r13, 2
 964:	05 c0       	rjmp	.+10     	; 0x970 <mcp2515_send_message+0x40>
	 *  4	TXB1CNTRL.TXREQ
	 *  6	TXB2CNTRL.TXREQ
	 */
	uint8_t address;
	if (bit_is_clear(status, 2)) {
		address = 0x00;
 966:	d1 2c       	mov	r13, r1
 968:	03 c0       	rjmp	.+6      	; 0x970 <mcp2515_send_message+0x40>
	}
	else if (bit_is_clear(status, 4)) {
		address = 0x02;
 96a:	68 94       	set
 96c:	dd 24       	eor	r13, r13
 96e:	d1 f8       	bld	r13, 1
	else {
		// all buffer used => could not send message
		return 0;
	}
	
	RESET(MCP2515_CS);
 970:	28 98       	cbi	0x05, 0	; 5
	spi_putc(SPI_WRITE_TX | address);
 972:	8d 2d       	mov	r24, r13
 974:	80 64       	ori	r24, 0x40	; 64
 976:	61 df       	rcall	.-318    	; 0x83a <spi_putc>
	
	spi_putc(message->id >> 3);
 978:	f8 01       	movw	r30, r16
 97a:	20 81       	ld	r18, Z
 97c:	31 81       	ldd	r19, Z+1	; 0x01
 97e:	c9 01       	movw	r24, r18
 980:	96 95       	lsr	r25
 982:	87 95       	ror	r24
 984:	96 95       	lsr	r25
 986:	87 95       	ror	r24
 988:	96 95       	lsr	r25
 98a:	87 95       	ror	r24
 98c:	56 df       	rcall	.-340    	; 0x83a <spi_putc>
    spi_putc(message->id << 5);
 98e:	f8 01       	movw	r30, r16
 990:	80 81       	ld	r24, Z
 992:	82 95       	swap	r24
 994:	88 0f       	add	r24, r24
 996:	80 7e       	andi	r24, 0xE0	; 224
 998:	50 df       	rcall	.-352    	; 0x83a <spi_putc>
	
	spi_putc(0);
 99a:	80 e0       	ldi	r24, 0x00	; 0
 99c:	4e df       	rcall	.-356    	; 0x83a <spi_putc>
	spi_putc(0);
 99e:	80 e0       	ldi	r24, 0x00	; 0
 9a0:	4c df       	rcall	.-360    	; 0x83a <spi_putc>
	
	uint8_t length = message->header.length & 0x0f;
 9a2:	f8 01       	movw	r30, r16
 9a4:	82 81       	ldd	r24, Z+2	; 0x02
 9a6:	e8 2e       	mov	r14, r24
 9a8:	e6 94       	lsr	r14
 9aa:	fe 2d       	mov	r31, r14
 9ac:	ff 70       	andi	r31, 0x0F	; 15
 9ae:	ef 2e       	mov	r14, r31
	
	if (message->header.rtr) {
 9b0:	80 ff       	sbrs	r24, 0
 9b2:	04 c0       	rjmp	.+8      	; 0x9bc <mcp2515_send_message+0x8c>
		// a rtr-frame has a length, but contains no data
		spi_putc((1<<RTR) | length);
 9b4:	8f 2f       	mov	r24, r31
 9b6:	80 64       	ori	r24, 0x40	; 64
 9b8:	40 df       	rcall	.-384    	; 0x83a <spi_putc>
 9ba:	0e c0       	rjmp	.+28     	; 0x9d8 <mcp2515_send_message+0xa8>
	}
	else {
		// set message length
		spi_putc(length);
 9bc:	8f 2f       	mov	r24, r31
 9be:	3d df       	rcall	.-390    	; 0x83a <spi_putc>
		
		// data
		for (uint8_t i=0;i<length;i++) {
 9c0:	ee 20       	and	r14, r14
 9c2:	51 f0       	breq	.+20     	; 0x9d8 <mcp2515_send_message+0xa8>
 9c4:	0d 5f       	subi	r16, 0xFD	; 253
 9c6:	1f 4f       	sbci	r17, 0xFF	; 255
 9c8:	f1 2c       	mov	r15, r1
			spi_putc(message->data[i]);
 9ca:	f8 01       	movw	r30, r16
 9cc:	81 91       	ld	r24, Z+
 9ce:	8f 01       	movw	r16, r30
 9d0:	34 df       	rcall	.-408    	; 0x83a <spi_putc>
	else {
		// set message length
		spi_putc(length);
		
		// data
		for (uint8_t i=0;i<length;i++) {
 9d2:	f3 94       	inc	r15
 9d4:	fe 14       	cp	r15, r14
 9d6:	c8 f3       	brcs	.-14     	; 0x9ca <mcp2515_send_message+0x9a>
			spi_putc(message->data[i]);
		}
	}
	SET(MCP2515_CS);
 9d8:	28 9a       	sbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 9da:	f5 e0       	ldi	r31, 0x05	; 5
 9dc:	fa 95       	dec	r31
 9de:	f1 f7       	brne	.-4      	; 0x9dc <mcp2515_send_message+0xac>
 9e0:	00 00       	nop
	
	_delay_us(1);
	
	// send message
	RESET(MCP2515_CS);
 9e2:	28 98       	cbi	0x05, 0	; 5
	address = (address == 0) ? 1 : address;
 9e4:	d1 10       	cpse	r13, r1
 9e6:	02 c0       	rjmp	.+4      	; 0x9ec <mcp2515_send_message+0xbc>
 9e8:	dd 24       	eor	r13, r13
 9ea:	d3 94       	inc	r13
	spi_putc(SPI_RTS | address);
 9ec:	8d 2d       	mov	r24, r13
 9ee:	80 68       	ori	r24, 0x80	; 128
 9f0:	24 df       	rcall	.-440    	; 0x83a <spi_putc>
	SET(MCP2515_CS);
 9f2:	28 9a       	sbi	0x05, 0	; 5
	
	return address;
 9f4:	8d 2d       	mov	r24, r13
 9f6:	01 c0       	rjmp	.+2      	; 0x9fa <mcp2515_send_message+0xca>
	else if (bit_is_clear(status, 6)) {
		address = 0x04;
	}
	else {
		// all buffer used => could not send message
		return 0;
 9f8:	80 e0       	ldi	r24, 0x00	; 0
	address = (address == 0) ? 1 : address;
	spi_putc(SPI_RTS | address);
	SET(MCP2515_CS);
	
	return address;
}
 9fa:	0f 90       	pop	r0
 9fc:	df 91       	pop	r29
 9fe:	cf 91       	pop	r28
 a00:	1f 91       	pop	r17
 a02:	0f 91       	pop	r16
 a04:	ff 90       	pop	r15
 a06:	ef 90       	pop	r14
 a08:	df 90       	pop	r13
 a0a:	08 95       	ret

00000a0c <USART0_Init>:
void USART0_Init(unsigned int ubrr_val)
{
	unsigned char x;

	/* Set the baud rate */
	UBRR0H = (unsigned char) (ubrr_val>>8);                  
 a0c:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char) ubrr_val;
 a10:	80 93 c4 00 	sts	0x00C4, r24
	
	/* Enable USART receiver and transmitter */
	UCSR0B = ((1 << RXCIE0) | (1 << RXEN0) | (1 << TXEN0)); 
 a14:	88 e9       	ldi	r24, 0x98	; 152
 a16:	80 93 c1 00 	sts	0x00C1, r24
	/* For devices in which UBRRH/UCSRC shares the same location
	* eg; ATmega16, URSEL should be written to 1 when writing UCSRC
	* 
	*/
	/* Set frame format: 8 data 2stop */
	UCSR0C = (1 << USBS0) | (1 << UCSZ01) | (1 << UCSZ00);
 a1a:	8e e0       	ldi	r24, 0x0E	; 14
 a1c:	80 93 c2 00 	sts	0x00C2, r24
	
	/* It appears that ATMega328p on Arduino Uno U2X0 bit is On by default
	* Clearing the bit on register UCSR0A solves the baud rate problem */
	UCSR0A = (0 << U2X0);
 a20:	10 92 c0 00 	sts	0x00C0, r1
	/* Flush receive buffer */
	x = 0; 			    

	USART_RxTail = x;
 a24:	10 92 bc 03 	sts	0x03BC, r1
	USART_RxHead = x;
 a28:	10 92 bd 03 	sts	0x03BD, r1
	USART_TxTail = x;
 a2c:	10 92 3a 03 	sts	0x033A, r1
	USART_TxHead = x;
 a30:	10 92 3b 03 	sts	0x033B, r1
 a34:	08 95       	ret

00000a36 <__vector_25>:
ISR(USART0_RX_vect)
//#else
//#pragma vector=USART_RX_vect
//__interrupt void USART_RX_interrupt(void)
//#endif
{
 a36:	1f 92       	push	r1
 a38:	0f 92       	push	r0
 a3a:	0f b6       	in	r0, 0x3f	; 63
 a3c:	0f 92       	push	r0
 a3e:	11 24       	eor	r1, r1
 a40:	0b b6       	in	r0, 0x3b	; 59
 a42:	0f 92       	push	r0
 a44:	8f 93       	push	r24
 a46:	9f 93       	push	r25
 a48:	ef 93       	push	r30
 a4a:	ff 93       	push	r31
	unsigned char data;
	unsigned char tmphead;

	/* Read the received data */
	data = UDR0;                 
 a4c:	80 91 c6 00 	lds	r24, 0x00C6
	/* Calculate buffer index */
	tmphead = (USART_RxHead + 1) & USART_RX_BUFFER_MASK;
 a50:	e0 91 bd 03 	lds	r30, 0x03BD
 a54:	ef 5f       	subi	r30, 0xFF	; 255
 a56:	ef 77       	andi	r30, 0x7F	; 127
	/* Store new index */
	USART_RxHead = tmphead;
 a58:	e0 93 bd 03 	sts	0x03BD, r30

	if (tmphead == USART_RxTail) {
 a5c:	90 91 bc 03 	lds	r25, 0x03BC
		/* ERROR! Receive buffer overflow */
	}
	/* Store received data in buffer */
	USART_RxBuf[tmphead] = data; 
 a60:	f0 e0       	ldi	r31, 0x00	; 0
 a62:	e2 54       	subi	r30, 0x42	; 66
 a64:	fc 4f       	sbci	r31, 0xFC	; 252
 a66:	80 83       	st	Z, r24
}
 a68:	ff 91       	pop	r31
 a6a:	ef 91       	pop	r30
 a6c:	9f 91       	pop	r25
 a6e:	8f 91       	pop	r24
 a70:	0f 90       	pop	r0
 a72:	0b be       	out	0x3b, r0	; 59
 a74:	0f 90       	pop	r0
 a76:	0f be       	out	0x3f, r0	; 63
 a78:	0f 90       	pop	r0
 a7a:	1f 90       	pop	r1
 a7c:	18 95       	reti

00000a7e <__vector_26>:
ISR(USART0_UDRE_vect)
//#else
//#pragma vector=USART_UDRE_vect
//__interrupt void USART1_DRE_interrupt(void)
//#endif
{
 a7e:	1f 92       	push	r1
 a80:	0f 92       	push	r0
 a82:	0f b6       	in	r0, 0x3f	; 63
 a84:	0f 92       	push	r0
 a86:	11 24       	eor	r1, r1
 a88:	0b b6       	in	r0, 0x3b	; 59
 a8a:	0f 92       	push	r0
 a8c:	8f 93       	push	r24
 a8e:	9f 93       	push	r25
 a90:	ef 93       	push	r30
 a92:	ff 93       	push	r31
	unsigned char tmptail;

	/* Check if all data is transmitted */
	if (USART_TxHead != USART_TxTail) {
 a94:	90 91 3b 03 	lds	r25, 0x033B
 a98:	80 91 3a 03 	lds	r24, 0x033A
 a9c:	98 17       	cp	r25, r24
 a9e:	69 f0       	breq	.+26     	; 0xaba <__vector_26+0x3c>
		/* Calculate buffer index */
		tmptail = (USART_TxTail + 1) & USART_TX_BUFFER_MASK;
 aa0:	e0 91 3a 03 	lds	r30, 0x033A
 aa4:	ef 5f       	subi	r30, 0xFF	; 255
 aa6:	ef 77       	andi	r30, 0x7F	; 127
		/* Store new index */
		USART_TxTail = tmptail;      
 aa8:	e0 93 3a 03 	sts	0x033A, r30
		/* Start transmission */
		UDR0 = USART_TxBuf[tmptail];  
 aac:	f0 e0       	ldi	r31, 0x00	; 0
 aae:	e4 5c       	subi	r30, 0xC4	; 196
 ab0:	fc 4f       	sbci	r31, 0xFC	; 252
 ab2:	80 81       	ld	r24, Z
 ab4:	80 93 c6 00 	sts	0x00C6, r24
 ab8:	05 c0       	rjmp	.+10     	; 0xac4 <__vector_26+0x46>
	} else {       
		/* Disable UDRE interrupt */
		UCSR0B &= ~(1<<UDRIE0);         
 aba:	e1 ec       	ldi	r30, 0xC1	; 193
 abc:	f0 e0       	ldi	r31, 0x00	; 0
 abe:	80 81       	ld	r24, Z
 ac0:	8f 7d       	andi	r24, 0xDF	; 223
 ac2:	80 83       	st	Z, r24
	}
}
 ac4:	ff 91       	pop	r31
 ac6:	ef 91       	pop	r30
 ac8:	9f 91       	pop	r25
 aca:	8f 91       	pop	r24
 acc:	0f 90       	pop	r0
 ace:	0b be       	out	0x3b, r0	; 59
 ad0:	0f 90       	pop	r0
 ad2:	0f be       	out	0x3f, r0	; 63
 ad4:	0f 90       	pop	r0
 ad6:	1f 90       	pop	r1
 ad8:	18 95       	reti

00000ada <__subsf3>:
 ada:	50 58       	subi	r21, 0x80	; 128

00000adc <__addsf3>:
 adc:	bb 27       	eor	r27, r27
 ade:	aa 27       	eor	r26, r26
 ae0:	0e d0       	rcall	.+28     	; 0xafe <__addsf3x>
 ae2:	e5 c0       	rjmp	.+458    	; 0xcae <__fp_round>
 ae4:	d6 d0       	rcall	.+428    	; 0xc92 <__fp_pscA>
 ae6:	30 f0       	brcs	.+12     	; 0xaf4 <__addsf3+0x18>
 ae8:	db d0       	rcall	.+438    	; 0xca0 <__fp_pscB>
 aea:	20 f0       	brcs	.+8      	; 0xaf4 <__addsf3+0x18>
 aec:	31 f4       	brne	.+12     	; 0xafa <__addsf3+0x1e>
 aee:	9f 3f       	cpi	r25, 0xFF	; 255
 af0:	11 f4       	brne	.+4      	; 0xaf6 <__addsf3+0x1a>
 af2:	1e f4       	brtc	.+6      	; 0xafa <__addsf3+0x1e>
 af4:	cb c0       	rjmp	.+406    	; 0xc8c <__fp_nan>
 af6:	0e f4       	brtc	.+2      	; 0xafa <__addsf3+0x1e>
 af8:	e0 95       	com	r30
 afa:	e7 fb       	bst	r30, 7
 afc:	c1 c0       	rjmp	.+386    	; 0xc80 <__fp_inf>

00000afe <__addsf3x>:
 afe:	e9 2f       	mov	r30, r25
 b00:	e7 d0       	rcall	.+462    	; 0xcd0 <__fp_split3>
 b02:	80 f3       	brcs	.-32     	; 0xae4 <__addsf3+0x8>
 b04:	ba 17       	cp	r27, r26
 b06:	62 07       	cpc	r22, r18
 b08:	73 07       	cpc	r23, r19
 b0a:	84 07       	cpc	r24, r20
 b0c:	95 07       	cpc	r25, r21
 b0e:	18 f0       	brcs	.+6      	; 0xb16 <__addsf3x+0x18>
 b10:	71 f4       	brne	.+28     	; 0xb2e <__addsf3x+0x30>
 b12:	9e f5       	brtc	.+102    	; 0xb7a <__addsf3x+0x7c>
 b14:	ff c0       	rjmp	.+510    	; 0xd14 <__fp_zero>
 b16:	0e f4       	brtc	.+2      	; 0xb1a <__addsf3x+0x1c>
 b18:	e0 95       	com	r30
 b1a:	0b 2e       	mov	r0, r27
 b1c:	ba 2f       	mov	r27, r26
 b1e:	a0 2d       	mov	r26, r0
 b20:	0b 01       	movw	r0, r22
 b22:	b9 01       	movw	r22, r18
 b24:	90 01       	movw	r18, r0
 b26:	0c 01       	movw	r0, r24
 b28:	ca 01       	movw	r24, r20
 b2a:	a0 01       	movw	r20, r0
 b2c:	11 24       	eor	r1, r1
 b2e:	ff 27       	eor	r31, r31
 b30:	59 1b       	sub	r21, r25
 b32:	99 f0       	breq	.+38     	; 0xb5a <__addsf3x+0x5c>
 b34:	59 3f       	cpi	r21, 0xF9	; 249
 b36:	50 f4       	brcc	.+20     	; 0xb4c <__addsf3x+0x4e>
 b38:	50 3e       	cpi	r21, 0xE0	; 224
 b3a:	68 f1       	brcs	.+90     	; 0xb96 <__addsf3x+0x98>
 b3c:	1a 16       	cp	r1, r26
 b3e:	f0 40       	sbci	r31, 0x00	; 0
 b40:	a2 2f       	mov	r26, r18
 b42:	23 2f       	mov	r18, r19
 b44:	34 2f       	mov	r19, r20
 b46:	44 27       	eor	r20, r20
 b48:	58 5f       	subi	r21, 0xF8	; 248
 b4a:	f3 cf       	rjmp	.-26     	; 0xb32 <__addsf3x+0x34>
 b4c:	46 95       	lsr	r20
 b4e:	37 95       	ror	r19
 b50:	27 95       	ror	r18
 b52:	a7 95       	ror	r26
 b54:	f0 40       	sbci	r31, 0x00	; 0
 b56:	53 95       	inc	r21
 b58:	c9 f7       	brne	.-14     	; 0xb4c <__addsf3x+0x4e>
 b5a:	7e f4       	brtc	.+30     	; 0xb7a <__addsf3x+0x7c>
 b5c:	1f 16       	cp	r1, r31
 b5e:	ba 0b       	sbc	r27, r26
 b60:	62 0b       	sbc	r22, r18
 b62:	73 0b       	sbc	r23, r19
 b64:	84 0b       	sbc	r24, r20
 b66:	ba f0       	brmi	.+46     	; 0xb96 <__addsf3x+0x98>
 b68:	91 50       	subi	r25, 0x01	; 1
 b6a:	a1 f0       	breq	.+40     	; 0xb94 <__addsf3x+0x96>
 b6c:	ff 0f       	add	r31, r31
 b6e:	bb 1f       	adc	r27, r27
 b70:	66 1f       	adc	r22, r22
 b72:	77 1f       	adc	r23, r23
 b74:	88 1f       	adc	r24, r24
 b76:	c2 f7       	brpl	.-16     	; 0xb68 <__addsf3x+0x6a>
 b78:	0e c0       	rjmp	.+28     	; 0xb96 <__addsf3x+0x98>
 b7a:	ba 0f       	add	r27, r26
 b7c:	62 1f       	adc	r22, r18
 b7e:	73 1f       	adc	r23, r19
 b80:	84 1f       	adc	r24, r20
 b82:	48 f4       	brcc	.+18     	; 0xb96 <__addsf3x+0x98>
 b84:	87 95       	ror	r24
 b86:	77 95       	ror	r23
 b88:	67 95       	ror	r22
 b8a:	b7 95       	ror	r27
 b8c:	f7 95       	ror	r31
 b8e:	9e 3f       	cpi	r25, 0xFE	; 254
 b90:	08 f0       	brcs	.+2      	; 0xb94 <__addsf3x+0x96>
 b92:	b3 cf       	rjmp	.-154    	; 0xafa <__addsf3+0x1e>
 b94:	93 95       	inc	r25
 b96:	88 0f       	add	r24, r24
 b98:	08 f0       	brcs	.+2      	; 0xb9c <__addsf3x+0x9e>
 b9a:	99 27       	eor	r25, r25
 b9c:	ee 0f       	add	r30, r30
 b9e:	97 95       	ror	r25
 ba0:	87 95       	ror	r24
 ba2:	08 95       	ret

00000ba4 <__fixsfsi>:
 ba4:	04 d0       	rcall	.+8      	; 0xbae <__fixunssfsi>
 ba6:	68 94       	set
 ba8:	b1 11       	cpse	r27, r1
 baa:	b5 c0       	rjmp	.+362    	; 0xd16 <__fp_szero>
 bac:	08 95       	ret

00000bae <__fixunssfsi>:
 bae:	98 d0       	rcall	.+304    	; 0xce0 <__fp_splitA>
 bb0:	88 f0       	brcs	.+34     	; 0xbd4 <__fixunssfsi+0x26>
 bb2:	9f 57       	subi	r25, 0x7F	; 127
 bb4:	90 f0       	brcs	.+36     	; 0xbda <__fixunssfsi+0x2c>
 bb6:	b9 2f       	mov	r27, r25
 bb8:	99 27       	eor	r25, r25
 bba:	b7 51       	subi	r27, 0x17	; 23
 bbc:	a0 f0       	brcs	.+40     	; 0xbe6 <__fixunssfsi+0x38>
 bbe:	d1 f0       	breq	.+52     	; 0xbf4 <__fixunssfsi+0x46>
 bc0:	66 0f       	add	r22, r22
 bc2:	77 1f       	adc	r23, r23
 bc4:	88 1f       	adc	r24, r24
 bc6:	99 1f       	adc	r25, r25
 bc8:	1a f0       	brmi	.+6      	; 0xbd0 <__fixunssfsi+0x22>
 bca:	ba 95       	dec	r27
 bcc:	c9 f7       	brne	.-14     	; 0xbc0 <__fixunssfsi+0x12>
 bce:	12 c0       	rjmp	.+36     	; 0xbf4 <__fixunssfsi+0x46>
 bd0:	b1 30       	cpi	r27, 0x01	; 1
 bd2:	81 f0       	breq	.+32     	; 0xbf4 <__fixunssfsi+0x46>
 bd4:	9f d0       	rcall	.+318    	; 0xd14 <__fp_zero>
 bd6:	b1 e0       	ldi	r27, 0x01	; 1
 bd8:	08 95       	ret
 bda:	9c c0       	rjmp	.+312    	; 0xd14 <__fp_zero>
 bdc:	67 2f       	mov	r22, r23
 bde:	78 2f       	mov	r23, r24
 be0:	88 27       	eor	r24, r24
 be2:	b8 5f       	subi	r27, 0xF8	; 248
 be4:	39 f0       	breq	.+14     	; 0xbf4 <__fixunssfsi+0x46>
 be6:	b9 3f       	cpi	r27, 0xF9	; 249
 be8:	cc f3       	brlt	.-14     	; 0xbdc <__fixunssfsi+0x2e>
 bea:	86 95       	lsr	r24
 bec:	77 95       	ror	r23
 bee:	67 95       	ror	r22
 bf0:	b3 95       	inc	r27
 bf2:	d9 f7       	brne	.-10     	; 0xbea <__fixunssfsi+0x3c>
 bf4:	3e f4       	brtc	.+14     	; 0xc04 <__fixunssfsi+0x56>
 bf6:	90 95       	com	r25
 bf8:	80 95       	com	r24
 bfa:	70 95       	com	r23
 bfc:	61 95       	neg	r22
 bfe:	7f 4f       	sbci	r23, 0xFF	; 255
 c00:	8f 4f       	sbci	r24, 0xFF	; 255
 c02:	9f 4f       	sbci	r25, 0xFF	; 255
 c04:	08 95       	ret

00000c06 <__floatunsisf>:
 c06:	e8 94       	clt
 c08:	09 c0       	rjmp	.+18     	; 0xc1c <__floatsisf+0x12>

00000c0a <__floatsisf>:
 c0a:	97 fb       	bst	r25, 7
 c0c:	3e f4       	brtc	.+14     	; 0xc1c <__floatsisf+0x12>
 c0e:	90 95       	com	r25
 c10:	80 95       	com	r24
 c12:	70 95       	com	r23
 c14:	61 95       	neg	r22
 c16:	7f 4f       	sbci	r23, 0xFF	; 255
 c18:	8f 4f       	sbci	r24, 0xFF	; 255
 c1a:	9f 4f       	sbci	r25, 0xFF	; 255
 c1c:	99 23       	and	r25, r25
 c1e:	a9 f0       	breq	.+42     	; 0xc4a <__floatsisf+0x40>
 c20:	f9 2f       	mov	r31, r25
 c22:	96 e9       	ldi	r25, 0x96	; 150
 c24:	bb 27       	eor	r27, r27
 c26:	93 95       	inc	r25
 c28:	f6 95       	lsr	r31
 c2a:	87 95       	ror	r24
 c2c:	77 95       	ror	r23
 c2e:	67 95       	ror	r22
 c30:	b7 95       	ror	r27
 c32:	f1 11       	cpse	r31, r1
 c34:	f8 cf       	rjmp	.-16     	; 0xc26 <__floatsisf+0x1c>
 c36:	fa f4       	brpl	.+62     	; 0xc76 <__floatsisf+0x6c>
 c38:	bb 0f       	add	r27, r27
 c3a:	11 f4       	brne	.+4      	; 0xc40 <__floatsisf+0x36>
 c3c:	60 ff       	sbrs	r22, 0
 c3e:	1b c0       	rjmp	.+54     	; 0xc76 <__floatsisf+0x6c>
 c40:	6f 5f       	subi	r22, 0xFF	; 255
 c42:	7f 4f       	sbci	r23, 0xFF	; 255
 c44:	8f 4f       	sbci	r24, 0xFF	; 255
 c46:	9f 4f       	sbci	r25, 0xFF	; 255
 c48:	16 c0       	rjmp	.+44     	; 0xc76 <__floatsisf+0x6c>
 c4a:	88 23       	and	r24, r24
 c4c:	11 f0       	breq	.+4      	; 0xc52 <__floatsisf+0x48>
 c4e:	96 e9       	ldi	r25, 0x96	; 150
 c50:	11 c0       	rjmp	.+34     	; 0xc74 <__floatsisf+0x6a>
 c52:	77 23       	and	r23, r23
 c54:	21 f0       	breq	.+8      	; 0xc5e <__floatsisf+0x54>
 c56:	9e e8       	ldi	r25, 0x8E	; 142
 c58:	87 2f       	mov	r24, r23
 c5a:	76 2f       	mov	r23, r22
 c5c:	05 c0       	rjmp	.+10     	; 0xc68 <__floatsisf+0x5e>
 c5e:	66 23       	and	r22, r22
 c60:	71 f0       	breq	.+28     	; 0xc7e <__floatsisf+0x74>
 c62:	96 e8       	ldi	r25, 0x86	; 134
 c64:	86 2f       	mov	r24, r22
 c66:	70 e0       	ldi	r23, 0x00	; 0
 c68:	60 e0       	ldi	r22, 0x00	; 0
 c6a:	2a f0       	brmi	.+10     	; 0xc76 <__floatsisf+0x6c>
 c6c:	9a 95       	dec	r25
 c6e:	66 0f       	add	r22, r22
 c70:	77 1f       	adc	r23, r23
 c72:	88 1f       	adc	r24, r24
 c74:	da f7       	brpl	.-10     	; 0xc6c <__floatsisf+0x62>
 c76:	88 0f       	add	r24, r24
 c78:	96 95       	lsr	r25
 c7a:	87 95       	ror	r24
 c7c:	97 f9       	bld	r25, 7
 c7e:	08 95       	ret

00000c80 <__fp_inf>:
 c80:	97 f9       	bld	r25, 7
 c82:	9f 67       	ori	r25, 0x7F	; 127
 c84:	80 e8       	ldi	r24, 0x80	; 128
 c86:	70 e0       	ldi	r23, 0x00	; 0
 c88:	60 e0       	ldi	r22, 0x00	; 0
 c8a:	08 95       	ret

00000c8c <__fp_nan>:
 c8c:	9f ef       	ldi	r25, 0xFF	; 255
 c8e:	80 ec       	ldi	r24, 0xC0	; 192
 c90:	08 95       	ret

00000c92 <__fp_pscA>:
 c92:	00 24       	eor	r0, r0
 c94:	0a 94       	dec	r0
 c96:	16 16       	cp	r1, r22
 c98:	17 06       	cpc	r1, r23
 c9a:	18 06       	cpc	r1, r24
 c9c:	09 06       	cpc	r0, r25
 c9e:	08 95       	ret

00000ca0 <__fp_pscB>:
 ca0:	00 24       	eor	r0, r0
 ca2:	0a 94       	dec	r0
 ca4:	12 16       	cp	r1, r18
 ca6:	13 06       	cpc	r1, r19
 ca8:	14 06       	cpc	r1, r20
 caa:	05 06       	cpc	r0, r21
 cac:	08 95       	ret

00000cae <__fp_round>:
 cae:	09 2e       	mov	r0, r25
 cb0:	03 94       	inc	r0
 cb2:	00 0c       	add	r0, r0
 cb4:	11 f4       	brne	.+4      	; 0xcba <__fp_round+0xc>
 cb6:	88 23       	and	r24, r24
 cb8:	52 f0       	brmi	.+20     	; 0xcce <__fp_round+0x20>
 cba:	bb 0f       	add	r27, r27
 cbc:	40 f4       	brcc	.+16     	; 0xcce <__fp_round+0x20>
 cbe:	bf 2b       	or	r27, r31
 cc0:	11 f4       	brne	.+4      	; 0xcc6 <__fp_round+0x18>
 cc2:	60 ff       	sbrs	r22, 0
 cc4:	04 c0       	rjmp	.+8      	; 0xcce <__fp_round+0x20>
 cc6:	6f 5f       	subi	r22, 0xFF	; 255
 cc8:	7f 4f       	sbci	r23, 0xFF	; 255
 cca:	8f 4f       	sbci	r24, 0xFF	; 255
 ccc:	9f 4f       	sbci	r25, 0xFF	; 255
 cce:	08 95       	ret

00000cd0 <__fp_split3>:
 cd0:	57 fd       	sbrc	r21, 7
 cd2:	90 58       	subi	r25, 0x80	; 128
 cd4:	44 0f       	add	r20, r20
 cd6:	55 1f       	adc	r21, r21
 cd8:	59 f0       	breq	.+22     	; 0xcf0 <__fp_splitA+0x10>
 cda:	5f 3f       	cpi	r21, 0xFF	; 255
 cdc:	71 f0       	breq	.+28     	; 0xcfa <__fp_splitA+0x1a>
 cde:	47 95       	ror	r20

00000ce0 <__fp_splitA>:
 ce0:	88 0f       	add	r24, r24
 ce2:	97 fb       	bst	r25, 7
 ce4:	99 1f       	adc	r25, r25
 ce6:	61 f0       	breq	.+24     	; 0xd00 <__fp_splitA+0x20>
 ce8:	9f 3f       	cpi	r25, 0xFF	; 255
 cea:	79 f0       	breq	.+30     	; 0xd0a <__fp_splitA+0x2a>
 cec:	87 95       	ror	r24
 cee:	08 95       	ret
 cf0:	12 16       	cp	r1, r18
 cf2:	13 06       	cpc	r1, r19
 cf4:	14 06       	cpc	r1, r20
 cf6:	55 1f       	adc	r21, r21
 cf8:	f2 cf       	rjmp	.-28     	; 0xcde <__fp_split3+0xe>
 cfa:	46 95       	lsr	r20
 cfc:	f1 df       	rcall	.-30     	; 0xce0 <__fp_splitA>
 cfe:	08 c0       	rjmp	.+16     	; 0xd10 <__fp_splitA+0x30>
 d00:	16 16       	cp	r1, r22
 d02:	17 06       	cpc	r1, r23
 d04:	18 06       	cpc	r1, r24
 d06:	99 1f       	adc	r25, r25
 d08:	f1 cf       	rjmp	.-30     	; 0xcec <__fp_splitA+0xc>
 d0a:	86 95       	lsr	r24
 d0c:	71 05       	cpc	r23, r1
 d0e:	61 05       	cpc	r22, r1
 d10:	08 94       	sec
 d12:	08 95       	ret

00000d14 <__fp_zero>:
 d14:	e8 94       	clt

00000d16 <__fp_szero>:
 d16:	bb 27       	eor	r27, r27
 d18:	66 27       	eor	r22, r22
 d1a:	77 27       	eor	r23, r23
 d1c:	cb 01       	movw	r24, r22
 d1e:	97 f9       	bld	r25, 7
 d20:	08 95       	ret

00000d22 <__mulsf3>:
 d22:	0b d0       	rcall	.+22     	; 0xd3a <__mulsf3x>
 d24:	c4 cf       	rjmp	.-120    	; 0xcae <__fp_round>
 d26:	b5 df       	rcall	.-150    	; 0xc92 <__fp_pscA>
 d28:	28 f0       	brcs	.+10     	; 0xd34 <__mulsf3+0x12>
 d2a:	ba df       	rcall	.-140    	; 0xca0 <__fp_pscB>
 d2c:	18 f0       	brcs	.+6      	; 0xd34 <__mulsf3+0x12>
 d2e:	95 23       	and	r25, r21
 d30:	09 f0       	breq	.+2      	; 0xd34 <__mulsf3+0x12>
 d32:	a6 cf       	rjmp	.-180    	; 0xc80 <__fp_inf>
 d34:	ab cf       	rjmp	.-170    	; 0xc8c <__fp_nan>
 d36:	11 24       	eor	r1, r1
 d38:	ee cf       	rjmp	.-36     	; 0xd16 <__fp_szero>

00000d3a <__mulsf3x>:
 d3a:	ca df       	rcall	.-108    	; 0xcd0 <__fp_split3>
 d3c:	a0 f3       	brcs	.-24     	; 0xd26 <__mulsf3+0x4>

00000d3e <__mulsf3_pse>:
 d3e:	95 9f       	mul	r25, r21
 d40:	d1 f3       	breq	.-12     	; 0xd36 <__mulsf3+0x14>
 d42:	95 0f       	add	r25, r21
 d44:	50 e0       	ldi	r21, 0x00	; 0
 d46:	55 1f       	adc	r21, r21
 d48:	62 9f       	mul	r22, r18
 d4a:	f0 01       	movw	r30, r0
 d4c:	72 9f       	mul	r23, r18
 d4e:	bb 27       	eor	r27, r27
 d50:	f0 0d       	add	r31, r0
 d52:	b1 1d       	adc	r27, r1
 d54:	63 9f       	mul	r22, r19
 d56:	aa 27       	eor	r26, r26
 d58:	f0 0d       	add	r31, r0
 d5a:	b1 1d       	adc	r27, r1
 d5c:	aa 1f       	adc	r26, r26
 d5e:	64 9f       	mul	r22, r20
 d60:	66 27       	eor	r22, r22
 d62:	b0 0d       	add	r27, r0
 d64:	a1 1d       	adc	r26, r1
 d66:	66 1f       	adc	r22, r22
 d68:	82 9f       	mul	r24, r18
 d6a:	22 27       	eor	r18, r18
 d6c:	b0 0d       	add	r27, r0
 d6e:	a1 1d       	adc	r26, r1
 d70:	62 1f       	adc	r22, r18
 d72:	73 9f       	mul	r23, r19
 d74:	b0 0d       	add	r27, r0
 d76:	a1 1d       	adc	r26, r1
 d78:	62 1f       	adc	r22, r18
 d7a:	83 9f       	mul	r24, r19
 d7c:	a0 0d       	add	r26, r0
 d7e:	61 1d       	adc	r22, r1
 d80:	22 1f       	adc	r18, r18
 d82:	74 9f       	mul	r23, r20
 d84:	33 27       	eor	r19, r19
 d86:	a0 0d       	add	r26, r0
 d88:	61 1d       	adc	r22, r1
 d8a:	23 1f       	adc	r18, r19
 d8c:	84 9f       	mul	r24, r20
 d8e:	60 0d       	add	r22, r0
 d90:	21 1d       	adc	r18, r1
 d92:	82 2f       	mov	r24, r18
 d94:	76 2f       	mov	r23, r22
 d96:	6a 2f       	mov	r22, r26
 d98:	11 24       	eor	r1, r1
 d9a:	9f 57       	subi	r25, 0x7F	; 127
 d9c:	50 40       	sbci	r21, 0x00	; 0
 d9e:	8a f0       	brmi	.+34     	; 0xdc2 <__mulsf3_pse+0x84>
 da0:	e1 f0       	breq	.+56     	; 0xdda <__mulsf3_pse+0x9c>
 da2:	88 23       	and	r24, r24
 da4:	4a f0       	brmi	.+18     	; 0xdb8 <__mulsf3_pse+0x7a>
 da6:	ee 0f       	add	r30, r30
 da8:	ff 1f       	adc	r31, r31
 daa:	bb 1f       	adc	r27, r27
 dac:	66 1f       	adc	r22, r22
 dae:	77 1f       	adc	r23, r23
 db0:	88 1f       	adc	r24, r24
 db2:	91 50       	subi	r25, 0x01	; 1
 db4:	50 40       	sbci	r21, 0x00	; 0
 db6:	a9 f7       	brne	.-22     	; 0xda2 <__mulsf3_pse+0x64>
 db8:	9e 3f       	cpi	r25, 0xFE	; 254
 dba:	51 05       	cpc	r21, r1
 dbc:	70 f0       	brcs	.+28     	; 0xdda <__mulsf3_pse+0x9c>
 dbe:	60 cf       	rjmp	.-320    	; 0xc80 <__fp_inf>
 dc0:	aa cf       	rjmp	.-172    	; 0xd16 <__fp_szero>
 dc2:	5f 3f       	cpi	r21, 0xFF	; 255
 dc4:	ec f3       	brlt	.-6      	; 0xdc0 <__mulsf3_pse+0x82>
 dc6:	98 3e       	cpi	r25, 0xE8	; 232
 dc8:	dc f3       	brlt	.-10     	; 0xdc0 <__mulsf3_pse+0x82>
 dca:	86 95       	lsr	r24
 dcc:	77 95       	ror	r23
 dce:	67 95       	ror	r22
 dd0:	b7 95       	ror	r27
 dd2:	f7 95       	ror	r31
 dd4:	e7 95       	ror	r30
 dd6:	9f 5f       	subi	r25, 0xFF	; 255
 dd8:	c1 f7       	brne	.-16     	; 0xdca <__mulsf3_pse+0x8c>
 dda:	fe 2b       	or	r31, r30
 ddc:	88 0f       	add	r24, r24
 dde:	91 1d       	adc	r25, r1
 de0:	96 95       	lsr	r25
 de2:	87 95       	ror	r24
 de4:	97 f9       	bld	r25, 7
 de6:	08 95       	ret

00000de8 <_exit>:
 de8:	f8 94       	cli

00000dea <__stop_program>:
 dea:	ff cf       	rjmp	.-2      	; 0xdea <__stop_program>
