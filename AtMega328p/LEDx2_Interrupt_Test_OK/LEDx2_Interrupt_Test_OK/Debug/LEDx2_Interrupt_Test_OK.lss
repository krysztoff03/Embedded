
LEDx2_Interrupt_Test_OK.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800100  00000716  000007aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000716  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800134  00800134  000007de  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007de  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000180  00000000  00000000  0000080e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000127d  00000000  00000000  0000098e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000671  00000000  00000000  00001c0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007f4  00000000  00000000  0000227c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000338  00000000  00000000  00002a70  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000047f  00000000  00000000  00002da8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000f22  00000000  00000000  00003227  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000158  00000000  00000000  00004149  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 68 02 	jmp	0x4d0	; 0x4d0 <__vector_4>
  14:	0c 94 86 02 	jmp	0x50c	; 0x50c <__vector_5>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e1       	ldi	r30, 0x16	; 22
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 33       	cpi	r26, 0x34	; 52
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e3       	ldi	r26, 0x34	; 52
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 34       	cpi	r26, 0x41	; 65
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 a5 02 	call	0x54a	; 0x54a <main>
  9e:	0c 94 89 03 	jmp	0x712	; 0x712 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
  a6:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
  aa:	88 e4       	ldi	r24, 0x48	; 72
  ac:	80 93 b8 00 	sts	0x00B8, r24
  b0:	08 95       	ret

000000b2 <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
  b2:	94 ea       	ldi	r25, 0xA4	; 164
  b4:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
  b8:	ec eb       	ldi	r30, 0xBC	; 188
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	90 81       	ld	r25, Z
  be:	99 23       	and	r25, r25
  c0:	ec f7       	brge	.-6      	; 0xbc <i2c_start+0xa>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
  c2:	90 91 b9 00 	lds	r25, 0x00B9
  c6:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
  c8:	98 30       	cpi	r25, 0x08	; 8
  ca:	11 f0       	breq	.+4      	; 0xd0 <i2c_start+0x1e>
  cc:	90 31       	cpi	r25, 0x10	; 16
  ce:	a1 f4       	brne	.+40     	; 0xf8 <i2c_start+0x46>

	// send device address
	TWDR = address;
  d0:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
  d4:	84 e8       	ldi	r24, 0x84	; 132
  d6:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
  da:	ec eb       	ldi	r30, 0xBC	; 188
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	88 23       	and	r24, r24
  e2:	ec f7       	brge	.-6      	; 0xde <i2c_start+0x2c>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
  e4:	90 91 b9 00 	lds	r25, 0x00B9
  e8:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
  ea:	98 31       	cpi	r25, 0x18	; 24
  ec:	39 f0       	breq	.+14     	; 0xfc <i2c_start+0x4a>
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	90 34       	cpi	r25, 0x40	; 64
  f2:	29 f4       	brne	.+10     	; 0xfe <i2c_start+0x4c>
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	08 95       	ret
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;

	return 0;
  fc:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
  fe:	08 95       	ret

00000100 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 100:	84 e9       	ldi	r24, 0x94	; 148
 102:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
 106:	ec eb       	ldi	r30, 0xBC	; 188
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	84 fd       	sbrc	r24, 4
 10e:	fd cf       	rjmp	.-6      	; 0x10a <i2c_stop+0xa>

}/* i2c_stop */
 110:	08 95       	ret

00000112 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
 112:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
 116:	84 e8       	ldi	r24, 0x84	; 132
 118:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
 11c:	ec eb       	ldi	r30, 0xBC	; 188
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	88 23       	and	r24, r24
 124:	ec f7       	brge	.-6      	; 0x120 <i2c_write+0xe>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
 126:	90 91 b9 00 	lds	r25, 0x00B9
 12a:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	98 32       	cpi	r25, 0x28	; 40
 130:	09 f4       	brne	.+2      	; 0x134 <i2c_write+0x22>
 132:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}/* i2c_write */
 134:	08 95       	ret

00000136 <lcd_read>:
Input:    rs     1: read data    
                 0: read busy flag / address counter
Returns:  byte read from LCD controller
*************************************************************************/
static uint8_t lcd_read(uint8_t rs) 
{
 136:	cf 93       	push	r28
    uint8_t data;

    if (rs) /* write data        (RS=1, RW=0) */
 138:	88 23       	and	r24, r24
 13a:	31 f0       	breq	.+12     	; 0x148 <lcd_read+0x12>
    	dataport |= _BV(LCD_RS_PIN);
 13c:	80 91 34 01 	lds	r24, 0x0134
 140:	81 60       	ori	r24, 0x01	; 1
 142:	80 93 34 01 	sts	0x0134, r24
 146:	05 c0       	rjmp	.+10     	; 0x152 <lcd_read+0x1c>
    else /* write instruction (RS=0, RW=0) */
    	dataport &= ~_BV(LCD_RS_PIN);
 148:	80 91 34 01 	lds	r24, 0x0134
 14c:	8e 7f       	andi	r24, 0xFE	; 254
 14e:	80 93 34 01 	sts	0x0134, r24
    dataport |= _BV(LCD_RW_PIN);
 152:	80 91 34 01 	lds	r24, 0x0134
 156:	82 60       	ori	r24, 0x02	; 2
 158:	80 93 34 01 	sts	0x0134, r24
    pcf8574_setoutput(LCD_PCF8574_DEVICEID, dataport);
 15c:	60 91 34 01 	lds	r22, 0x0134
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	0e 94 34 03 	call	0x668	; 0x668 <pcf8574_setoutput>

    pcf8574_setoutputpinhigh(LCD_PCF8574_DEVICEID, LCD_E_PIN);
 166:	62 e0       	ldi	r22, 0x02	; 2
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	0e 94 81 03 	call	0x702	; 0x702 <pcf8574_setoutputpinhigh>
	lcd_e_delay();
 16e:	00 c0       	rjmp	.+0      	; 0x170 <lcd_read+0x3a>
	data = pcf8574_getoutputpin(LCD_PCF8574_DEVICEID, LCD_DATA0_PIN) << 4;     /* read high nibble first */
 170:	64 e0       	ldi	r22, 0x04	; 4
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	0e 94 1d 03 	call	0x63a	; 0x63a <pcf8574_getoutputpin>
 178:	c8 2f       	mov	r28, r24
	pcf8574_setoutputpinlow(LCD_PCF8574_DEVICEID, LCD_E_PIN);
 17a:	62 e0       	ldi	r22, 0x02	; 2
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	0e 94 85 03 	call	0x70a	; 0x70a <pcf8574_setoutputpinlow>

	lcd_e_delay();                       /* Enable 500ns low       */
 182:	00 c0       	rjmp	.+0      	; 0x184 <lcd_read+0x4e>

	pcf8574_setoutputpinhigh(LCD_PCF8574_DEVICEID, LCD_E_PIN);
 184:	62 e0       	ldi	r22, 0x02	; 2
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	0e 94 81 03 	call	0x702	; 0x702 <pcf8574_setoutputpinhigh>
	lcd_e_delay();
 18c:	00 c0       	rjmp	.+0      	; 0x18e <lcd_read+0x58>
	data |= pcf8574_getoutputpin(LCD_PCF8574_DEVICEID, LCD_DATA0_PIN) &0x0F;    /* read low nibble        */
 18e:	64 e0       	ldi	r22, 0x04	; 4
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	0e 94 1d 03 	call	0x63a	; 0x63a <pcf8574_getoutputpin>
    dataport |= _BV(LCD_RW_PIN);
    pcf8574_setoutput(LCD_PCF8574_DEVICEID, dataport);

    pcf8574_setoutputpinhigh(LCD_PCF8574_DEVICEID, LCD_E_PIN);
	lcd_e_delay();
	data = pcf8574_getoutputpin(LCD_PCF8574_DEVICEID, LCD_DATA0_PIN) << 4;     /* read high nibble first */
 196:	c2 95       	swap	r28
 198:	c0 7f       	andi	r28, 0xF0	; 240

	lcd_e_delay();                       /* Enable 500ns low       */

	pcf8574_setoutputpinhigh(LCD_PCF8574_DEVICEID, LCD_E_PIN);
	lcd_e_delay();
	data |= pcf8574_getoutputpin(LCD_PCF8574_DEVICEID, LCD_DATA0_PIN) &0x0F;    /* read low nibble        */
 19a:	8f 70       	andi	r24, 0x0F	; 15
 19c:	c8 2b       	or	r28, r24
	pcf8574_setoutputpinlow(LCD_PCF8574_DEVICEID, LCD_E_PIN);
 19e:	62 e0       	ldi	r22, 0x02	; 2
 1a0:	80 e0       	ldi	r24, 0x00	; 0
 1a2:	0e 94 85 03 	call	0x70a	; 0x70a <pcf8574_setoutputpinlow>

    return data;
}
 1a6:	8c 2f       	mov	r24, r28
 1a8:	cf 91       	pop	r28
 1aa:	08 95       	ret

000001ac <lcd_waitbusy>:

{
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	0e 94 9b 00 	call	0x136	; 0x136 <lcd_read>
 1b2:	88 23       	and	r24, r24
 1b4:	dc f3       	brlt	.-10     	; 0x1ac <lcd_waitbusy>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1b6:	88 e0       	ldi	r24, 0x08	; 8
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	01 97       	sbiw	r24, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <lcd_waitbusy+0xe>
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(2);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	0e 94 9b 00 	call	0x136	; 0x136 <lcd_read>
    
}/* lcd_waitbusy */
 1c4:	08 95       	ret

000001c6 <toggle_e>:


/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
	pcf8574_setoutputpinhigh(LCD_PCF8574_DEVICEID, LCD_E_PIN);
 1c6:	62 e0       	ldi	r22, 0x02	; 2
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	0e 94 81 03 	call	0x702	; 0x702 <pcf8574_setoutputpinhigh>
    lcd_e_delay();
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <toggle_e+0xa>
    pcf8574_setoutputpinlow(LCD_PCF8574_DEVICEID, LCD_E_PIN);
 1d0:	62 e0       	ldi	r22, 0x02	; 2
 1d2:	80 e0       	ldi	r24, 0x00	; 0
 1d4:	0e 94 85 03 	call	0x70a	; 0x70a <pcf8574_setoutputpinlow>
 1d8:	08 95       	ret

000001da <lcd_write>:
          rs     1: write data    
                 0: write instruction
Returns:  none
*************************************************************************/
static void lcd_write(uint8_t data,uint8_t rs) 
{
 1da:	cf 93       	push	r28
 1dc:	c8 2f       	mov	r28, r24
	if (rs) /* write data        (RS=1, RW=0) */
 1de:	66 23       	and	r22, r22
 1e0:	31 f0       	breq	.+12     	; 0x1ee <lcd_write+0x14>
		dataport |= _BV(LCD_RS_PIN);
 1e2:	80 91 34 01 	lds	r24, 0x0134
 1e6:	81 60       	ori	r24, 0x01	; 1
 1e8:	80 93 34 01 	sts	0x0134, r24
 1ec:	05 c0       	rjmp	.+10     	; 0x1f8 <lcd_write+0x1e>
	else /* write instruction (RS=0, RW=0) */
		dataport &= ~_BV(LCD_RS_PIN);
 1ee:	80 91 34 01 	lds	r24, 0x0134
 1f2:	8e 7f       	andi	r24, 0xFE	; 254
 1f4:	80 93 34 01 	sts	0x0134, r24
	dataport &= ~_BV(LCD_RW_PIN);
 1f8:	80 91 34 01 	lds	r24, 0x0134
 1fc:	8d 7f       	andi	r24, 0xFD	; 253
 1fe:	80 93 34 01 	sts	0x0134, r24
	pcf8574_setoutput(LCD_PCF8574_DEVICEID, dataport);
 202:	60 91 34 01 	lds	r22, 0x0134
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	0e 94 34 03 	call	0x668	; 0x668 <pcf8574_setoutput>

	/* output high nibble first */
    dataport &= ~_BV(LCD_DATA3_PIN);
 20c:	80 91 34 01 	lds	r24, 0x0134
 210:	8f 77       	andi	r24, 0x7F	; 127
 212:	80 93 34 01 	sts	0x0134, r24
    dataport &= ~_BV(LCD_DATA2_PIN);
 216:	80 91 34 01 	lds	r24, 0x0134
 21a:	8f 7b       	andi	r24, 0xBF	; 191
 21c:	80 93 34 01 	sts	0x0134, r24
    dataport &= ~_BV(LCD_DATA1_PIN);
 220:	80 91 34 01 	lds	r24, 0x0134
 224:	8f 7d       	andi	r24, 0xDF	; 223
 226:	80 93 34 01 	sts	0x0134, r24
    dataport &= ~_BV(LCD_DATA0_PIN);
 22a:	80 91 34 01 	lds	r24, 0x0134
 22e:	8f 7e       	andi	r24, 0xEF	; 239
 230:	80 93 34 01 	sts	0x0134, r24
	if(data & 0x80) dataport |= _BV(LCD_DATA3_PIN);
 234:	cc 23       	and	r28, r28
 236:	2c f4       	brge	.+10     	; 0x242 <lcd_write+0x68>
 238:	80 91 34 01 	lds	r24, 0x0134
 23c:	80 68       	ori	r24, 0x80	; 128
 23e:	80 93 34 01 	sts	0x0134, r24
	if(data & 0x40) dataport |= _BV(LCD_DATA2_PIN);
 242:	c6 ff       	sbrs	r28, 6
 244:	05 c0       	rjmp	.+10     	; 0x250 <lcd_write+0x76>
 246:	80 91 34 01 	lds	r24, 0x0134
 24a:	80 64       	ori	r24, 0x40	; 64
 24c:	80 93 34 01 	sts	0x0134, r24
	if(data & 0x20) dataport |= _BV(LCD_DATA1_PIN);
 250:	c5 ff       	sbrs	r28, 5
 252:	05 c0       	rjmp	.+10     	; 0x25e <lcd_write+0x84>
 254:	80 91 34 01 	lds	r24, 0x0134
 258:	80 62       	ori	r24, 0x20	; 32
 25a:	80 93 34 01 	sts	0x0134, r24
	if(data & 0x10) dataport |= _BV(LCD_DATA0_PIN);
 25e:	c4 ff       	sbrs	r28, 4
 260:	05 c0       	rjmp	.+10     	; 0x26c <lcd_write+0x92>
 262:	80 91 34 01 	lds	r24, 0x0134
 266:	80 61       	ori	r24, 0x10	; 16
 268:	80 93 34 01 	sts	0x0134, r24
	pcf8574_setoutput(LCD_PCF8574_DEVICEID, dataport);
 26c:	60 91 34 01 	lds	r22, 0x0134
 270:	80 e0       	ldi	r24, 0x00	; 0
 272:	0e 94 34 03 	call	0x668	; 0x668 <pcf8574_setoutput>
	lcd_e_toggle();
 276:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <toggle_e>

	/* output low nibble */
	dataport &= ~_BV(LCD_DATA3_PIN);
 27a:	80 91 34 01 	lds	r24, 0x0134
 27e:	8f 77       	andi	r24, 0x7F	; 127
 280:	80 93 34 01 	sts	0x0134, r24
	dataport &= ~_BV(LCD_DATA2_PIN);
 284:	80 91 34 01 	lds	r24, 0x0134
 288:	8f 7b       	andi	r24, 0xBF	; 191
 28a:	80 93 34 01 	sts	0x0134, r24
	dataport &= ~_BV(LCD_DATA1_PIN);
 28e:	80 91 34 01 	lds	r24, 0x0134
 292:	8f 7d       	andi	r24, 0xDF	; 223
 294:	80 93 34 01 	sts	0x0134, r24
	dataport &= ~_BV(LCD_DATA0_PIN);
 298:	80 91 34 01 	lds	r24, 0x0134
 29c:	8f 7e       	andi	r24, 0xEF	; 239
 29e:	80 93 34 01 	sts	0x0134, r24
	if(data & 0x08) dataport |= _BV(LCD_DATA3_PIN);
 2a2:	c3 ff       	sbrs	r28, 3
 2a4:	05 c0       	rjmp	.+10     	; 0x2b0 <lcd_write+0xd6>
 2a6:	80 91 34 01 	lds	r24, 0x0134
 2aa:	80 68       	ori	r24, 0x80	; 128
 2ac:	80 93 34 01 	sts	0x0134, r24
	if(data & 0x04) dataport |= _BV(LCD_DATA2_PIN);
 2b0:	c2 ff       	sbrs	r28, 2
 2b2:	05 c0       	rjmp	.+10     	; 0x2be <lcd_write+0xe4>
 2b4:	80 91 34 01 	lds	r24, 0x0134
 2b8:	80 64       	ori	r24, 0x40	; 64
 2ba:	80 93 34 01 	sts	0x0134, r24
	if(data & 0x02) dataport |= _BV(LCD_DATA1_PIN);
 2be:	c1 ff       	sbrs	r28, 1
 2c0:	05 c0       	rjmp	.+10     	; 0x2cc <lcd_write+0xf2>
 2c2:	80 91 34 01 	lds	r24, 0x0134
 2c6:	80 62       	ori	r24, 0x20	; 32
 2c8:	80 93 34 01 	sts	0x0134, r24
	if(data & 0x01) dataport |= _BV(LCD_DATA0_PIN);
 2cc:	c0 ff       	sbrs	r28, 0
 2ce:	05 c0       	rjmp	.+10     	; 0x2da <lcd_write+0x100>
 2d0:	80 91 34 01 	lds	r24, 0x0134
 2d4:	80 61       	ori	r24, 0x10	; 16
 2d6:	80 93 34 01 	sts	0x0134, r24
	pcf8574_setoutput(LCD_PCF8574_DEVICEID, dataport);
 2da:	60 91 34 01 	lds	r22, 0x0134
 2de:	80 e0       	ldi	r24, 0x00	; 0
 2e0:	0e 94 34 03 	call	0x668	; 0x668 <pcf8574_setoutput>
	lcd_e_toggle();
 2e4:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <toggle_e>

	/* all data pins high (inactive) */
	dataport |= _BV(LCD_DATA0_PIN);
 2e8:	80 91 34 01 	lds	r24, 0x0134
 2ec:	80 61       	ori	r24, 0x10	; 16
 2ee:	80 93 34 01 	sts	0x0134, r24
	dataport |= _BV(LCD_DATA1_PIN);
 2f2:	80 91 34 01 	lds	r24, 0x0134
 2f6:	80 62       	ori	r24, 0x20	; 32
 2f8:	80 93 34 01 	sts	0x0134, r24
	dataport |= _BV(LCD_DATA2_PIN);
 2fc:	80 91 34 01 	lds	r24, 0x0134
 300:	80 64       	ori	r24, 0x40	; 64
 302:	80 93 34 01 	sts	0x0134, r24
	dataport |= _BV(LCD_DATA3_PIN);
 306:	80 91 34 01 	lds	r24, 0x0134
 30a:	80 68       	ori	r24, 0x80	; 128
 30c:	80 93 34 01 	sts	0x0134, r24
	pcf8574_setoutput(LCD_PCF8574_DEVICEID, dataport);
 310:	60 91 34 01 	lds	r22, 0x0134
 314:	80 e0       	ldi	r24, 0x00	; 0
 316:	0e 94 34 03 	call	0x668	; 0x668 <pcf8574_setoutput>
}
 31a:	cf 91       	pop	r28
 31c:	08 95       	ret

0000031e <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
 31e:	cf 93       	push	r28
 320:	c8 2f       	mov	r28, r24
    lcd_waitbusy();
 322:	0e 94 d6 00 	call	0x1ac	; 0x1ac <lcd_waitbusy>
    lcd_write(cmd,0);
 326:	60 e0       	ldi	r22, 0x00	; 0
 328:	8c 2f       	mov	r24, r28
 32a:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_write>
}
 32e:	cf 91       	pop	r28
 330:	08 95       	ret

00000332 <lcd_gotoxy>:
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
#endif
#if LCD_LINES==4
    if ( y==0 )
 332:	61 11       	cpse	r22, r1
 334:	04 c0       	rjmp	.+8      	; 0x33e <lcd_gotoxy+0xc>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
 336:	80 58       	subi	r24, 0x80	; 128
 338:	0e 94 8f 01 	call	0x31e	; 0x31e <lcd_command>
 33c:	08 95       	ret
    else if ( y==1)
 33e:	61 30       	cpi	r22, 0x01	; 1
 340:	21 f4       	brne	.+8      	; 0x34a <lcd_gotoxy+0x18>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
 342:	80 54       	subi	r24, 0x40	; 64
 344:	0e 94 8f 01 	call	0x31e	; 0x31e <lcd_command>
 348:	08 95       	ret
    else if ( y==2)
 34a:	62 30       	cpi	r22, 0x02	; 2
 34c:	21 f4       	brne	.+8      	; 0x356 <lcd_gotoxy+0x24>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE3+x);
 34e:	8c 56       	subi	r24, 0x6C	; 108
 350:	0e 94 8f 01 	call	0x31e	; 0x31e <lcd_command>
 354:	08 95       	ret
    else /* y==3 */
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE4+x);
 356:	8c 52       	subi	r24, 0x2C	; 44
 358:	0e 94 8f 01 	call	0x31e	; 0x31e <lcd_command>
 35c:	08 95       	ret

0000035e <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1<<LCD_CLR);
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	0e 94 8f 01 	call	0x31e	; 0x31e <lcd_command>
 364:	08 95       	ret

00000366 <lcd_led>:
/*************************************************************************
Set illumination pin
*************************************************************************/
void lcd_led(uint8_t onoff)
{
	if(onoff)
 366:	88 23       	and	r24, r24
 368:	31 f0       	breq	.+12     	; 0x376 <lcd_led+0x10>
		dataport &= ~_BV(LCD_LED_PIN);
 36a:	80 91 34 01 	lds	r24, 0x0134
 36e:	87 7f       	andi	r24, 0xF7	; 247
 370:	80 93 34 01 	sts	0x0134, r24
 374:	05 c0       	rjmp	.+10     	; 0x380 <lcd_led+0x1a>
	else
		dataport |= _BV(LCD_LED_PIN);
 376:	80 91 34 01 	lds	r24, 0x0134
 37a:	88 60       	ori	r24, 0x08	; 8
 37c:	80 93 34 01 	sts	0x0134, r24
	pcf8574_setoutput(LCD_PCF8574_DEVICEID, dataport);
 380:	60 91 34 01 	lds	r22, 0x0134
 384:	80 e0       	ldi	r24, 0x00	; 0
 386:	0e 94 34 03 	call	0x668	; 0x668 <pcf8574_setoutput>
 38a:	08 95       	ret

0000038c <lcd_home>:
/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
    lcd_command(1<<LCD_HOME);
 38c:	82 e0       	ldi	r24, 0x02	; 2
 38e:	0e 94 8f 01 	call	0x31e	; 0x31e <lcd_command>
 392:	08 95       	ret

00000394 <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
 394:	cf 93       	push	r28
 396:	c8 2f       	mov	r28, r24
    uint8_t pos;

    pos = lcd_waitbusy();   // read busy-flag and address counter
 398:	0e 94 d6 00 	call	0x1ac	; 0x1ac <lcd_waitbusy>
    if (c=='\n')
 39c:	ca 30       	cpi	r28, 0x0A	; 10
 39e:	a9 f4       	brne	.+42     	; 0x3ca <lcd_putc+0x36>
        addressCounter = LCD_START_LINE2;
    else
        addressCounter = LCD_START_LINE1;
#endif
#if LCD_LINES==4
    if ( pos < LCD_START_LINE3 )
 3a0:	84 31       	cpi	r24, 0x14	; 20
 3a2:	50 f0       	brcs	.+20     	; 0x3b8 <lcd_putc+0x24>
        addressCounter = LCD_START_LINE2;
    else if ( (pos >= LCD_START_LINE2) && (pos < LCD_START_LINE4) )
 3a4:	90 ec       	ldi	r25, 0xC0	; 192
 3a6:	98 0f       	add	r25, r24
 3a8:	94 31       	cpi	r25, 0x14	; 20
 3aa:	40 f0       	brcs	.+16     	; 0x3bc <lcd_putc+0x28>
        addressCounter = LCD_START_LINE3;
    else if ( (pos >= LCD_START_LINE3) && (pos < LCD_START_LINE2) )
 3ac:	9c ee       	ldi	r25, 0xEC	; 236
 3ae:	98 0f       	add	r25, r24
 3b0:	9c 32       	cpi	r25, 0x2C	; 44
 3b2:	30 f4       	brcc	.+12     	; 0x3c0 <lcd_putc+0x2c>
        addressCounter = LCD_START_LINE4;
 3b4:	84 e5       	ldi	r24, 0x54	; 84
 3b6:	05 c0       	rjmp	.+10     	; 0x3c2 <lcd_putc+0x2e>
    else
        addressCounter = LCD_START_LINE1;
#endif
#if LCD_LINES==4
    if ( pos < LCD_START_LINE3 )
        addressCounter = LCD_START_LINE2;
 3b8:	80 e4       	ldi	r24, 0x40	; 64
 3ba:	03 c0       	rjmp	.+6      	; 0x3c2 <lcd_putc+0x2e>
    else if ( (pos >= LCD_START_LINE2) && (pos < LCD_START_LINE4) )
        addressCounter = LCD_START_LINE3;
 3bc:	84 e1       	ldi	r24, 0x14	; 20
 3be:	01 c0       	rjmp	.+2      	; 0x3c2 <lcd_putc+0x2e>
    else if ( (pos >= LCD_START_LINE3) && (pos < LCD_START_LINE2) )
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
 3c0:	80 e0       	ldi	r24, 0x00	; 0
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
 3c2:	80 58       	subi	r24, 0x80	; 128
 3c4:	0e 94 8f 01 	call	0x31e	; 0x31e <lcd_command>
 3c8:	21 c0       	rjmp	.+66     	; 0x40c <lcd_putc+0x78>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE2,0);    
        }else if ( pos == LCD_START_LINE2+LCD_DISP_LENGTH ){
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#elif LCD_LINES==4
        if ( pos == LCD_START_LINE1+LCD_DISP_LENGTH ) {
 3ca:	84 31       	cpi	r24, 0x14	; 20
 3cc:	29 f4       	brne	.+10     	; 0x3d8 <lcd_putc+0x44>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE2,0);    
 3ce:	60 e0       	ldi	r22, 0x00	; 0
 3d0:	80 ec       	ldi	r24, 0xC0	; 192
 3d2:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_write>
 3d6:	14 c0       	rjmp	.+40     	; 0x400 <lcd_putc+0x6c>
        }else if ( pos == LCD_START_LINE2+LCD_DISP_LENGTH ) {
 3d8:	84 35       	cpi	r24, 0x54	; 84
 3da:	29 f4       	brne	.+10     	; 0x3e6 <lcd_putc+0x52>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE3,0);
 3dc:	60 e0       	ldi	r22, 0x00	; 0
 3de:	84 e9       	ldi	r24, 0x94	; 148
 3e0:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_write>
 3e4:	0d c0       	rjmp	.+26     	; 0x400 <lcd_putc+0x6c>
        }else if ( pos == LCD_START_LINE3+LCD_DISP_LENGTH ) {
 3e6:	88 32       	cpi	r24, 0x28	; 40
 3e8:	29 f4       	brne	.+10     	; 0x3f4 <lcd_putc+0x60>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE4,0);
 3ea:	60 e0       	ldi	r22, 0x00	; 0
 3ec:	84 ed       	ldi	r24, 0xD4	; 212
 3ee:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_write>
 3f2:	06 c0       	rjmp	.+12     	; 0x400 <lcd_putc+0x6c>
        }else if ( pos == LCD_START_LINE4+LCD_DISP_LENGTH ) {
 3f4:	88 36       	cpi	r24, 0x68	; 104
 3f6:	21 f4       	brne	.+8      	; 0x400 <lcd_putc+0x6c>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
 3f8:	60 e0       	ldi	r22, 0x00	; 0
 3fa:	80 e8       	ldi	r24, 0x80	; 128
 3fc:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_write>
        }
#endif
        lcd_waitbusy();
 400:	0e 94 d6 00 	call	0x1ac	; 0x1ac <lcd_waitbusy>
#endif
        lcd_write(c, 1);
 404:	61 e0       	ldi	r22, 0x01	; 1
 406:	8c 2f       	mov	r24, r28
 408:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_write>
    }

}/* lcd_putc */
 40c:	cf 91       	pop	r28
 40e:	08 95       	ret

00000410 <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
 410:	cf 93       	push	r28
 412:	df 93       	push	r29
    register char c;

    while ( (c = *s++) ) {
 414:	ec 01       	movw	r28, r24
 416:	21 96       	adiw	r28, 0x01	; 1
 418:	fc 01       	movw	r30, r24
 41a:	80 81       	ld	r24, Z
 41c:	88 23       	and	r24, r24
 41e:	29 f0       	breq	.+10     	; 0x42a <lcd_puts+0x1a>
        lcd_putc(c);
 420:	0e 94 ca 01 	call	0x394	; 0x394 <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
 424:	89 91       	ld	r24, Y+
 426:	81 11       	cpse	r24, r1
 428:	fb cf       	rjmp	.-10     	; 0x420 <lcd_puts+0x10>
        lcd_putc(c);
    }

}/* lcd_puts */
 42a:	df 91       	pop	r29
 42c:	cf 91       	pop	r28
 42e:	08 95       	ret

00000430 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 430:	cf 93       	push	r28
 432:	c8 2f       	mov	r28, r24
	#if LCD_PCF8574_INIT == 1
	//init pcf8574
	pcf8574_init();
 434:	0e 94 0c 03 	call	0x618	; 0x618 <pcf8574_init>
	#endif

	dataport = 0;
 438:	10 92 34 01 	sts	0x0134, r1
	pcf8574_setoutput(LCD_PCF8574_DEVICEID, dataport);
 43c:	60 91 34 01 	lds	r22, 0x0134
 440:	80 e0       	ldi	r24, 0x00	; 0
 442:	0e 94 34 03 	call	0x668	; 0x668 <pcf8574_setoutput>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 446:	e0 e0       	ldi	r30, 0x00	; 0
 448:	fa ef       	ldi	r31, 0xFA	; 250
 44a:	31 97       	sbiw	r30, 0x01	; 1
 44c:	f1 f7       	brne	.-4      	; 0x44a <lcd_init+0x1a>
	pcf8574_setoutput(LCD_PCF8574_DEVICEID, dataport);

    delay(16000);        /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    dataport |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 44e:	80 91 34 01 	lds	r24, 0x0134
 452:	80 62       	ori	r24, 0x20	; 32
 454:	80 93 34 01 	sts	0x0134, r24
    dataport |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 458:	80 91 34 01 	lds	r24, 0x0134
 45c:	80 61       	ori	r24, 0x10	; 16
 45e:	80 93 34 01 	sts	0x0134, r24
    pcf8574_setoutput(LCD_PCF8574_DEVICEID, dataport);
 462:	60 91 34 01 	lds	r22, 0x0134
 466:	80 e0       	ldi	r24, 0x00	; 0
 468:	0e 94 34 03 	call	0x668	; 0x668 <pcf8574_setoutput>

    lcd_e_toggle();
 46c:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 470:	e0 e0       	ldi	r30, 0x00	; 0
 472:	fe e4       	ldi	r31, 0x4E	; 78
 474:	31 97       	sbiw	r30, 0x01	; 1
 476:	f1 f7       	brne	.-4      	; 0x474 <lcd_init+0x44>

    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 478:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 47c:	e0 e0       	ldi	r30, 0x00	; 0
 47e:	f1 e0       	ldi	r31, 0x01	; 1
 480:	31 97       	sbiw	r30, 0x01	; 1
 482:	f1 f7       	brne	.-4      	; 0x480 <lcd_init+0x50>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 484:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 488:	e0 e0       	ldi	r30, 0x00	; 0
 48a:	f1 e0       	ldi	r31, 0x01	; 1
 48c:	31 97       	sbiw	r30, 0x01	; 1
 48e:	f1 f7       	brne	.-4      	; 0x48c <lcd_init+0x5c>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    dataport &= ~_BV(LCD_DATA0_PIN);
 490:	80 91 34 01 	lds	r24, 0x0134
 494:	8f 7e       	andi	r24, 0xEF	; 239
 496:	80 93 34 01 	sts	0x0134, r24
    pcf8574_setoutput(LCD_PCF8574_DEVICEID, dataport);
 49a:	60 91 34 01 	lds	r22, 0x0134
 49e:	80 e0       	ldi	r24, 0x00	; 0
 4a0:	0e 94 34 03 	call	0x668	; 0x668 <pcf8574_setoutput>
    lcd_e_toggle();
 4a4:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 4a8:	e0 e0       	ldi	r30, 0x00	; 0
 4aa:	f1 e0       	ldi	r31, 0x01	; 1
 4ac:	31 97       	sbiw	r30, 0x01	; 1
 4ae:	f1 f7       	brne	.-4      	; 0x4ac <lcd_init+0x7c>
    lcd_e_toggle();
    delay(64);           /* some displays need this additional delay */
    
    /* from now the LCD only accepts 4 bit I/O, we can use lcd_command() */    

    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 4b0:	88 e2       	ldi	r24, 0x28	; 40
 4b2:	0e 94 8f 01 	call	0x31e	; 0x31e <lcd_command>

    lcd_command(LCD_DISP_OFF);              /* display off                  */
 4b6:	88 e0       	ldi	r24, 0x08	; 8
 4b8:	0e 94 8f 01 	call	0x31e	; 0x31e <lcd_command>
    lcd_clrscr();                           /* display clear                */
 4bc:	0e 94 af 01 	call	0x35e	; 0x35e <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 4c0:	86 e0       	ldi	r24, 0x06	; 6
 4c2:	0e 94 8f 01 	call	0x31e	; 0x31e <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 4c6:	8c 2f       	mov	r24, r28
 4c8:	0e 94 8f 01 	call	0x31e	; 0x31e <lcd_command>

}/* lcd_init */
 4cc:	cf 91       	pop	r28
 4ce:	08 95       	ret

000004d0 <__vector_4>:

//Variables/flags used in main for displaying "On/Off" state of the LEDs
volatile int ledD4Flag = 0, ledB0Flag = 0;

ISR(PCINT1_vect)
{
 4d0:	1f 92       	push	r1
 4d2:	0f 92       	push	r0
 4d4:	0f b6       	in	r0, 0x3f	; 63
 4d6:	0f 92       	push	r0
 4d8:	11 24       	eor	r1, r1
 4da:	8f 93       	push	r24
 4dc:	9f 93       	push	r25
	if(PINC & (1 << PORTC0))
 4de:	30 9b       	sbis	0x06, 0	; 6
 4e0:	08 c0       	rjmp	.+16     	; 0x4f2 <__vector_4+0x22>
	{
		//If the switch is pressed, turn on the LED
		PORTB |= (1 << PORTB0);
 4e2:	28 9a       	sbi	0x05, 0	; 5
		ledB0Flag = 1;
 4e4:	81 e0       	ldi	r24, 0x01	; 1
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	90 93 36 01 	sts	0x0136, r25
 4ec:	80 93 35 01 	sts	0x0135, r24
 4f0:	06 c0       	rjmp	.+12     	; 0x4fe <__vector_4+0x2e>
	}
	else if(!(PINC & (PORTC0)))
 4f2:	86 b1       	in	r24, 0x06	; 6
	{
		//If the switch is not pressed, turn off the LED
		PORTB &= ~(1 << PORTB0);
 4f4:	28 98       	cbi	0x05, 0	; 5
		ledB0Flag = 0;
 4f6:	10 92 36 01 	sts	0x0136, r1
 4fa:	10 92 35 01 	sts	0x0135, r1
	}
}
 4fe:	9f 91       	pop	r25
 500:	8f 91       	pop	r24
 502:	0f 90       	pop	r0
 504:	0f be       	out	0x3f, r0	; 63
 506:	0f 90       	pop	r0
 508:	1f 90       	pop	r1
 50a:	18 95       	reti

0000050c <__vector_5>:

ISR(PCINT2_vect)
{
 50c:	1f 92       	push	r1
 50e:	0f 92       	push	r0
 510:	0f b6       	in	r0, 0x3f	; 63
 512:	0f 92       	push	r0
 514:	11 24       	eor	r1, r1
 516:	8f 93       	push	r24
 518:	9f 93       	push	r25
	if(PIND & (1 << PORTD7))
 51a:	4f 9b       	sbis	0x09, 7	; 9
 51c:	08 c0       	rjmp	.+16     	; 0x52e <__vector_5+0x22>
	{
		//If the switch is pressed, turn on the LED
		PORTD |= (1 << PORTD4);
 51e:	5c 9a       	sbi	0x0b, 4	; 11
		ledD4Flag = 1;
 520:	81 e0       	ldi	r24, 0x01	; 1
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	90 93 38 01 	sts	0x0138, r25
 528:	80 93 37 01 	sts	0x0137, r24
 52c:	07 c0       	rjmp	.+14     	; 0x53c <__vector_5+0x30>
	}
	//If the switch is not pressed, turn off the LED
	else if(!(PIND & (1 << PORTD7)))
 52e:	4f 99       	sbic	0x09, 7	; 9
 530:	05 c0       	rjmp	.+10     	; 0x53c <__vector_5+0x30>
	{
		PORTD &= ~(1 << PORTD4);
 532:	5c 98       	cbi	0x0b, 4	; 11
		ledD4Flag = 0;
 534:	10 92 38 01 	sts	0x0138, r1
 538:	10 92 37 01 	sts	0x0137, r1
	}
}
 53c:	9f 91       	pop	r25
 53e:	8f 91       	pop	r24
 540:	0f 90       	pop	r0
 542:	0f be       	out	0x3f, r0	; 63
 544:	0f 90       	pop	r0
 546:	1f 90       	pop	r1
 548:	18 95       	reti

0000054a <main>:

int main(void)
{
	//LCD initialization with display ON, cursor OFF
	lcd_init(LCD_DISP_ON);
 54a:	8c e0       	ldi	r24, 0x0C	; 12
 54c:	0e 94 18 02 	call	0x430	; 0x430 <lcd_init>
	//Variable used to illuminate LCD (0 = on, 1 = off)
	uint8_t led = 0;
	//Illuminate the LCD
	lcd_led(led);
 550:	80 e0       	ldi	r24, 0x00	; 0
 552:	0e 94 b3 01 	call	0x366	; 0x366 <lcd_led>
	
	//Set Pin D4 as output
	DDRD |= (1 << PORTD4);
 556:	54 9a       	sbi	0x0a, 4	; 10
	//Set Pin D7 as input
	DDRD &= ~(1 << PORTD7);
 558:	57 98       	cbi	0x0a, 7	; 10
	//Enable Pin D7 pull-up resistor
	PORTD |= (1 << PORTD7);
 55a:	5f 9a       	sbi	0x0b, 7	; 11
	//Enable Pin Change Interrupt
	PCICR = (1 << PCIE2);
 55c:	e8 e6       	ldi	r30, 0x68	; 104
 55e:	f0 e0       	ldi	r31, 0x00	; 0
 560:	84 e0       	ldi	r24, 0x04	; 4
 562:	80 83       	st	Z, r24
	//Enable PCINT23 (Pin D7)
	PCMSK2 = (1 << PCINT23);
 564:	80 e8       	ldi	r24, 0x80	; 128
 566:	80 93 6d 00 	sts	0x006D, r24
	
	//Set Pin B0 as output
	DDRB |= (1 << PORTB0);
 56a:	20 9a       	sbi	0x04, 0	; 4
	//Set Pin C0 as input
	DDRD &= ~(1 << PORTC0);
 56c:	50 98       	cbi	0x0a, 0	; 10
	//Enable Pin C0 pull-up resistor
	PORTD |= (1 << PORTC0);
 56e:	58 9a       	sbi	0x0b, 0	; 11
	//Enable Pin Change Interrupt
	PCICR |= (1 << PCIE1);
 570:	80 81       	ld	r24, Z
 572:	82 60       	ori	r24, 0x02	; 2
 574:	80 83       	st	Z, r24
	//Enable PCINT8 (Pin A0)
	PCMSK1 |= (1 << PCINT8);
 576:	ec e6       	ldi	r30, 0x6C	; 108
 578:	f0 e0       	ldi	r31, 0x00	; 0
 57a:	80 81       	ld	r24, Z
 57c:	81 60       	ori	r24, 0x01	; 1
 57e:	80 83       	st	Z, r24
	
	//Enable global interrupts
	sei();
 580:	78 94       	sei
	//LCD clear screen
	lcd_clrscr();
 582:	0e 94 af 01 	call	0x35e	; 0x35e <lcd_clrscr>
	
    while(1)
    {
        if(ledD4Flag == 1)
 586:	80 91 37 01 	lds	r24, 0x0137
 58a:	90 91 38 01 	lds	r25, 0x0138
 58e:	01 97       	sbiw	r24, 0x01	; 1
 590:	99 f4       	brne	.+38     	; 0x5b8 <main+0x6e>
		{
			//Set cursor on line 1
			lcd_home();
 592:	0e 94 c6 01 	call	0x38c	; 0x38c <lcd_home>
			lcd_gotoxy(0, 0);
 596:	60 e0       	ldi	r22, 0x00	; 0
 598:	80 e0       	ldi	r24, 0x00	; 0
 59a:	0e 94 99 01 	call	0x332	; 0x332 <lcd_gotoxy>
			lcd_puts("     LED ");
 59e:	80 e0       	ldi	r24, 0x00	; 0
 5a0:	91 e0       	ldi	r25, 0x01	; 1
 5a2:	0e 94 08 02 	call	0x410	; 0x410 <lcd_puts>
			lcd_gotoxy(9, 0);
 5a6:	60 e0       	ldi	r22, 0x00	; 0
 5a8:	89 e0       	ldi	r24, 0x09	; 9
 5aa:	0e 94 99 01 	call	0x332	; 0x332 <lcd_gotoxy>
			lcd_puts("D4 On!    ");
 5ae:	8a e0       	ldi	r24, 0x0A	; 10
 5b0:	91 e0       	ldi	r25, 0x01	; 1
 5b2:	0e 94 08 02 	call	0x410	; 0x410 <lcd_puts>
 5b6:	e7 cf       	rjmp	.-50     	; 0x586 <main+0x3c>
		}
		else if(ledB0Flag == 1)
 5b8:	80 91 35 01 	lds	r24, 0x0135
 5bc:	90 91 36 01 	lds	r25, 0x0136
 5c0:	01 97       	sbiw	r24, 0x01	; 1
 5c2:	99 f4       	brne	.+38     	; 0x5ea <main+0xa0>
		{
			//Set cursor on line 1
			lcd_home();
 5c4:	0e 94 c6 01 	call	0x38c	; 0x38c <lcd_home>
			lcd_gotoxy(0, 0);
 5c8:	60 e0       	ldi	r22, 0x00	; 0
 5ca:	80 e0       	ldi	r24, 0x00	; 0
 5cc:	0e 94 99 01 	call	0x332	; 0x332 <lcd_gotoxy>
			lcd_puts("     LED ");
 5d0:	80 e0       	ldi	r24, 0x00	; 0
 5d2:	91 e0       	ldi	r25, 0x01	; 1
 5d4:	0e 94 08 02 	call	0x410	; 0x410 <lcd_puts>
			lcd_gotoxy(9, 0);
 5d8:	60 e0       	ldi	r22, 0x00	; 0
 5da:	89 e0       	ldi	r24, 0x09	; 9
 5dc:	0e 94 99 01 	call	0x332	; 0x332 <lcd_gotoxy>
			lcd_puts("B0 On!    ");
 5e0:	85 e1       	ldi	r24, 0x15	; 21
 5e2:	91 e0       	ldi	r25, 0x01	; 1
 5e4:	0e 94 08 02 	call	0x410	; 0x410 <lcd_puts>
 5e8:	ce cf       	rjmp	.-100    	; 0x586 <main+0x3c>
		}
		else if((ledD4Flag == 0) && (ledB0Flag == 0))
 5ea:	80 91 37 01 	lds	r24, 0x0137
 5ee:	90 91 38 01 	lds	r25, 0x0138
 5f2:	89 2b       	or	r24, r25
 5f4:	41 f6       	brne	.-112    	; 0x586 <main+0x3c>
 5f6:	80 91 35 01 	lds	r24, 0x0135
 5fa:	90 91 36 01 	lds	r25, 0x0136
 5fe:	89 2b       	or	r24, r25
 600:	11 f6       	brne	.-124    	; 0x586 <main+0x3c>
		{
			//Set cursor on line 1
			lcd_home();
 602:	0e 94 c6 01 	call	0x38c	; 0x38c <lcd_home>
			lcd_gotoxy(0, 0);
 606:	60 e0       	ldi	r22, 0x00	; 0
 608:	80 e0       	ldi	r24, 0x00	; 0
 60a:	0e 94 99 01 	call	0x332	; 0x332 <lcd_gotoxy>
			lcd_puts("LEDs B0 and D4 Off!");
 60e:	80 e2       	ldi	r24, 0x20	; 32
 610:	91 e0       	ldi	r25, 0x01	; 1
 612:	0e 94 08 02 	call	0x410	; 0x410 <lcd_puts>
 616:	b7 cf       	rjmp	.-146    	; 0x586 <main+0x3c>

00000618 <pcf8574_init>:
 * initialize
 */
void pcf8574_init() {
	#if PCF8574_I2CINIT == 1
	//init i2c
	i2c_init();
 618:	0e 94 53 00 	call	0xa6	; 0xa6 <i2c_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 61c:	85 e3       	ldi	r24, 0x35	; 53
 61e:	8a 95       	dec	r24
 620:	f1 f7       	brne	.-4      	; 0x61e <pcf8574_init+0x6>
 622:	00 00       	nop
 624:	80 e0       	ldi	r24, 0x00	; 0
 626:	90 e0       	ldi	r25, 0x00	; 0
	#endif

	//reset the pin status
	uint8_t i = 0;
	for(i=0; i<PCF8574_MAXDEVICES; i++)
		pcf8574_pinstatus[i] = 0;
 628:	fc 01       	movw	r30, r24
 62a:	e7 5c       	subi	r30, 0xC7	; 199
 62c:	fe 4f       	sbci	r31, 0xFE	; 254
 62e:	10 82       	st	Z, r1
 630:	01 96       	adiw	r24, 0x01	; 1
	_delay_us(10);
	#endif

	//reset the pin status
	uint8_t i = 0;
	for(i=0; i<PCF8574_MAXDEVICES; i++)
 632:	88 30       	cpi	r24, 0x08	; 8
 634:	91 05       	cpc	r25, r1
 636:	c1 f7       	brne	.-16     	; 0x628 <pcf8574_init+0x10>
		pcf8574_pinstatus[i] = 0;

}
 638:	08 95       	ret

0000063a <pcf8574_getoutputpin>:
/*
 * get output pin status
 */
int8_t pcf8574_getoutputpin(uint8_t deviceid, uint8_t pin) {
	int8_t data = -1;
	if((deviceid >= 0 && deviceid < PCF8574_MAXDEVICES) && (pin >= 0 && pin < PCF8574_MAXPINS)) {
 63a:	88 30       	cpi	r24, 0x08	; 8
 63c:	88 f4       	brcc	.+34     	; 0x660 <pcf8574_getoutputpin+0x26>
 63e:	68 30       	cpi	r22, 0x08	; 8
 640:	88 f4       	brcc	.+34     	; 0x664 <pcf8574_getoutputpin+0x2a>
		data = pcf8574_pinstatus[deviceid];
 642:	e8 2f       	mov	r30, r24
 644:	f0 e0       	ldi	r31, 0x00	; 0
 646:	e7 5c       	subi	r30, 0xC7	; 199
 648:	fe 4f       	sbci	r31, 0xFE	; 254
 64a:	80 81       	ld	r24, Z
		data = (data >> pin) & 0b00000001;
 64c:	99 27       	eor	r25, r25
 64e:	87 fd       	sbrc	r24, 7
 650:	90 95       	com	r25
 652:	02 c0       	rjmp	.+4      	; 0x658 <pcf8574_getoutputpin+0x1e>
 654:	95 95       	asr	r25
 656:	87 95       	ror	r24
 658:	6a 95       	dec	r22
 65a:	e2 f7       	brpl	.-8      	; 0x654 <pcf8574_getoutputpin+0x1a>
 65c:	81 70       	andi	r24, 0x01	; 1
 65e:	08 95       	ret

/*
 * get output pin status
 */
int8_t pcf8574_getoutputpin(uint8_t deviceid, uint8_t pin) {
	int8_t data = -1;
 660:	8f ef       	ldi	r24, 0xFF	; 255
 662:	08 95       	ret
 664:	8f ef       	ldi	r24, 0xFF	; 255
	if((deviceid >= 0 && deviceid < PCF8574_MAXDEVICES) && (pin >= 0 && pin < PCF8574_MAXPINS)) {
		data = pcf8574_pinstatus[deviceid];
		data = (data >> pin) & 0b00000001;
	}
	return data;
}
 666:	08 95       	ret

00000668 <pcf8574_setoutput>:

/*
 * set output pins
 */
int8_t pcf8574_setoutput(uint8_t deviceid, uint8_t data) {
 668:	cf 93       	push	r28
 66a:	c6 2f       	mov	r28, r22
	if((deviceid >= 0 && deviceid < PCF8574_MAXDEVICES)) {
 66c:	88 30       	cpi	r24, 0x08	; 8
 66e:	80 f4       	brcc	.+32     	; 0x690 <pcf8574_setoutput+0x28>
		pcf8574_pinstatus[deviceid] = data;
 670:	e8 2f       	mov	r30, r24
 672:	f0 e0       	ldi	r31, 0x00	; 0
 674:	e7 5c       	subi	r30, 0xC7	; 199
 676:	fe 4f       	sbci	r31, 0xFE	; 254
 678:	60 83       	st	Z, r22
		i2c_start(((PCF8574_ADDRBASE+deviceid)<<1) | I2C_WRITE);
 67a:	81 5c       	subi	r24, 0xC1	; 193
 67c:	88 0f       	add	r24, r24
 67e:	0e 94 59 00 	call	0xb2	; 0xb2 <i2c_start>
		i2c_write(data);
 682:	8c 2f       	mov	r24, r28
 684:	0e 94 89 00 	call	0x112	; 0x112 <i2c_write>
		i2c_stop();
 688:	0e 94 80 00 	call	0x100	; 0x100 <i2c_stop>
		return 0;
 68c:	80 e0       	ldi	r24, 0x00	; 0
 68e:	01 c0       	rjmp	.+2      	; 0x692 <pcf8574_setoutput+0x2a>
	}
	return -1;
 690:	8f ef       	ldi	r24, 0xFF	; 255
}
 692:	cf 91       	pop	r28
 694:	08 95       	ret

00000696 <pcf8574_setoutputpin>:
}

/*
 * set output pin
 */
int8_t pcf8574_setoutputpin(uint8_t deviceid, uint8_t pin, uint8_t data) {
 696:	cf 93       	push	r28
	if((deviceid >= 0 && deviceid < PCF8574_MAXDEVICES) && (pin >= 0 && pin < PCF8574_MAXPINS)) {
 698:	88 30       	cpi	r24, 0x08	; 8
 69a:	70 f5       	brcc	.+92     	; 0x6f8 <pcf8574_setoutputpin+0x62>
 69c:	68 30       	cpi	r22, 0x08	; 8
 69e:	70 f5       	brcc	.+92     	; 0x6fc <pcf8574_setoutputpin+0x66>
	    uint8_t b = 0;
	    b = pcf8574_pinstatus[deviceid];
 6a0:	28 2f       	mov	r18, r24
 6a2:	30 e0       	ldi	r19, 0x00	; 0
 6a4:	f9 01       	movw	r30, r18
 6a6:	e7 5c       	subi	r30, 0xC7	; 199
 6a8:	fe 4f       	sbci	r31, 0xFE	; 254
 6aa:	c0 81       	ld	r28, Z
	    b = (data != 0) ? (b | (1 << pin)) : (b & ~(1 << pin));
 6ac:	44 23       	and	r20, r20
 6ae:	51 f0       	breq	.+20     	; 0x6c4 <pcf8574_setoutputpin+0x2e>
 6b0:	e1 e0       	ldi	r30, 0x01	; 1
 6b2:	f0 e0       	ldi	r31, 0x00	; 0
 6b4:	af 01       	movw	r20, r30
 6b6:	02 c0       	rjmp	.+4      	; 0x6bc <pcf8574_setoutputpin+0x26>
 6b8:	44 0f       	add	r20, r20
 6ba:	55 1f       	adc	r21, r21
 6bc:	6a 95       	dec	r22
 6be:	e2 f7       	brpl	.-8      	; 0x6b8 <pcf8574_setoutputpin+0x22>
 6c0:	c4 2b       	or	r28, r20
 6c2:	0b c0       	rjmp	.+22     	; 0x6da <pcf8574_setoutputpin+0x44>
 6c4:	41 e0       	ldi	r20, 0x01	; 1
 6c6:	50 e0       	ldi	r21, 0x00	; 0
 6c8:	fa 01       	movw	r30, r20
 6ca:	02 c0       	rjmp	.+4      	; 0x6d0 <pcf8574_setoutputpin+0x3a>
 6cc:	ee 0f       	add	r30, r30
 6ce:	ff 1f       	adc	r31, r31
 6d0:	6a 95       	dec	r22
 6d2:	e2 f7       	brpl	.-8      	; 0x6cc <pcf8574_setoutputpin+0x36>
 6d4:	bf 01       	movw	r22, r30
 6d6:	60 95       	com	r22
 6d8:	c6 23       	and	r28, r22
	    pcf8574_pinstatus[deviceid] = b;
 6da:	f9 01       	movw	r30, r18
 6dc:	e7 5c       	subi	r30, 0xC7	; 199
 6de:	fe 4f       	sbci	r31, 0xFE	; 254
 6e0:	c0 83       	st	Z, r28
	    //update device
		i2c_start(((PCF8574_ADDRBASE+deviceid)<<1) | I2C_WRITE);
 6e2:	81 5c       	subi	r24, 0xC1	; 193
 6e4:	88 0f       	add	r24, r24
 6e6:	0e 94 59 00 	call	0xb2	; 0xb2 <i2c_start>
		i2c_write(b);
 6ea:	8c 2f       	mov	r24, r28
 6ec:	0e 94 89 00 	call	0x112	; 0x112 <i2c_write>
		i2c_stop();
 6f0:	0e 94 80 00 	call	0x100	; 0x100 <i2c_stop>
		return 0;
 6f4:	80 e0       	ldi	r24, 0x00	; 0
 6f6:	03 c0       	rjmp	.+6      	; 0x6fe <pcf8574_setoutputpin+0x68>
	}
	return -1;
 6f8:	8f ef       	ldi	r24, 0xFF	; 255
 6fa:	01 c0       	rjmp	.+2      	; 0x6fe <pcf8574_setoutputpin+0x68>
 6fc:	8f ef       	ldi	r24, 0xFF	; 255
}
 6fe:	cf 91       	pop	r28
 700:	08 95       	ret

00000702 <pcf8574_setoutputpinhigh>:

/*
 * set output pin high
 */
int8_t pcf8574_setoutputpinhigh(uint8_t deviceid, uint8_t pin) {
	return pcf8574_setoutputpin(deviceid, pin, 1);
 702:	41 e0       	ldi	r20, 0x01	; 1
 704:	0e 94 4b 03 	call	0x696	; 0x696 <pcf8574_setoutputpin>
}
 708:	08 95       	ret

0000070a <pcf8574_setoutputpinlow>:

/*
 * set output pin low
 */
int8_t pcf8574_setoutputpinlow(uint8_t deviceid, uint8_t pin) {
	return pcf8574_setoutputpin(deviceid, pin, 0);
 70a:	40 e0       	ldi	r20, 0x00	; 0
 70c:	0e 94 4b 03 	call	0x696	; 0x696 <pcf8574_setoutputpin>
}
 710:	08 95       	ret

00000712 <_exit>:
 712:	f8 94       	cli

00000714 <__stop_program>:
 714:	ff cf       	rjmp	.-2      	; 0x714 <__stop_program>
