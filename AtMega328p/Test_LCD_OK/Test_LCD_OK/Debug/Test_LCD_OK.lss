
Test_LCD_OK.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800200  000002a0  00000314  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002a0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000098  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000820  00000000  00000000  000003e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000036d  00000000  00000000  00000c08  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000054e  00000000  00000000  00000f75  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000130  00000000  00000000  000014c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000286  00000000  00000000  000015f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000465  00000000  00000000  0000187a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000090  00000000  00000000  00001cdf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	86 c0       	rjmp	.+268    	; 0x112 <__bad_interrupt>
   6:	00 00       	nop
   8:	84 c0       	rjmp	.+264    	; 0x112 <__bad_interrupt>
   a:	00 00       	nop
   c:	82 c0       	rjmp	.+260    	; 0x112 <__bad_interrupt>
   e:	00 00       	nop
  10:	80 c0       	rjmp	.+256    	; 0x112 <__bad_interrupt>
  12:	00 00       	nop
  14:	7e c0       	rjmp	.+252    	; 0x112 <__bad_interrupt>
  16:	00 00       	nop
  18:	7c c0       	rjmp	.+248    	; 0x112 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7a c0       	rjmp	.+244    	; 0x112 <__bad_interrupt>
  1e:	00 00       	nop
  20:	78 c0       	rjmp	.+240    	; 0x112 <__bad_interrupt>
  22:	00 00       	nop
  24:	76 c0       	rjmp	.+236    	; 0x112 <__bad_interrupt>
  26:	00 00       	nop
  28:	74 c0       	rjmp	.+232    	; 0x112 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	72 c0       	rjmp	.+228    	; 0x112 <__bad_interrupt>
  2e:	00 00       	nop
  30:	70 c0       	rjmp	.+224    	; 0x112 <__bad_interrupt>
  32:	00 00       	nop
  34:	6e c0       	rjmp	.+220    	; 0x112 <__bad_interrupt>
  36:	00 00       	nop
  38:	6c c0       	rjmp	.+216    	; 0x112 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6a c0       	rjmp	.+212    	; 0x112 <__bad_interrupt>
  3e:	00 00       	nop
  40:	68 c0       	rjmp	.+208    	; 0x112 <__bad_interrupt>
  42:	00 00       	nop
  44:	66 c0       	rjmp	.+204    	; 0x112 <__bad_interrupt>
  46:	00 00       	nop
  48:	64 c0       	rjmp	.+200    	; 0x112 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	62 c0       	rjmp	.+196    	; 0x112 <__bad_interrupt>
  4e:	00 00       	nop
  50:	60 c0       	rjmp	.+192    	; 0x112 <__bad_interrupt>
  52:	00 00       	nop
  54:	5e c0       	rjmp	.+188    	; 0x112 <__bad_interrupt>
  56:	00 00       	nop
  58:	5c c0       	rjmp	.+184    	; 0x112 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5a c0       	rjmp	.+180    	; 0x112 <__bad_interrupt>
  5e:	00 00       	nop
  60:	58 c0       	rjmp	.+176    	; 0x112 <__bad_interrupt>
  62:	00 00       	nop
  64:	56 c0       	rjmp	.+172    	; 0x112 <__bad_interrupt>
  66:	00 00       	nop
  68:	54 c0       	rjmp	.+168    	; 0x112 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	52 c0       	rjmp	.+164    	; 0x112 <__bad_interrupt>
  6e:	00 00       	nop
  70:	50 c0       	rjmp	.+160    	; 0x112 <__bad_interrupt>
  72:	00 00       	nop
  74:	4e c0       	rjmp	.+156    	; 0x112 <__bad_interrupt>
  76:	00 00       	nop
  78:	4c c0       	rjmp	.+152    	; 0x112 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4a c0       	rjmp	.+148    	; 0x112 <__bad_interrupt>
  7e:	00 00       	nop
  80:	48 c0       	rjmp	.+144    	; 0x112 <__bad_interrupt>
  82:	00 00       	nop
  84:	46 c0       	rjmp	.+140    	; 0x112 <__bad_interrupt>
  86:	00 00       	nop
  88:	44 c0       	rjmp	.+136    	; 0x112 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	42 c0       	rjmp	.+132    	; 0x112 <__bad_interrupt>
  8e:	00 00       	nop
  90:	40 c0       	rjmp	.+128    	; 0x112 <__bad_interrupt>
  92:	00 00       	nop
  94:	3e c0       	rjmp	.+124    	; 0x112 <__bad_interrupt>
  96:	00 00       	nop
  98:	3c c0       	rjmp	.+120    	; 0x112 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	3a c0       	rjmp	.+116    	; 0x112 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	38 c0       	rjmp	.+112    	; 0x112 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	36 c0       	rjmp	.+108    	; 0x112 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	34 c0       	rjmp	.+104    	; 0x112 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	32 c0       	rjmp	.+100    	; 0x112 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	30 c0       	rjmp	.+96     	; 0x112 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	2e c0       	rjmp	.+92     	; 0x112 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	2c c0       	rjmp	.+88     	; 0x112 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	2a c0       	rjmp	.+84     	; 0x112 <__bad_interrupt>
  be:	00 00       	nop
  c0:	28 c0       	rjmp	.+80     	; 0x112 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	26 c0       	rjmp	.+76     	; 0x112 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	24 c0       	rjmp	.+72     	; 0x112 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	22 c0       	rjmp	.+68     	; 0x112 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	20 c0       	rjmp	.+64     	; 0x112 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	1e c0       	rjmp	.+60     	; 0x112 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	1c c0       	rjmp	.+56     	; 0x112 <__bad_interrupt>
  da:	00 00       	nop
  dc:	1a c0       	rjmp	.+52     	; 0x112 <__bad_interrupt>
  de:	00 00       	nop
  e0:	18 c0       	rjmp	.+48     	; 0x112 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e0 ea       	ldi	r30, 0xA0	; 160
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ac 30       	cpi	r26, 0x0C	; 12
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	85 d0       	rcall	.+266    	; 0x21a <main>
 110:	c5 c0       	rjmp	.+394    	; 0x29c <_exit>

00000112 <__bad_interrupt>:
 112:	76 cf       	rjmp	.-276    	; 0x0 <__vectors>

00000114 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
 114:	12 9a       	sbi	0x02, 2	; 2
 116:	00 c0       	rjmp	.+0      	; 0x118 <toggle_e+0x4>
 118:	12 98       	cbi	0x02, 2	; 2
 11a:	08 95       	ret

0000011c <lcd_write>:
 11c:	cf 93       	push	r28
 11e:	c8 2f       	mov	r28, r24
 120:	66 23       	and	r22, r22
 122:	11 f0       	breq	.+4      	; 0x128 <lcd_write+0xc>
 124:	10 9a       	sbi	0x02, 0	; 2
 126:	01 c0       	rjmp	.+2      	; 0x12a <lcd_write+0xe>
 128:	10 98       	cbi	0x02, 0	; 2
 12a:	0b 9a       	sbi	0x01, 3	; 1
 12c:	0c 9a       	sbi	0x01, 4	; 1
 12e:	0d 9a       	sbi	0x01, 5	; 1
 130:	0e 9a       	sbi	0x01, 6	; 1
 132:	16 98       	cbi	0x02, 6	; 2
 134:	15 98       	cbi	0x02, 5	; 2
 136:	14 98       	cbi	0x02, 4	; 2
 138:	13 98       	cbi	0x02, 3	; 2
 13a:	cc 23       	and	r28, r28
 13c:	0c f4       	brge	.+2      	; 0x140 <lcd_write+0x24>
 13e:	16 9a       	sbi	0x02, 6	; 2
 140:	c6 fd       	sbrc	r28, 6
 142:	15 9a       	sbi	0x02, 5	; 2
 144:	c5 fd       	sbrc	r28, 5
 146:	14 9a       	sbi	0x02, 4	; 2
 148:	c4 fd       	sbrc	r28, 4
 14a:	13 9a       	sbi	0x02, 3	; 2
 14c:	e3 df       	rcall	.-58     	; 0x114 <toggle_e>
 14e:	16 98       	cbi	0x02, 6	; 2
 150:	15 98       	cbi	0x02, 5	; 2
 152:	14 98       	cbi	0x02, 4	; 2
 154:	13 98       	cbi	0x02, 3	; 2
 156:	c3 fd       	sbrc	r28, 3
 158:	16 9a       	sbi	0x02, 6	; 2
 15a:	c2 fd       	sbrc	r28, 2
 15c:	15 9a       	sbi	0x02, 5	; 2
 15e:	c1 fd       	sbrc	r28, 1
 160:	14 9a       	sbi	0x02, 4	; 2
 162:	c0 fd       	sbrc	r28, 0
 164:	13 9a       	sbi	0x02, 3	; 2
 166:	d6 df       	rcall	.-84     	; 0x114 <toggle_e>
 168:	13 9a       	sbi	0x02, 3	; 2
 16a:	14 9a       	sbi	0x02, 4	; 2
 16c:	15 9a       	sbi	0x02, 5	; 2
 16e:	16 9a       	sbi	0x02, 6	; 2
 170:	cf 91       	pop	r28
 172:	08 95       	ret

00000174 <lcd_command>:
 174:	e0 ea       	ldi	r30, 0xA0	; 160
 176:	ff e0       	ldi	r31, 0x0F	; 15
 178:	31 97       	sbiw	r30, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <lcd_command+0x4>
 17c:	60 e0       	ldi	r22, 0x00	; 0
 17e:	ce cf       	rjmp	.-100    	; 0x11c <lcd_write>
 180:	08 95       	ret

00000182 <lcd_clrscr>:
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	f7 cf       	rjmp	.-18     	; 0x174 <lcd_command>
 186:	08 95       	ret

00000188 <lcd_putc>:
 188:	e0 ea       	ldi	r30, 0xA0	; 160
 18a:	ff e0       	ldi	r31, 0x0F	; 15
 18c:	31 97       	sbiw	r30, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <lcd_putc+0x4>
 190:	8a 30       	cpi	r24, 0x0A	; 10
 192:	19 f4       	brne	.+6      	; 0x19a <lcd_putc+0x12>
 194:	80 ec       	ldi	r24, 0xC0	; 192
 196:	ee cf       	rjmp	.-36     	; 0x174 <lcd_command>
 198:	08 95       	ret
 19a:	61 e0       	ldi	r22, 0x01	; 1
 19c:	bf cf       	rjmp	.-130    	; 0x11c <lcd_write>
 19e:	08 95       	ret

000001a0 <lcd_puts>:
 1a0:	cf 93       	push	r28
 1a2:	df 93       	push	r29
 1a4:	ec 01       	movw	r28, r24
 1a6:	21 96       	adiw	r28, 0x01	; 1
 1a8:	fc 01       	movw	r30, r24
 1aa:	80 81       	ld	r24, Z
 1ac:	88 23       	and	r24, r24
 1ae:	21 f0       	breq	.+8      	; 0x1b8 <lcd_puts+0x18>
 1b0:	eb df       	rcall	.-42     	; 0x188 <lcd_putc>
 1b2:	89 91       	ld	r24, Y+
 1b4:	81 11       	cpse	r24, r1
 1b6:	fc cf       	rjmp	.-8      	; 0x1b0 <lcd_puts+0x10>
 1b8:	df 91       	pop	r29
 1ba:	cf 91       	pop	r28
 1bc:	08 95       	ret

000001be <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 1be:	cf 93       	push	r28
 1c0:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 1c2:	08 9a       	sbi	0x01, 0	; 1
#if LCD_READ_REQUIRED
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
#endif
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 1c4:	0a 9a       	sbi	0x01, 2	; 1
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 1c6:	0b 9a       	sbi	0x01, 3	; 1
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 1c8:	0c 9a       	sbi	0x01, 4	; 1
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 1ca:	0d 9a       	sbi	0x01, 5	; 1
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 1cc:	0e 9a       	sbi	0x01, 6	; 1
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1ce:	e0 e0       	ldi	r30, 0x00	; 0
 1d0:	fa ef       	ldi	r31, 0xFA	; 250
 1d2:	31 97       	sbiw	r30, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <lcd_init+0x14>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 1d6:	14 9a       	sbi	0x02, 4	; 2
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 1d8:	13 9a       	sbi	0x02, 3	; 2
    lcd_e_toggle();
 1da:	9c df       	rcall	.-200    	; 0x114 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1dc:	e0 e0       	ldi	r30, 0x00	; 0
 1de:	fe e4       	ldi	r31, 0x4E	; 78
 1e0:	31 97       	sbiw	r30, 0x01	; 1
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <lcd_init+0x22>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 1e4:	97 df       	rcall	.-210    	; 0x114 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1e6:	e0 e0       	ldi	r30, 0x00	; 0
 1e8:	f1 e0       	ldi	r31, 0x01	; 1
 1ea:	31 97       	sbiw	r30, 0x01	; 1
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <lcd_init+0x2c>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 1ee:	92 df       	rcall	.-220    	; 0x114 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1f0:	e0 e0       	ldi	r30, 0x00	; 0
 1f2:	f1 e0       	ldi	r31, 0x01	; 1
 1f4:	31 97       	sbiw	r30, 0x01	; 1
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <lcd_init+0x36>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 1f8:	13 98       	cbi	0x02, 3	; 2
    lcd_e_toggle();
 1fa:	8c df       	rcall	.-232    	; 0x114 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1fc:	e0 e0       	ldi	r30, 0x00	; 0
 1fe:	f1 e0       	ldi	r31, 0x01	; 1
 200:	31 97       	sbiw	r30, 0x01	; 1
 202:	f1 f7       	brne	.-4      	; 0x200 <lcd_init+0x42>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 204:	88 e2       	ldi	r24, 0x28	; 40
 206:	b6 df       	rcall	.-148    	; 0x174 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 208:	88 e0       	ldi	r24, 0x08	; 8
 20a:	b4 df       	rcall	.-152    	; 0x174 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 20c:	ba df       	rcall	.-140    	; 0x182 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 20e:	86 e0       	ldi	r24, 0x06	; 6
 210:	b1 df       	rcall	.-158    	; 0x174 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 212:	8c 2f       	mov	r24, r28
 214:	af df       	rcall	.-162    	; 0x174 <lcd_command>

 216:	cf 91       	pop	r28
 218:	08 95       	ret

0000021a <main>:
#include <stdlib.h>
#include <util/delay.h>
#include "lcd.h"

int main(void)
{
 21a:	cf 93       	push	r28
 21c:	df 93       	push	r29
 21e:	cd b7       	in	r28, 0x3d	; 61
 220:	de b7       	in	r29, 0x3e	; 62
 222:	60 97       	sbiw	r28, 0x10	; 16
 224:	0f b6       	in	r0, 0x3f	; 63
 226:	f8 94       	cli
 228:	de bf       	out	0x3e, r29	; 62
 22a:	0f be       	out	0x3f, r0	; 63
 22c:	cd bf       	out	0x3d, r28	; 61
	lcd_init(LCD_DISP_ON);
 22e:	8c e0       	ldi	r24, 0x0C	; 12
 230:	c6 df       	rcall	.-116    	; 0x1be <lcd_init>
	lcd_clrscr();
 232:	a7 df       	rcall	.-178    	; 0x182 <lcd_clrscr>
	char s1[] = "Testing LCD";
 234:	8c e0       	ldi	r24, 0x0C	; 12
 236:	e0 e0       	ldi	r30, 0x00	; 0
 238:	f2 e0       	ldi	r31, 0x02	; 2
 23a:	de 01       	movw	r26, r28
 23c:	11 96       	adiw	r26, 0x01	; 1
 23e:	01 90       	ld	r0, Z+
 240:	0d 92       	st	X+, r0
 242:	8a 95       	dec	r24
 244:	e1 f7       	brne	.-8      	; 0x23e <main+0x24>
	char s2[] = " OK";
 246:	80 e2       	ldi	r24, 0x20	; 32
 248:	9f e4       	ldi	r25, 0x4F	; 79
 24a:	ab e4       	ldi	r26, 0x4B	; 75
 24c:	b0 e0       	ldi	r27, 0x00	; 0
 24e:	8d 87       	std	Y+13, r24	; 0x0d
 250:	9e 87       	std	Y+14, r25	; 0x0e
 252:	af 87       	std	Y+15, r26	; 0x0f
 254:	b8 8b       	std	Y+16, r27	; 0x10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 256:	2f ef       	ldi	r18, 0xFF	; 255
 258:	83 ed       	ldi	r24, 0xD3	; 211
 25a:	90 e3       	ldi	r25, 0x30	; 48
 25c:	21 50       	subi	r18, 0x01	; 1
 25e:	80 40       	sbci	r24, 0x00	; 0
 260:	90 40       	sbci	r25, 0x00	; 0
 262:	e1 f7       	brne	.-8      	; 0x25c <main+0x42>
 264:	00 c0       	rjmp	.+0      	; 0x266 <main+0x4c>
 266:	00 00       	nop
    while(1)
    {
        _delay_ms(1000);
		//lcd_home();
		lcd_puts(s1);
 268:	ce 01       	movw	r24, r28
 26a:	01 96       	adiw	r24, 0x01	; 1
 26c:	99 df       	rcall	.-206    	; 0x1a0 <lcd_puts>
 26e:	2f ef       	ldi	r18, 0xFF	; 255
 270:	83 ed       	ldi	r24, 0xD3	; 211
 272:	90 e3       	ldi	r25, 0x30	; 48
 274:	21 50       	subi	r18, 0x01	; 1
 276:	80 40       	sbci	r24, 0x00	; 0
 278:	90 40       	sbci	r25, 0x00	; 0
 27a:	e1 f7       	brne	.-8      	; 0x274 <main+0x5a>
 27c:	00 c0       	rjmp	.+0      	; 0x27e <main+0x64>
 27e:	00 00       	nop
		_delay_ms(1000);
		lcd_puts(s2);
 280:	ce 01       	movw	r24, r28
 282:	0d 96       	adiw	r24, 0x0d	; 13
 284:	8d df       	rcall	.-230    	; 0x1a0 <lcd_puts>
 286:	2f ef       	ldi	r18, 0xFF	; 255
 288:	83 ed       	ldi	r24, 0xD3	; 211
 28a:	90 e3       	ldi	r25, 0x30	; 48
 28c:	21 50       	subi	r18, 0x01	; 1
 28e:	80 40       	sbci	r24, 0x00	; 0
 290:	90 40       	sbci	r25, 0x00	; 0
 292:	e1 f7       	brne	.-8      	; 0x28c <main+0x72>
 294:	00 c0       	rjmp	.+0      	; 0x296 <main+0x7c>
 296:	00 00       	nop
		_delay_ms(1000);
		lcd_clrscr(); 
 298:	74 df       	rcall	.-280    	; 0x182 <lcd_clrscr>
 29a:	dd cf       	rjmp	.-70     	; 0x256 <main+0x3c>

0000029c <_exit>:
 29c:	f8 94       	cli

0000029e <__stop_program>:
 29e:	ff cf       	rjmp	.-2      	; 0x29e <__stop_program>
