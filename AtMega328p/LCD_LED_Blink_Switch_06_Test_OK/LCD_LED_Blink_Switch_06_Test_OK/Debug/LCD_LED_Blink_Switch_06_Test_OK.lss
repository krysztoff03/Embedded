
LCD_LED_Blink_Switch_06_Test_OK.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800200  00000286  000002fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000286  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000314  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000a0  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000746  00000000  00000000  000003e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000002fc  00000000  00000000  00000b2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000520  00000000  00000000  00000e26  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000130  00000000  00000000  00001348  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000027c  00000000  00000000  00001478  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000041e  00000000  00000000  000016f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000098  00000000  00000000  00001b12  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	86 c0       	rjmp	.+268    	; 0x112 <__bad_interrupt>
   6:	00 00       	nop
   8:	84 c0       	rjmp	.+264    	; 0x112 <__bad_interrupt>
   a:	00 00       	nop
   c:	82 c0       	rjmp	.+260    	; 0x112 <__bad_interrupt>
   e:	00 00       	nop
  10:	80 c0       	rjmp	.+256    	; 0x112 <__bad_interrupt>
  12:	00 00       	nop
  14:	7e c0       	rjmp	.+252    	; 0x112 <__bad_interrupt>
  16:	00 00       	nop
  18:	7c c0       	rjmp	.+248    	; 0x112 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7a c0       	rjmp	.+244    	; 0x112 <__bad_interrupt>
  1e:	00 00       	nop
  20:	78 c0       	rjmp	.+240    	; 0x112 <__bad_interrupt>
  22:	00 00       	nop
  24:	76 c0       	rjmp	.+236    	; 0x112 <__bad_interrupt>
  26:	00 00       	nop
  28:	74 c0       	rjmp	.+232    	; 0x112 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	72 c0       	rjmp	.+228    	; 0x112 <__bad_interrupt>
  2e:	00 00       	nop
  30:	70 c0       	rjmp	.+224    	; 0x112 <__bad_interrupt>
  32:	00 00       	nop
  34:	6e c0       	rjmp	.+220    	; 0x112 <__bad_interrupt>
  36:	00 00       	nop
  38:	6c c0       	rjmp	.+216    	; 0x112 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6a c0       	rjmp	.+212    	; 0x112 <__bad_interrupt>
  3e:	00 00       	nop
  40:	68 c0       	rjmp	.+208    	; 0x112 <__bad_interrupt>
  42:	00 00       	nop
  44:	66 c0       	rjmp	.+204    	; 0x112 <__bad_interrupt>
  46:	00 00       	nop
  48:	64 c0       	rjmp	.+200    	; 0x112 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	62 c0       	rjmp	.+196    	; 0x112 <__bad_interrupt>
  4e:	00 00       	nop
  50:	60 c0       	rjmp	.+192    	; 0x112 <__bad_interrupt>
  52:	00 00       	nop
  54:	5e c0       	rjmp	.+188    	; 0x112 <__bad_interrupt>
  56:	00 00       	nop
  58:	5c c0       	rjmp	.+184    	; 0x112 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5a c0       	rjmp	.+180    	; 0x112 <__bad_interrupt>
  5e:	00 00       	nop
  60:	58 c0       	rjmp	.+176    	; 0x112 <__bad_interrupt>
  62:	00 00       	nop
  64:	56 c0       	rjmp	.+172    	; 0x112 <__bad_interrupt>
  66:	00 00       	nop
  68:	54 c0       	rjmp	.+168    	; 0x112 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	52 c0       	rjmp	.+164    	; 0x112 <__bad_interrupt>
  6e:	00 00       	nop
  70:	50 c0       	rjmp	.+160    	; 0x112 <__bad_interrupt>
  72:	00 00       	nop
  74:	4e c0       	rjmp	.+156    	; 0x112 <__bad_interrupt>
  76:	00 00       	nop
  78:	4c c0       	rjmp	.+152    	; 0x112 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4a c0       	rjmp	.+148    	; 0x112 <__bad_interrupt>
  7e:	00 00       	nop
  80:	48 c0       	rjmp	.+144    	; 0x112 <__bad_interrupt>
  82:	00 00       	nop
  84:	46 c0       	rjmp	.+140    	; 0x112 <__bad_interrupt>
  86:	00 00       	nop
  88:	44 c0       	rjmp	.+136    	; 0x112 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	42 c0       	rjmp	.+132    	; 0x112 <__bad_interrupt>
  8e:	00 00       	nop
  90:	40 c0       	rjmp	.+128    	; 0x112 <__bad_interrupt>
  92:	00 00       	nop
  94:	3e c0       	rjmp	.+124    	; 0x112 <__bad_interrupt>
  96:	00 00       	nop
  98:	3c c0       	rjmp	.+120    	; 0x112 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	3a c0       	rjmp	.+116    	; 0x112 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	38 c0       	rjmp	.+112    	; 0x112 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	36 c0       	rjmp	.+108    	; 0x112 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	34 c0       	rjmp	.+104    	; 0x112 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	32 c0       	rjmp	.+100    	; 0x112 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	30 c0       	rjmp	.+96     	; 0x112 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	2e c0       	rjmp	.+92     	; 0x112 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	2c c0       	rjmp	.+88     	; 0x112 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	2a c0       	rjmp	.+84     	; 0x112 <__bad_interrupt>
  be:	00 00       	nop
  c0:	28 c0       	rjmp	.+80     	; 0x112 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	26 c0       	rjmp	.+76     	; 0x112 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	24 c0       	rjmp	.+72     	; 0x112 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	22 c0       	rjmp	.+68     	; 0x112 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	20 c0       	rjmp	.+64     	; 0x112 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	1e c0       	rjmp	.+60     	; 0x112 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	1c c0       	rjmp	.+56     	; 0x112 <__bad_interrupt>
  da:	00 00       	nop
  dc:	1a c0       	rjmp	.+52     	; 0x112 <__bad_interrupt>
  de:	00 00       	nop
  e0:	18 c0       	rjmp	.+48     	; 0x112 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e6 e8       	ldi	r30, 0x86	; 134
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	aa 31       	cpi	r26, 0x1A	; 26
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	92 d0       	rcall	.+292    	; 0x234 <main>
 110:	b8 c0       	rjmp	.+368    	; 0x282 <_exit>

00000112 <__bad_interrupt>:
 112:	76 cf       	rjmp	.-276    	; 0x0 <__vectors>

00000114 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
 114:	12 9a       	sbi	0x02, 2	; 2
 116:	00 c0       	rjmp	.+0      	; 0x118 <toggle_e+0x4>
 118:	12 98       	cbi	0x02, 2	; 2
 11a:	08 95       	ret

0000011c <lcd_write>:
 11c:	cf 93       	push	r28
 11e:	c8 2f       	mov	r28, r24
 120:	66 23       	and	r22, r22
 122:	11 f0       	breq	.+4      	; 0x128 <lcd_write+0xc>
 124:	10 9a       	sbi	0x02, 0	; 2
 126:	01 c0       	rjmp	.+2      	; 0x12a <lcd_write+0xe>
 128:	10 98       	cbi	0x02, 0	; 2
 12a:	0b 9a       	sbi	0x01, 3	; 1
 12c:	0c 9a       	sbi	0x01, 4	; 1
 12e:	0d 9a       	sbi	0x01, 5	; 1
 130:	0e 9a       	sbi	0x01, 6	; 1
 132:	16 98       	cbi	0x02, 6	; 2
 134:	15 98       	cbi	0x02, 5	; 2
 136:	14 98       	cbi	0x02, 4	; 2
 138:	13 98       	cbi	0x02, 3	; 2
 13a:	cc 23       	and	r28, r28
 13c:	0c f4       	brge	.+2      	; 0x140 <lcd_write+0x24>
 13e:	16 9a       	sbi	0x02, 6	; 2
 140:	c6 fd       	sbrc	r28, 6
 142:	15 9a       	sbi	0x02, 5	; 2
 144:	c5 fd       	sbrc	r28, 5
 146:	14 9a       	sbi	0x02, 4	; 2
 148:	c4 fd       	sbrc	r28, 4
 14a:	13 9a       	sbi	0x02, 3	; 2
 14c:	e3 df       	rcall	.-58     	; 0x114 <toggle_e>
 14e:	16 98       	cbi	0x02, 6	; 2
 150:	15 98       	cbi	0x02, 5	; 2
 152:	14 98       	cbi	0x02, 4	; 2
 154:	13 98       	cbi	0x02, 3	; 2
 156:	c3 fd       	sbrc	r28, 3
 158:	16 9a       	sbi	0x02, 6	; 2
 15a:	c2 fd       	sbrc	r28, 2
 15c:	15 9a       	sbi	0x02, 5	; 2
 15e:	c1 fd       	sbrc	r28, 1
 160:	14 9a       	sbi	0x02, 4	; 2
 162:	c0 fd       	sbrc	r28, 0
 164:	13 9a       	sbi	0x02, 3	; 2
 166:	d6 df       	rcall	.-84     	; 0x114 <toggle_e>
 168:	13 9a       	sbi	0x02, 3	; 2
 16a:	14 9a       	sbi	0x02, 4	; 2
 16c:	15 9a       	sbi	0x02, 5	; 2
 16e:	16 9a       	sbi	0x02, 6	; 2
 170:	cf 91       	pop	r28
 172:	08 95       	ret

00000174 <lcd_command>:
 174:	e0 ea       	ldi	r30, 0xA0	; 160
 176:	ff e0       	ldi	r31, 0x0F	; 15
 178:	31 97       	sbiw	r30, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <lcd_command+0x4>
 17c:	60 e0       	ldi	r22, 0x00	; 0
 17e:	ce cf       	rjmp	.-100    	; 0x11c <lcd_write>
 180:	08 95       	ret

00000182 <lcd_clrscr>:
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	f7 cf       	rjmp	.-18     	; 0x174 <lcd_command>
 186:	08 95       	ret

00000188 <lcd_home>:
 188:	82 e0       	ldi	r24, 0x02	; 2
 18a:	f4 cf       	rjmp	.-24     	; 0x174 <lcd_command>
 18c:	08 95       	ret

0000018e <lcd_putc>:
 18e:	e0 ea       	ldi	r30, 0xA0	; 160
 190:	ff e0       	ldi	r31, 0x0F	; 15
 192:	31 97       	sbiw	r30, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <lcd_putc+0x4>
 196:	8a 30       	cpi	r24, 0x0A	; 10
 198:	19 f4       	brne	.+6      	; 0x1a0 <lcd_putc+0x12>
 19a:	80 ec       	ldi	r24, 0xC0	; 192
 19c:	eb cf       	rjmp	.-42     	; 0x174 <lcd_command>
 19e:	08 95       	ret
 1a0:	61 e0       	ldi	r22, 0x01	; 1
 1a2:	bc cf       	rjmp	.-136    	; 0x11c <lcd_write>
 1a4:	08 95       	ret

000001a6 <lcd_puts>:
 1a6:	cf 93       	push	r28
 1a8:	df 93       	push	r29
 1aa:	ec 01       	movw	r28, r24
 1ac:	21 96       	adiw	r28, 0x01	; 1
 1ae:	fc 01       	movw	r30, r24
 1b0:	80 81       	ld	r24, Z
 1b2:	88 23       	and	r24, r24
 1b4:	21 f0       	breq	.+8      	; 0x1be <lcd_puts+0x18>
 1b6:	eb df       	rcall	.-42     	; 0x18e <lcd_putc>
 1b8:	89 91       	ld	r24, Y+
 1ba:	81 11       	cpse	r24, r1
 1bc:	fc cf       	rjmp	.-8      	; 0x1b6 <lcd_puts+0x10>
 1be:	df 91       	pop	r29
 1c0:	cf 91       	pop	r28
 1c2:	08 95       	ret

000001c4 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 1c4:	cf 93       	push	r28
 1c6:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 1c8:	08 9a       	sbi	0x01, 0	; 1
#if LCD_READ_REQUIRED
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
#endif
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 1ca:	0a 9a       	sbi	0x01, 2	; 1
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 1cc:	0b 9a       	sbi	0x01, 3	; 1
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 1ce:	0c 9a       	sbi	0x01, 4	; 1
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 1d0:	0d 9a       	sbi	0x01, 5	; 1
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 1d2:	0e 9a       	sbi	0x01, 6	; 1
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1d4:	e0 e0       	ldi	r30, 0x00	; 0
 1d6:	fa ef       	ldi	r31, 0xFA	; 250
 1d8:	31 97       	sbiw	r30, 0x01	; 1
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <lcd_init+0x14>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 1dc:	14 9a       	sbi	0x02, 4	; 2
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 1de:	13 9a       	sbi	0x02, 3	; 2
    lcd_e_toggle();
 1e0:	99 df       	rcall	.-206    	; 0x114 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1e2:	e0 e0       	ldi	r30, 0x00	; 0
 1e4:	fe e4       	ldi	r31, 0x4E	; 78
 1e6:	31 97       	sbiw	r30, 0x01	; 1
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <lcd_init+0x22>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 1ea:	94 df       	rcall	.-216    	; 0x114 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1ec:	e0 e0       	ldi	r30, 0x00	; 0
 1ee:	f1 e0       	ldi	r31, 0x01	; 1
 1f0:	31 97       	sbiw	r30, 0x01	; 1
 1f2:	f1 f7       	brne	.-4      	; 0x1f0 <lcd_init+0x2c>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 1f4:	8f df       	rcall	.-226    	; 0x114 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1f6:	e0 e0       	ldi	r30, 0x00	; 0
 1f8:	f1 e0       	ldi	r31, 0x01	; 1
 1fa:	31 97       	sbiw	r30, 0x01	; 1
 1fc:	f1 f7       	brne	.-4      	; 0x1fa <lcd_init+0x36>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 1fe:	13 98       	cbi	0x02, 3	; 2
    lcd_e_toggle();
 200:	89 df       	rcall	.-238    	; 0x114 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 202:	e0 e0       	ldi	r30, 0x00	; 0
 204:	f1 e0       	ldi	r31, 0x01	; 1
 206:	31 97       	sbiw	r30, 0x01	; 1
 208:	f1 f7       	brne	.-4      	; 0x206 <lcd_init+0x42>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 20a:	88 e2       	ldi	r24, 0x28	; 40
 20c:	b3 df       	rcall	.-154    	; 0x174 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 20e:	88 e0       	ldi	r24, 0x08	; 8
 210:	b1 df       	rcall	.-158    	; 0x174 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 212:	b7 df       	rcall	.-146    	; 0x182 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 214:	86 e0       	ldi	r24, 0x06	; 6
 216:	ae df       	rcall	.-164    	; 0x174 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 218:	8c 2f       	mov	r24, r28
 21a:	ac df       	rcall	.-168    	; 0x174 <lcd_command>

 21c:	cf 91       	pop	r28
 21e:	08 95       	ret

00000220 <timer1_init>:
#define SWITCH PB6

void timer1_init()
{
	/* Set up timer with Prescaler = 256 */
	TCCR1B |= (1 << CS12);
 220:	e1 e8       	ldi	r30, 0x81	; 129
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	80 81       	ld	r24, Z
 226:	84 60       	ori	r24, 0x04	; 4
 228:	80 83       	st	Z, r24
	/* Initialize counter */
	TCNT1 = 0;
 22a:	10 92 85 00 	sts	0x0085, r1
 22e:	10 92 84 00 	sts	0x0084, r1
 232:	08 95       	ret

00000234 <main>:
}

int main(void)
{
	/* LCD initialization with display ON, cursor OFF */
	lcd_init(LCD_DISP_ON);
 234:	8c e0       	ldi	r24, 0x0C	; 12
 236:	c6 df       	rcall	.-116    	; 0x1c4 <lcd_init>
	/* Timer1 initialization */
	timer1_init();
 238:	f3 df       	rcall	.-26     	; 0x220 <timer1_init>
	/* Set Pin E4 as output */
	DDRE |= (1 << LED);
 23a:	6c 9a       	sbi	0x0d, 4	; 13
	/* Set Pin B6 as input */
	DDRB &= ~(1 << SWITCH);
 23c:	26 98       	cbi	0x04, 6	; 4
	/* Clear screen before entering the infinite loop */
	lcd_clrscr();
 23e:	a1 df       	rcall	.-190    	; 0x182 <lcd_clrscr>
    {
		/* When the switch is active, the LED blinks with 0.6 seconds delay */
        if(PINB & (1 << SWITCH))
		{
			/* Value based on the formula Target Timer Count = (Input Frequency / (Prescaler * Target Frequency)) - 1 */
			if(TCNT1 >= 37649)
 240:	c4 e8       	ldi	r28, 0x84	; 132
 242:	d0 e0       	ldi	r29, 0x00	; 0
			{
				PORTE ^= (1 << LED);
 244:	10 e1       	ldi	r17, 0x10	; 16
	/* Clear screen before entering the infinite loop */
	lcd_clrscr();
    while(1)
    {
		/* When the switch is active, the LED blinks with 0.6 seconds delay */
        if(PINB & (1 << SWITCH))
 246:	1e 9b       	sbis	0x03, 6	; 3
 248:	16 c0       	rjmp	.+44     	; 0x276 <main+0x42>
		{
			/* Value based on the formula Target Timer Count = (Input Frequency / (Prescaler * Target Frequency)) - 1 */
			if(TCNT1 >= 37649)
 24a:	88 81       	ld	r24, Y
 24c:	99 81       	ldd	r25, Y+1	; 0x01
 24e:	81 31       	cpi	r24, 0x11	; 17
 250:	93 49       	sbci	r25, 0x93	; 147
 252:	c8 f3       	brcs	.-14     	; 0x246 <main+0x12>
			{
				PORTE ^= (1 << LED);
 254:	8e b1       	in	r24, 0x0e	; 14
 256:	81 27       	eor	r24, r17
 258:	8e b9       	out	0x0e, r24	; 14
				/* When the Pin E4 is High (LED On), display the message on the LCD */
				if(!(PINE & (1 << LED)))
 25a:	64 99       	sbic	0x0c, 4	; 12
 25c:	05 c0       	rjmp	.+10     	; 0x268 <main+0x34>
				{
					lcd_home();
 25e:	94 df       	rcall	.-216    	; 0x188 <lcd_home>
					lcd_puts("LED On! ");
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	92 e0       	ldi	r25, 0x02	; 2
 264:	a0 df       	rcall	.-192    	; 0x1a6 <lcd_puts>
 266:	04 c0       	rjmp	.+8      	; 0x270 <main+0x3c>
				}
				/* When the Pin E4 is Low (LED Off), display the message on the LCD */
				else
				{
					lcd_home();
 268:	8f df       	rcall	.-226    	; 0x188 <lcd_home>
					lcd_puts("LED Off!");	
 26a:	89 e0       	ldi	r24, 0x09	; 9
 26c:	92 e0       	ldi	r25, 0x02	; 2
 26e:	9b df       	rcall	.-202    	; 0x1a6 <lcd_puts>
				}
				/* Reset the counter */
				TCNT1 = 0;
 270:	19 82       	std	Y+1, r1	; 0x01
 272:	18 82       	st	Y, r1
 274:	e8 cf       	rjmp	.-48     	; 0x246 <main+0x12>
			}
		}
		/* When the switch is not active, the LED is Off and the message is displayed on the LCD */
		else
		{
			PORTE &= ~(1 << LED);
 276:	74 98       	cbi	0x0e, 4	; 14
			lcd_home();
 278:	87 df       	rcall	.-242    	; 0x188 <lcd_home>
			lcd_puts("Closed!");
 27a:	82 e1       	ldi	r24, 0x12	; 18
 27c:	92 e0       	ldi	r25, 0x02	; 2
 27e:	93 df       	rcall	.-218    	; 0x1a6 <lcd_puts>
 280:	e2 cf       	rjmp	.-60     	; 0x246 <main+0x12>

00000282 <_exit>:
 282:	f8 94       	cli

00000284 <__stop_program>:
 284:	ff cf       	rjmp	.-2      	; 0x284 <__stop_program>
