
PWM_LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  0000011a  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000030  00000000  00000000  0000014a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000190  00000000  00000000  0000017a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000106  00000000  00000000  0000030a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000180  00000000  00000000  00000410  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000044  00000000  00000000  00000590  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000018e  00000000  00000000  000005d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000048  00000000  00000000  00000762  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000020  00000000  00000000  000007aa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 47 00 	call	0x8e	; 0x8e <main>
  78:	0c 94 61 00 	jmp	0xc2	; 0xc2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <port_init>:
#include <util/delay.h>

void port_init()
{
	//Set Pin6 of PORTD as output
	DDRD |= (1 << PD6);
  80:	56 9a       	sbi	0x0a, 6	; 10
  82:	08 95       	ret

00000084 <pwm_init>:
}

void pwm_init()
{
	//Set TIMER0 in Non-Inverting Fast PWM Mode
	TCCR0A = (1<< COM0A1) | (1 << WGM01) | (1 << WGM00);
  84:	83 e8       	ldi	r24, 0x83	; 131
  86:	84 bd       	out	0x24, r24	; 36
	//No prescaler for TIMER0
	TCCR0B = (1 << CS00);
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	85 bd       	out	0x25, r24	; 37
  8c:	08 95       	ret

0000008e <main>:
}

int main(void)
{
	port_init();
  8e:	0e 94 40 00 	call	0x80	; 0x80 <port_init>
	pwm_init();
  92:	0e 94 42 00 	call	0x84	; 0x84 <pwm_init>
	uint8_t brightness;
    while(1)
    {
		//Increase LED brightness
        for(brightness = 0;brightness < 255;brightness++)
  96:	80 e0       	ldi	r24, 0x00	; 0
  98:	08 c0       	rjmp	.+16     	; 0xaa <main+0x1c>
		{	//Set brightness variable as duty cycle
			OCR0A = brightness;
  9a:	87 bd       	out	0x27, r24	; 39
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9c:	ef e3       	ldi	r30, 0x3F	; 63
  9e:	fc e9       	ldi	r31, 0x9C	; 156
  a0:	31 97       	sbiw	r30, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <main+0x12>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <main+0x18>
  a6:	00 00       	nop
	pwm_init();
	uint8_t brightness;
    while(1)
    {
		//Increase LED brightness
        for(brightness = 0;brightness < 255;brightness++)
  a8:	8f 5f       	subi	r24, 0xFF	; 255
  aa:	8f 3f       	cpi	r24, 0xFF	; 255
  ac:	b1 f7       	brne	.-20     	; 0x9a <main+0xc>
		}
		//Decrease LED brightness
		for(brightness = 255;brightness > 0;brightness--)
		{
			//Set brightness variable as duty cycle
			OCR0A = brightness;
  ae:	87 bd       	out	0x27, r24	; 39
  b0:	ef e3       	ldi	r30, 0x3F	; 63
  b2:	fc e9       	ldi	r31, 0x9C	; 156
  b4:	31 97       	sbiw	r30, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <main+0x26>
  b8:	00 c0       	rjmp	.+0      	; 0xba <main+0x2c>
  ba:	00 00       	nop
			OCR0A = brightness;
			//10ms delay
			_delay_ms(10);
		}
		//Decrease LED brightness
		for(brightness = 255;brightness > 0;brightness--)
  bc:	81 50       	subi	r24, 0x01	; 1
  be:	b9 f7       	brne	.-18     	; 0xae <main+0x20>
  c0:	f4 cf       	rjmp	.-24     	; 0xaa <main+0x1c>

000000c2 <_exit>:
  c2:	f8 94       	cli

000000c4 <__stop_program>:
  c4:	ff cf       	rjmp	.-2      	; 0xc4 <__stop_program>
