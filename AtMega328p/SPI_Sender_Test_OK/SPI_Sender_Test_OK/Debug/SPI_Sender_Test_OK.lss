
SPI_Sender_Test_OK.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  000006cc  00000760  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  0080011a  0080011a  0000077a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000077a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000188  00000000  00000000  000007aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000013a8  00000000  00000000  00000932  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007c8  00000000  00000000  00001cda  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008ab  00000000  00000000  000024a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000330  00000000  00000000  00002d50  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000049b  00000000  00000000  00003080  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000f1e  00000000  00000000  0000351b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000160  00000000  00000000  00004439  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ec       	ldi	r30, 0xCC	; 204
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 31       	cpi	r26, 0x1A	; 26
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e1       	ldi	r26, 0x1A	; 26
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 32       	cpi	r26, 0x23	; 35
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <main>
  9e:	0c 94 64 03 	jmp	0x6c8	; 0x6c8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
  a6:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
  aa:	88 e4       	ldi	r24, 0x48	; 72
  ac:	80 93 b8 00 	sts	0x00B8, r24
  b0:	08 95       	ret

000000b2 <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
  b2:	94 ea       	ldi	r25, 0xA4	; 164
  b4:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
  b8:	ec eb       	ldi	r30, 0xBC	; 188
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	90 81       	ld	r25, Z
  be:	99 23       	and	r25, r25
  c0:	ec f7       	brge	.-6      	; 0xbc <i2c_start+0xa>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
  c2:	90 91 b9 00 	lds	r25, 0x00B9
  c6:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
  c8:	98 30       	cpi	r25, 0x08	; 8
  ca:	11 f0       	breq	.+4      	; 0xd0 <i2c_start+0x1e>
  cc:	90 31       	cpi	r25, 0x10	; 16
  ce:	a1 f4       	brne	.+40     	; 0xf8 <i2c_start+0x46>

	// send device address
	TWDR = address;
  d0:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
  d4:	84 e8       	ldi	r24, 0x84	; 132
  d6:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
  da:	ec eb       	ldi	r30, 0xBC	; 188
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	88 23       	and	r24, r24
  e2:	ec f7       	brge	.-6      	; 0xde <i2c_start+0x2c>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
  e4:	90 91 b9 00 	lds	r25, 0x00B9
  e8:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
  ea:	98 31       	cpi	r25, 0x18	; 24
  ec:	39 f0       	breq	.+14     	; 0xfc <i2c_start+0x4a>
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	90 34       	cpi	r25, 0x40	; 64
  f2:	29 f4       	brne	.+10     	; 0xfe <i2c_start+0x4c>
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	08 95       	ret
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;

	return 0;
  fc:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
  fe:	08 95       	ret

00000100 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 100:	84 e9       	ldi	r24, 0x94	; 148
 102:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
 106:	ec eb       	ldi	r30, 0xBC	; 188
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	84 fd       	sbrc	r24, 4
 10e:	fd cf       	rjmp	.-6      	; 0x10a <i2c_stop+0xa>

}/* i2c_stop */
 110:	08 95       	ret

00000112 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
 112:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
 116:	84 e8       	ldi	r24, 0x84	; 132
 118:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
 11c:	ec eb       	ldi	r30, 0xBC	; 188
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	88 23       	and	r24, r24
 124:	ec f7       	brge	.-6      	; 0x120 <i2c_write+0xe>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
 126:	90 91 b9 00 	lds	r25, 0x00B9
 12a:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	98 32       	cpi	r25, 0x28	; 40
 130:	09 f4       	brne	.+2      	; 0x134 <i2c_write+0x22>
 132:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}/* i2c_write */
 134:	08 95       	ret

00000136 <lcd_read>:
Input:    rs     1: read data    
                 0: read busy flag / address counter
Returns:  byte read from LCD controller
*************************************************************************/
static uint8_t lcd_read(uint8_t rs) 
{
 136:	cf 93       	push	r28
    uint8_t data;

    if (rs) /* write data        (RS=1, RW=0) */
 138:	88 23       	and	r24, r24
 13a:	31 f0       	breq	.+12     	; 0x148 <lcd_read+0x12>
    	dataport |= _BV(LCD_RS_PIN);
 13c:	80 91 1a 01 	lds	r24, 0x011A
 140:	81 60       	ori	r24, 0x01	; 1
 142:	80 93 1a 01 	sts	0x011A, r24
 146:	05 c0       	rjmp	.+10     	; 0x152 <lcd_read+0x1c>
    else /* write instruction (RS=0, RW=0) */
    	dataport &= ~_BV(LCD_RS_PIN);
 148:	80 91 1a 01 	lds	r24, 0x011A
 14c:	8e 7f       	andi	r24, 0xFE	; 254
 14e:	80 93 1a 01 	sts	0x011A, r24
    dataport |= _BV(LCD_RW_PIN);
 152:	80 91 1a 01 	lds	r24, 0x011A
 156:	82 60       	ori	r24, 0x02	; 2
 158:	80 93 1a 01 	sts	0x011A, r24
    pcf8574_setoutput(LCD_PCF8574_DEVICEID, dataport);
 15c:	60 91 1a 01 	lds	r22, 0x011A
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	0e 94 8c 02 	call	0x518	; 0x518 <pcf8574_setoutput>

    pcf8574_setoutputpinhigh(LCD_PCF8574_DEVICEID, LCD_E_PIN);
 166:	62 e0       	ldi	r22, 0x02	; 2
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <pcf8574_setoutputpinhigh>
	lcd_e_delay();
 16e:	00 c0       	rjmp	.+0      	; 0x170 <lcd_read+0x3a>
	data = pcf8574_getoutputpin(LCD_PCF8574_DEVICEID, LCD_DATA0_PIN) << 4;     /* read high nibble first */
 170:	64 e0       	ldi	r22, 0x04	; 4
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	0e 94 75 02 	call	0x4ea	; 0x4ea <pcf8574_getoutputpin>
 178:	c8 2f       	mov	r28, r24
	pcf8574_setoutputpinlow(LCD_PCF8574_DEVICEID, LCD_E_PIN);
 17a:	62 e0       	ldi	r22, 0x02	; 2
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	0e 94 dd 02 	call	0x5ba	; 0x5ba <pcf8574_setoutputpinlow>

	lcd_e_delay();                       /* Enable 500ns low       */
 182:	00 c0       	rjmp	.+0      	; 0x184 <lcd_read+0x4e>

	pcf8574_setoutputpinhigh(LCD_PCF8574_DEVICEID, LCD_E_PIN);
 184:	62 e0       	ldi	r22, 0x02	; 2
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <pcf8574_setoutputpinhigh>
	lcd_e_delay();
 18c:	00 c0       	rjmp	.+0      	; 0x18e <lcd_read+0x58>
	data |= pcf8574_getoutputpin(LCD_PCF8574_DEVICEID, LCD_DATA0_PIN) &0x0F;    /* read low nibble        */
 18e:	64 e0       	ldi	r22, 0x04	; 4
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	0e 94 75 02 	call	0x4ea	; 0x4ea <pcf8574_getoutputpin>
    dataport |= _BV(LCD_RW_PIN);
    pcf8574_setoutput(LCD_PCF8574_DEVICEID, dataport);

    pcf8574_setoutputpinhigh(LCD_PCF8574_DEVICEID, LCD_E_PIN);
	lcd_e_delay();
	data = pcf8574_getoutputpin(LCD_PCF8574_DEVICEID, LCD_DATA0_PIN) << 4;     /* read high nibble first */
 196:	c2 95       	swap	r28
 198:	c0 7f       	andi	r28, 0xF0	; 240

	lcd_e_delay();                       /* Enable 500ns low       */

	pcf8574_setoutputpinhigh(LCD_PCF8574_DEVICEID, LCD_E_PIN);
	lcd_e_delay();
	data |= pcf8574_getoutputpin(LCD_PCF8574_DEVICEID, LCD_DATA0_PIN) &0x0F;    /* read low nibble        */
 19a:	8f 70       	andi	r24, 0x0F	; 15
 19c:	c8 2b       	or	r28, r24
	pcf8574_setoutputpinlow(LCD_PCF8574_DEVICEID, LCD_E_PIN);
 19e:	62 e0       	ldi	r22, 0x02	; 2
 1a0:	80 e0       	ldi	r24, 0x00	; 0
 1a2:	0e 94 dd 02 	call	0x5ba	; 0x5ba <pcf8574_setoutputpinlow>

    return data;
}
 1a6:	8c 2f       	mov	r24, r28
 1a8:	cf 91       	pop	r28
 1aa:	08 95       	ret

000001ac <lcd_waitbusy>:

{
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	0e 94 9b 00 	call	0x136	; 0x136 <lcd_read>
 1b2:	88 23       	and	r24, r24
 1b4:	dc f3       	brlt	.-10     	; 0x1ac <lcd_waitbusy>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1b6:	88 e0       	ldi	r24, 0x08	; 8
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	01 97       	sbiw	r24, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <lcd_waitbusy+0xe>
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(2);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	0e 94 9b 00 	call	0x136	; 0x136 <lcd_read>
    
}/* lcd_waitbusy */
 1c4:	08 95       	ret

000001c6 <toggle_e>:


/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
	pcf8574_setoutputpinhigh(LCD_PCF8574_DEVICEID, LCD_E_PIN);
 1c6:	62 e0       	ldi	r22, 0x02	; 2
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <pcf8574_setoutputpinhigh>
    lcd_e_delay();
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <toggle_e+0xa>
    pcf8574_setoutputpinlow(LCD_PCF8574_DEVICEID, LCD_E_PIN);
 1d0:	62 e0       	ldi	r22, 0x02	; 2
 1d2:	80 e0       	ldi	r24, 0x00	; 0
 1d4:	0e 94 dd 02 	call	0x5ba	; 0x5ba <pcf8574_setoutputpinlow>
 1d8:	08 95       	ret

000001da <lcd_write>:
          rs     1: write data    
                 0: write instruction
Returns:  none
*************************************************************************/
static void lcd_write(uint8_t data,uint8_t rs) 
{
 1da:	cf 93       	push	r28
 1dc:	c8 2f       	mov	r28, r24
	if (rs) /* write data        (RS=1, RW=0) */
 1de:	66 23       	and	r22, r22
 1e0:	31 f0       	breq	.+12     	; 0x1ee <lcd_write+0x14>
		dataport |= _BV(LCD_RS_PIN);
 1e2:	80 91 1a 01 	lds	r24, 0x011A
 1e6:	81 60       	ori	r24, 0x01	; 1
 1e8:	80 93 1a 01 	sts	0x011A, r24
 1ec:	05 c0       	rjmp	.+10     	; 0x1f8 <lcd_write+0x1e>
	else /* write instruction (RS=0, RW=0) */
		dataport &= ~_BV(LCD_RS_PIN);
 1ee:	80 91 1a 01 	lds	r24, 0x011A
 1f2:	8e 7f       	andi	r24, 0xFE	; 254
 1f4:	80 93 1a 01 	sts	0x011A, r24
	dataport &= ~_BV(LCD_RW_PIN);
 1f8:	80 91 1a 01 	lds	r24, 0x011A
 1fc:	8d 7f       	andi	r24, 0xFD	; 253
 1fe:	80 93 1a 01 	sts	0x011A, r24
	pcf8574_setoutput(LCD_PCF8574_DEVICEID, dataport);
 202:	60 91 1a 01 	lds	r22, 0x011A
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	0e 94 8c 02 	call	0x518	; 0x518 <pcf8574_setoutput>

	/* output high nibble first */
    dataport &= ~_BV(LCD_DATA3_PIN);
 20c:	80 91 1a 01 	lds	r24, 0x011A
 210:	8f 77       	andi	r24, 0x7F	; 127
 212:	80 93 1a 01 	sts	0x011A, r24
    dataport &= ~_BV(LCD_DATA2_PIN);
 216:	80 91 1a 01 	lds	r24, 0x011A
 21a:	8f 7b       	andi	r24, 0xBF	; 191
 21c:	80 93 1a 01 	sts	0x011A, r24
    dataport &= ~_BV(LCD_DATA1_PIN);
 220:	80 91 1a 01 	lds	r24, 0x011A
 224:	8f 7d       	andi	r24, 0xDF	; 223
 226:	80 93 1a 01 	sts	0x011A, r24
    dataport &= ~_BV(LCD_DATA0_PIN);
 22a:	80 91 1a 01 	lds	r24, 0x011A
 22e:	8f 7e       	andi	r24, 0xEF	; 239
 230:	80 93 1a 01 	sts	0x011A, r24
	if(data & 0x80) dataport |= _BV(LCD_DATA3_PIN);
 234:	cc 23       	and	r28, r28
 236:	2c f4       	brge	.+10     	; 0x242 <lcd_write+0x68>
 238:	80 91 1a 01 	lds	r24, 0x011A
 23c:	80 68       	ori	r24, 0x80	; 128
 23e:	80 93 1a 01 	sts	0x011A, r24
	if(data & 0x40) dataport |= _BV(LCD_DATA2_PIN);
 242:	c6 ff       	sbrs	r28, 6
 244:	05 c0       	rjmp	.+10     	; 0x250 <lcd_write+0x76>
 246:	80 91 1a 01 	lds	r24, 0x011A
 24a:	80 64       	ori	r24, 0x40	; 64
 24c:	80 93 1a 01 	sts	0x011A, r24
	if(data & 0x20) dataport |= _BV(LCD_DATA1_PIN);
 250:	c5 ff       	sbrs	r28, 5
 252:	05 c0       	rjmp	.+10     	; 0x25e <lcd_write+0x84>
 254:	80 91 1a 01 	lds	r24, 0x011A
 258:	80 62       	ori	r24, 0x20	; 32
 25a:	80 93 1a 01 	sts	0x011A, r24
	if(data & 0x10) dataport |= _BV(LCD_DATA0_PIN);
 25e:	c4 ff       	sbrs	r28, 4
 260:	05 c0       	rjmp	.+10     	; 0x26c <lcd_write+0x92>
 262:	80 91 1a 01 	lds	r24, 0x011A
 266:	80 61       	ori	r24, 0x10	; 16
 268:	80 93 1a 01 	sts	0x011A, r24
	pcf8574_setoutput(LCD_PCF8574_DEVICEID, dataport);
 26c:	60 91 1a 01 	lds	r22, 0x011A
 270:	80 e0       	ldi	r24, 0x00	; 0
 272:	0e 94 8c 02 	call	0x518	; 0x518 <pcf8574_setoutput>
	lcd_e_toggle();
 276:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <toggle_e>

	/* output low nibble */
	dataport &= ~_BV(LCD_DATA3_PIN);
 27a:	80 91 1a 01 	lds	r24, 0x011A
 27e:	8f 77       	andi	r24, 0x7F	; 127
 280:	80 93 1a 01 	sts	0x011A, r24
	dataport &= ~_BV(LCD_DATA2_PIN);
 284:	80 91 1a 01 	lds	r24, 0x011A
 288:	8f 7b       	andi	r24, 0xBF	; 191
 28a:	80 93 1a 01 	sts	0x011A, r24
	dataport &= ~_BV(LCD_DATA1_PIN);
 28e:	80 91 1a 01 	lds	r24, 0x011A
 292:	8f 7d       	andi	r24, 0xDF	; 223
 294:	80 93 1a 01 	sts	0x011A, r24
	dataport &= ~_BV(LCD_DATA0_PIN);
 298:	80 91 1a 01 	lds	r24, 0x011A
 29c:	8f 7e       	andi	r24, 0xEF	; 239
 29e:	80 93 1a 01 	sts	0x011A, r24
	if(data & 0x08) dataport |= _BV(LCD_DATA3_PIN);
 2a2:	c3 ff       	sbrs	r28, 3
 2a4:	05 c0       	rjmp	.+10     	; 0x2b0 <lcd_write+0xd6>
 2a6:	80 91 1a 01 	lds	r24, 0x011A
 2aa:	80 68       	ori	r24, 0x80	; 128
 2ac:	80 93 1a 01 	sts	0x011A, r24
	if(data & 0x04) dataport |= _BV(LCD_DATA2_PIN);
 2b0:	c2 ff       	sbrs	r28, 2
 2b2:	05 c0       	rjmp	.+10     	; 0x2be <lcd_write+0xe4>
 2b4:	80 91 1a 01 	lds	r24, 0x011A
 2b8:	80 64       	ori	r24, 0x40	; 64
 2ba:	80 93 1a 01 	sts	0x011A, r24
	if(data & 0x02) dataport |= _BV(LCD_DATA1_PIN);
 2be:	c1 ff       	sbrs	r28, 1
 2c0:	05 c0       	rjmp	.+10     	; 0x2cc <lcd_write+0xf2>
 2c2:	80 91 1a 01 	lds	r24, 0x011A
 2c6:	80 62       	ori	r24, 0x20	; 32
 2c8:	80 93 1a 01 	sts	0x011A, r24
	if(data & 0x01) dataport |= _BV(LCD_DATA0_PIN);
 2cc:	c0 ff       	sbrs	r28, 0
 2ce:	05 c0       	rjmp	.+10     	; 0x2da <lcd_write+0x100>
 2d0:	80 91 1a 01 	lds	r24, 0x011A
 2d4:	80 61       	ori	r24, 0x10	; 16
 2d6:	80 93 1a 01 	sts	0x011A, r24
	pcf8574_setoutput(LCD_PCF8574_DEVICEID, dataport);
 2da:	60 91 1a 01 	lds	r22, 0x011A
 2de:	80 e0       	ldi	r24, 0x00	; 0
 2e0:	0e 94 8c 02 	call	0x518	; 0x518 <pcf8574_setoutput>
	lcd_e_toggle();
 2e4:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <toggle_e>

	/* all data pins high (inactive) */
	dataport |= _BV(LCD_DATA0_PIN);
 2e8:	80 91 1a 01 	lds	r24, 0x011A
 2ec:	80 61       	ori	r24, 0x10	; 16
 2ee:	80 93 1a 01 	sts	0x011A, r24
	dataport |= _BV(LCD_DATA1_PIN);
 2f2:	80 91 1a 01 	lds	r24, 0x011A
 2f6:	80 62       	ori	r24, 0x20	; 32
 2f8:	80 93 1a 01 	sts	0x011A, r24
	dataport |= _BV(LCD_DATA2_PIN);
 2fc:	80 91 1a 01 	lds	r24, 0x011A
 300:	80 64       	ori	r24, 0x40	; 64
 302:	80 93 1a 01 	sts	0x011A, r24
	dataport |= _BV(LCD_DATA3_PIN);
 306:	80 91 1a 01 	lds	r24, 0x011A
 30a:	80 68       	ori	r24, 0x80	; 128
 30c:	80 93 1a 01 	sts	0x011A, r24
	pcf8574_setoutput(LCD_PCF8574_DEVICEID, dataport);
 310:	60 91 1a 01 	lds	r22, 0x011A
 314:	80 e0       	ldi	r24, 0x00	; 0
 316:	0e 94 8c 02 	call	0x518	; 0x518 <pcf8574_setoutput>
}
 31a:	cf 91       	pop	r28
 31c:	08 95       	ret

0000031e <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
 31e:	cf 93       	push	r28
 320:	c8 2f       	mov	r28, r24
    lcd_waitbusy();
 322:	0e 94 d6 00 	call	0x1ac	; 0x1ac <lcd_waitbusy>
    lcd_write(cmd,0);
 326:	60 e0       	ldi	r22, 0x00	; 0
 328:	8c 2f       	mov	r24, r28
 32a:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_write>
}
 32e:	cf 91       	pop	r28
 330:	08 95       	ret

00000332 <lcd_gotoxy>:
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
#endif
#if LCD_LINES==4
    if ( y==0 )
 332:	61 11       	cpse	r22, r1
 334:	04 c0       	rjmp	.+8      	; 0x33e <lcd_gotoxy+0xc>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
 336:	80 58       	subi	r24, 0x80	; 128
 338:	0e 94 8f 01 	call	0x31e	; 0x31e <lcd_command>
 33c:	08 95       	ret
    else if ( y==1)
 33e:	61 30       	cpi	r22, 0x01	; 1
 340:	21 f4       	brne	.+8      	; 0x34a <lcd_gotoxy+0x18>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
 342:	80 54       	subi	r24, 0x40	; 64
 344:	0e 94 8f 01 	call	0x31e	; 0x31e <lcd_command>
 348:	08 95       	ret
    else if ( y==2)
 34a:	62 30       	cpi	r22, 0x02	; 2
 34c:	21 f4       	brne	.+8      	; 0x356 <lcd_gotoxy+0x24>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE3+x);
 34e:	8c 56       	subi	r24, 0x6C	; 108
 350:	0e 94 8f 01 	call	0x31e	; 0x31e <lcd_command>
 354:	08 95       	ret
    else /* y==3 */
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE4+x);
 356:	8c 52       	subi	r24, 0x2C	; 44
 358:	0e 94 8f 01 	call	0x31e	; 0x31e <lcd_command>
 35c:	08 95       	ret

0000035e <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1<<LCD_CLR);
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	0e 94 8f 01 	call	0x31e	; 0x31e <lcd_command>
 364:	08 95       	ret

00000366 <lcd_led>:
/*************************************************************************
Set illumination pin
*************************************************************************/
void lcd_led(uint8_t onoff)
{
	if(onoff)
 366:	88 23       	and	r24, r24
 368:	31 f0       	breq	.+12     	; 0x376 <lcd_led+0x10>
		dataport &= ~_BV(LCD_LED_PIN);
 36a:	80 91 1a 01 	lds	r24, 0x011A
 36e:	87 7f       	andi	r24, 0xF7	; 247
 370:	80 93 1a 01 	sts	0x011A, r24
 374:	05 c0       	rjmp	.+10     	; 0x380 <lcd_led+0x1a>
	else
		dataport |= _BV(LCD_LED_PIN);
 376:	80 91 1a 01 	lds	r24, 0x011A
 37a:	88 60       	ori	r24, 0x08	; 8
 37c:	80 93 1a 01 	sts	0x011A, r24
	pcf8574_setoutput(LCD_PCF8574_DEVICEID, dataport);
 380:	60 91 1a 01 	lds	r22, 0x011A
 384:	80 e0       	ldi	r24, 0x00	; 0
 386:	0e 94 8c 02 	call	0x518	; 0x518 <pcf8574_setoutput>
 38a:	08 95       	ret

0000038c <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
 38c:	cf 93       	push	r28
 38e:	c8 2f       	mov	r28, r24
    uint8_t pos;

    pos = lcd_waitbusy();   // read busy-flag and address counter
 390:	0e 94 d6 00 	call	0x1ac	; 0x1ac <lcd_waitbusy>
    if (c=='\n')
 394:	ca 30       	cpi	r28, 0x0A	; 10
 396:	a9 f4       	brne	.+42     	; 0x3c2 <lcd_putc+0x36>
        addressCounter = LCD_START_LINE2;
    else
        addressCounter = LCD_START_LINE1;
#endif
#if LCD_LINES==4
    if ( pos < LCD_START_LINE3 )
 398:	84 31       	cpi	r24, 0x14	; 20
 39a:	50 f0       	brcs	.+20     	; 0x3b0 <lcd_putc+0x24>
        addressCounter = LCD_START_LINE2;
    else if ( (pos >= LCD_START_LINE2) && (pos < LCD_START_LINE4) )
 39c:	90 ec       	ldi	r25, 0xC0	; 192
 39e:	98 0f       	add	r25, r24
 3a0:	94 31       	cpi	r25, 0x14	; 20
 3a2:	40 f0       	brcs	.+16     	; 0x3b4 <lcd_putc+0x28>
        addressCounter = LCD_START_LINE3;
    else if ( (pos >= LCD_START_LINE3) && (pos < LCD_START_LINE2) )
 3a4:	9c ee       	ldi	r25, 0xEC	; 236
 3a6:	98 0f       	add	r25, r24
 3a8:	9c 32       	cpi	r25, 0x2C	; 44
 3aa:	30 f4       	brcc	.+12     	; 0x3b8 <lcd_putc+0x2c>
        addressCounter = LCD_START_LINE4;
 3ac:	84 e5       	ldi	r24, 0x54	; 84
 3ae:	05 c0       	rjmp	.+10     	; 0x3ba <lcd_putc+0x2e>
    else
        addressCounter = LCD_START_LINE1;
#endif
#if LCD_LINES==4
    if ( pos < LCD_START_LINE3 )
        addressCounter = LCD_START_LINE2;
 3b0:	80 e4       	ldi	r24, 0x40	; 64
 3b2:	03 c0       	rjmp	.+6      	; 0x3ba <lcd_putc+0x2e>
    else if ( (pos >= LCD_START_LINE2) && (pos < LCD_START_LINE4) )
        addressCounter = LCD_START_LINE3;
 3b4:	84 e1       	ldi	r24, 0x14	; 20
 3b6:	01 c0       	rjmp	.+2      	; 0x3ba <lcd_putc+0x2e>
    else if ( (pos >= LCD_START_LINE3) && (pos < LCD_START_LINE2) )
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
 3b8:	80 e0       	ldi	r24, 0x00	; 0
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
 3ba:	80 58       	subi	r24, 0x80	; 128
 3bc:	0e 94 8f 01 	call	0x31e	; 0x31e <lcd_command>
 3c0:	21 c0       	rjmp	.+66     	; 0x404 <lcd_putc+0x78>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE2,0);    
        }else if ( pos == LCD_START_LINE2+LCD_DISP_LENGTH ){
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#elif LCD_LINES==4
        if ( pos == LCD_START_LINE1+LCD_DISP_LENGTH ) {
 3c2:	84 31       	cpi	r24, 0x14	; 20
 3c4:	29 f4       	brne	.+10     	; 0x3d0 <lcd_putc+0x44>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE2,0);    
 3c6:	60 e0       	ldi	r22, 0x00	; 0
 3c8:	80 ec       	ldi	r24, 0xC0	; 192
 3ca:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_write>
 3ce:	14 c0       	rjmp	.+40     	; 0x3f8 <lcd_putc+0x6c>
        }else if ( pos == LCD_START_LINE2+LCD_DISP_LENGTH ) {
 3d0:	84 35       	cpi	r24, 0x54	; 84
 3d2:	29 f4       	brne	.+10     	; 0x3de <lcd_putc+0x52>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE3,0);
 3d4:	60 e0       	ldi	r22, 0x00	; 0
 3d6:	84 e9       	ldi	r24, 0x94	; 148
 3d8:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_write>
 3dc:	0d c0       	rjmp	.+26     	; 0x3f8 <lcd_putc+0x6c>
        }else if ( pos == LCD_START_LINE3+LCD_DISP_LENGTH ) {
 3de:	88 32       	cpi	r24, 0x28	; 40
 3e0:	29 f4       	brne	.+10     	; 0x3ec <lcd_putc+0x60>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE4,0);
 3e2:	60 e0       	ldi	r22, 0x00	; 0
 3e4:	84 ed       	ldi	r24, 0xD4	; 212
 3e6:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_write>
 3ea:	06 c0       	rjmp	.+12     	; 0x3f8 <lcd_putc+0x6c>
        }else if ( pos == LCD_START_LINE4+LCD_DISP_LENGTH ) {
 3ec:	88 36       	cpi	r24, 0x68	; 104
 3ee:	21 f4       	brne	.+8      	; 0x3f8 <lcd_putc+0x6c>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
 3f0:	60 e0       	ldi	r22, 0x00	; 0
 3f2:	80 e8       	ldi	r24, 0x80	; 128
 3f4:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_write>
        }
#endif
        lcd_waitbusy();
 3f8:	0e 94 d6 00 	call	0x1ac	; 0x1ac <lcd_waitbusy>
#endif
        lcd_write(c, 1);
 3fc:	61 e0       	ldi	r22, 0x01	; 1
 3fe:	8c 2f       	mov	r24, r28
 400:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_write>
    }

}/* lcd_putc */
 404:	cf 91       	pop	r28
 406:	08 95       	ret

00000408 <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
 408:	cf 93       	push	r28
 40a:	df 93       	push	r29
    register char c;

    while ( (c = *s++) ) {
 40c:	ec 01       	movw	r28, r24
 40e:	21 96       	adiw	r28, 0x01	; 1
 410:	fc 01       	movw	r30, r24
 412:	80 81       	ld	r24, Z
 414:	88 23       	and	r24, r24
 416:	29 f0       	breq	.+10     	; 0x422 <lcd_puts+0x1a>
        lcd_putc(c);
 418:	0e 94 c6 01 	call	0x38c	; 0x38c <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
 41c:	89 91       	ld	r24, Y+
 41e:	81 11       	cpse	r24, r1
 420:	fb cf       	rjmp	.-10     	; 0x418 <lcd_puts+0x10>
        lcd_putc(c);
    }

}/* lcd_puts */
 422:	df 91       	pop	r29
 424:	cf 91       	pop	r28
 426:	08 95       	ret

00000428 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 428:	cf 93       	push	r28
 42a:	c8 2f       	mov	r28, r24
	#if LCD_PCF8574_INIT == 1
	//init pcf8574
	pcf8574_init();
 42c:	0e 94 64 02 	call	0x4c8	; 0x4c8 <pcf8574_init>
	#endif

	dataport = 0;
 430:	10 92 1a 01 	sts	0x011A, r1
	pcf8574_setoutput(LCD_PCF8574_DEVICEID, dataport);
 434:	60 91 1a 01 	lds	r22, 0x011A
 438:	80 e0       	ldi	r24, 0x00	; 0
 43a:	0e 94 8c 02 	call	0x518	; 0x518 <pcf8574_setoutput>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 43e:	e0 e0       	ldi	r30, 0x00	; 0
 440:	fa ef       	ldi	r31, 0xFA	; 250
 442:	31 97       	sbiw	r30, 0x01	; 1
 444:	f1 f7       	brne	.-4      	; 0x442 <lcd_init+0x1a>
	pcf8574_setoutput(LCD_PCF8574_DEVICEID, dataport);

    delay(16000);        /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    dataport |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 446:	80 91 1a 01 	lds	r24, 0x011A
 44a:	80 62       	ori	r24, 0x20	; 32
 44c:	80 93 1a 01 	sts	0x011A, r24
    dataport |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 450:	80 91 1a 01 	lds	r24, 0x011A
 454:	80 61       	ori	r24, 0x10	; 16
 456:	80 93 1a 01 	sts	0x011A, r24
    pcf8574_setoutput(LCD_PCF8574_DEVICEID, dataport);
 45a:	60 91 1a 01 	lds	r22, 0x011A
 45e:	80 e0       	ldi	r24, 0x00	; 0
 460:	0e 94 8c 02 	call	0x518	; 0x518 <pcf8574_setoutput>

    lcd_e_toggle();
 464:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 468:	e0 e0       	ldi	r30, 0x00	; 0
 46a:	fe e4       	ldi	r31, 0x4E	; 78
 46c:	31 97       	sbiw	r30, 0x01	; 1
 46e:	f1 f7       	brne	.-4      	; 0x46c <lcd_init+0x44>

    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 470:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 474:	e0 e0       	ldi	r30, 0x00	; 0
 476:	f1 e0       	ldi	r31, 0x01	; 1
 478:	31 97       	sbiw	r30, 0x01	; 1
 47a:	f1 f7       	brne	.-4      	; 0x478 <lcd_init+0x50>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 47c:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 480:	e0 e0       	ldi	r30, 0x00	; 0
 482:	f1 e0       	ldi	r31, 0x01	; 1
 484:	31 97       	sbiw	r30, 0x01	; 1
 486:	f1 f7       	brne	.-4      	; 0x484 <lcd_init+0x5c>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    dataport &= ~_BV(LCD_DATA0_PIN);
 488:	80 91 1a 01 	lds	r24, 0x011A
 48c:	8f 7e       	andi	r24, 0xEF	; 239
 48e:	80 93 1a 01 	sts	0x011A, r24
    pcf8574_setoutput(LCD_PCF8574_DEVICEID, dataport);
 492:	60 91 1a 01 	lds	r22, 0x011A
 496:	80 e0       	ldi	r24, 0x00	; 0
 498:	0e 94 8c 02 	call	0x518	; 0x518 <pcf8574_setoutput>
    lcd_e_toggle();
 49c:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 4a0:	e0 e0       	ldi	r30, 0x00	; 0
 4a2:	f1 e0       	ldi	r31, 0x01	; 1
 4a4:	31 97       	sbiw	r30, 0x01	; 1
 4a6:	f1 f7       	brne	.-4      	; 0x4a4 <lcd_init+0x7c>
    lcd_e_toggle();
    delay(64);           /* some displays need this additional delay */
    
    /* from now the LCD only accepts 4 bit I/O, we can use lcd_command() */    

    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 4a8:	88 e2       	ldi	r24, 0x28	; 40
 4aa:	0e 94 8f 01 	call	0x31e	; 0x31e <lcd_command>

    lcd_command(LCD_DISP_OFF);              /* display off                  */
 4ae:	88 e0       	ldi	r24, 0x08	; 8
 4b0:	0e 94 8f 01 	call	0x31e	; 0x31e <lcd_command>
    lcd_clrscr();                           /* display clear                */
 4b4:	0e 94 af 01 	call	0x35e	; 0x35e <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 4b8:	86 e0       	ldi	r24, 0x06	; 6
 4ba:	0e 94 8f 01 	call	0x31e	; 0x31e <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 4be:	8c 2f       	mov	r24, r28
 4c0:	0e 94 8f 01 	call	0x31e	; 0x31e <lcd_command>

}/* lcd_init */
 4c4:	cf 91       	pop	r28
 4c6:	08 95       	ret

000004c8 <pcf8574_init>:
 * initialize
 */
void pcf8574_init() {
	#if PCF8574_I2CINIT == 1
	//init i2c
	i2c_init();
 4c8:	0e 94 53 00 	call	0xa6	; 0xa6 <i2c_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4cc:	85 e3       	ldi	r24, 0x35	; 53
 4ce:	8a 95       	dec	r24
 4d0:	f1 f7       	brne	.-4      	; 0x4ce <pcf8574_init+0x6>
 4d2:	00 00       	nop
 4d4:	80 e0       	ldi	r24, 0x00	; 0
 4d6:	90 e0       	ldi	r25, 0x00	; 0
	#endif

	//reset the pin status
	uint8_t i = 0;
	for(i=0; i<PCF8574_MAXDEVICES; i++)
		pcf8574_pinstatus[i] = 0;
 4d8:	fc 01       	movw	r30, r24
 4da:	e5 5e       	subi	r30, 0xE5	; 229
 4dc:	fe 4f       	sbci	r31, 0xFE	; 254
 4de:	10 82       	st	Z, r1
 4e0:	01 96       	adiw	r24, 0x01	; 1
	_delay_us(10);
	#endif

	//reset the pin status
	uint8_t i = 0;
	for(i=0; i<PCF8574_MAXDEVICES; i++)
 4e2:	88 30       	cpi	r24, 0x08	; 8
 4e4:	91 05       	cpc	r25, r1
 4e6:	c1 f7       	brne	.-16     	; 0x4d8 <pcf8574_init+0x10>
		pcf8574_pinstatus[i] = 0;

}
 4e8:	08 95       	ret

000004ea <pcf8574_getoutputpin>:
/*
 * get output pin status
 */
int8_t pcf8574_getoutputpin(uint8_t deviceid, uint8_t pin) {
	int8_t data = -1;
	if((deviceid >= 0 && deviceid < PCF8574_MAXDEVICES) && (pin >= 0 && pin < PCF8574_MAXPINS)) {
 4ea:	88 30       	cpi	r24, 0x08	; 8
 4ec:	88 f4       	brcc	.+34     	; 0x510 <pcf8574_getoutputpin+0x26>
 4ee:	68 30       	cpi	r22, 0x08	; 8
 4f0:	88 f4       	brcc	.+34     	; 0x514 <pcf8574_getoutputpin+0x2a>
		data = pcf8574_pinstatus[deviceid];
 4f2:	e8 2f       	mov	r30, r24
 4f4:	f0 e0       	ldi	r31, 0x00	; 0
 4f6:	e5 5e       	subi	r30, 0xE5	; 229
 4f8:	fe 4f       	sbci	r31, 0xFE	; 254
 4fa:	80 81       	ld	r24, Z
		data = (data >> pin) & 0b00000001;
 4fc:	99 27       	eor	r25, r25
 4fe:	87 fd       	sbrc	r24, 7
 500:	90 95       	com	r25
 502:	02 c0       	rjmp	.+4      	; 0x508 <pcf8574_getoutputpin+0x1e>
 504:	95 95       	asr	r25
 506:	87 95       	ror	r24
 508:	6a 95       	dec	r22
 50a:	e2 f7       	brpl	.-8      	; 0x504 <pcf8574_getoutputpin+0x1a>
 50c:	81 70       	andi	r24, 0x01	; 1
 50e:	08 95       	ret

/*
 * get output pin status
 */
int8_t pcf8574_getoutputpin(uint8_t deviceid, uint8_t pin) {
	int8_t data = -1;
 510:	8f ef       	ldi	r24, 0xFF	; 255
 512:	08 95       	ret
 514:	8f ef       	ldi	r24, 0xFF	; 255
	if((deviceid >= 0 && deviceid < PCF8574_MAXDEVICES) && (pin >= 0 && pin < PCF8574_MAXPINS)) {
		data = pcf8574_pinstatus[deviceid];
		data = (data >> pin) & 0b00000001;
	}
	return data;
}
 516:	08 95       	ret

00000518 <pcf8574_setoutput>:

/*
 * set output pins
 */
int8_t pcf8574_setoutput(uint8_t deviceid, uint8_t data) {
 518:	cf 93       	push	r28
 51a:	c6 2f       	mov	r28, r22
	if((deviceid >= 0 && deviceid < PCF8574_MAXDEVICES)) {
 51c:	88 30       	cpi	r24, 0x08	; 8
 51e:	80 f4       	brcc	.+32     	; 0x540 <pcf8574_setoutput+0x28>
		pcf8574_pinstatus[deviceid] = data;
 520:	e8 2f       	mov	r30, r24
 522:	f0 e0       	ldi	r31, 0x00	; 0
 524:	e5 5e       	subi	r30, 0xE5	; 229
 526:	fe 4f       	sbci	r31, 0xFE	; 254
 528:	60 83       	st	Z, r22
		i2c_start(((PCF8574_ADDRBASE+deviceid)<<1) | I2C_WRITE);
 52a:	81 5c       	subi	r24, 0xC1	; 193
 52c:	88 0f       	add	r24, r24
 52e:	0e 94 59 00 	call	0xb2	; 0xb2 <i2c_start>
		i2c_write(data);
 532:	8c 2f       	mov	r24, r28
 534:	0e 94 89 00 	call	0x112	; 0x112 <i2c_write>
		i2c_stop();
 538:	0e 94 80 00 	call	0x100	; 0x100 <i2c_stop>
		return 0;
 53c:	80 e0       	ldi	r24, 0x00	; 0
 53e:	01 c0       	rjmp	.+2      	; 0x542 <pcf8574_setoutput+0x2a>
	}
	return -1;
 540:	8f ef       	ldi	r24, 0xFF	; 255
}
 542:	cf 91       	pop	r28
 544:	08 95       	ret

00000546 <pcf8574_setoutputpin>:
}

/*
 * set output pin
 */
int8_t pcf8574_setoutputpin(uint8_t deviceid, uint8_t pin, uint8_t data) {
 546:	cf 93       	push	r28
	if((deviceid >= 0 && deviceid < PCF8574_MAXDEVICES) && (pin >= 0 && pin < PCF8574_MAXPINS)) {
 548:	88 30       	cpi	r24, 0x08	; 8
 54a:	70 f5       	brcc	.+92     	; 0x5a8 <pcf8574_setoutputpin+0x62>
 54c:	68 30       	cpi	r22, 0x08	; 8
 54e:	70 f5       	brcc	.+92     	; 0x5ac <pcf8574_setoutputpin+0x66>
	    uint8_t b = 0;
	    b = pcf8574_pinstatus[deviceid];
 550:	28 2f       	mov	r18, r24
 552:	30 e0       	ldi	r19, 0x00	; 0
 554:	f9 01       	movw	r30, r18
 556:	e5 5e       	subi	r30, 0xE5	; 229
 558:	fe 4f       	sbci	r31, 0xFE	; 254
 55a:	c0 81       	ld	r28, Z
	    b = (data != 0) ? (b | (1 << pin)) : (b & ~(1 << pin));
 55c:	44 23       	and	r20, r20
 55e:	51 f0       	breq	.+20     	; 0x574 <pcf8574_setoutputpin+0x2e>
 560:	e1 e0       	ldi	r30, 0x01	; 1
 562:	f0 e0       	ldi	r31, 0x00	; 0
 564:	af 01       	movw	r20, r30
 566:	02 c0       	rjmp	.+4      	; 0x56c <pcf8574_setoutputpin+0x26>
 568:	44 0f       	add	r20, r20
 56a:	55 1f       	adc	r21, r21
 56c:	6a 95       	dec	r22
 56e:	e2 f7       	brpl	.-8      	; 0x568 <pcf8574_setoutputpin+0x22>
 570:	c4 2b       	or	r28, r20
 572:	0b c0       	rjmp	.+22     	; 0x58a <pcf8574_setoutputpin+0x44>
 574:	41 e0       	ldi	r20, 0x01	; 1
 576:	50 e0       	ldi	r21, 0x00	; 0
 578:	fa 01       	movw	r30, r20
 57a:	02 c0       	rjmp	.+4      	; 0x580 <pcf8574_setoutputpin+0x3a>
 57c:	ee 0f       	add	r30, r30
 57e:	ff 1f       	adc	r31, r31
 580:	6a 95       	dec	r22
 582:	e2 f7       	brpl	.-8      	; 0x57c <pcf8574_setoutputpin+0x36>
 584:	bf 01       	movw	r22, r30
 586:	60 95       	com	r22
 588:	c6 23       	and	r28, r22
	    pcf8574_pinstatus[deviceid] = b;
 58a:	f9 01       	movw	r30, r18
 58c:	e5 5e       	subi	r30, 0xE5	; 229
 58e:	fe 4f       	sbci	r31, 0xFE	; 254
 590:	c0 83       	st	Z, r28
	    //update device
		i2c_start(((PCF8574_ADDRBASE+deviceid)<<1) | I2C_WRITE);
 592:	81 5c       	subi	r24, 0xC1	; 193
 594:	88 0f       	add	r24, r24
 596:	0e 94 59 00 	call	0xb2	; 0xb2 <i2c_start>
		i2c_write(b);
 59a:	8c 2f       	mov	r24, r28
 59c:	0e 94 89 00 	call	0x112	; 0x112 <i2c_write>
		i2c_stop();
 5a0:	0e 94 80 00 	call	0x100	; 0x100 <i2c_stop>
		return 0;
 5a4:	80 e0       	ldi	r24, 0x00	; 0
 5a6:	03 c0       	rjmp	.+6      	; 0x5ae <pcf8574_setoutputpin+0x68>
	}
	return -1;
 5a8:	8f ef       	ldi	r24, 0xFF	; 255
 5aa:	01 c0       	rjmp	.+2      	; 0x5ae <pcf8574_setoutputpin+0x68>
 5ac:	8f ef       	ldi	r24, 0xFF	; 255
}
 5ae:	cf 91       	pop	r28
 5b0:	08 95       	ret

000005b2 <pcf8574_setoutputpinhigh>:

/*
 * set output pin high
 */
int8_t pcf8574_setoutputpinhigh(uint8_t deviceid, uint8_t pin) {
	return pcf8574_setoutputpin(deviceid, pin, 1);
 5b2:	41 e0       	ldi	r20, 0x01	; 1
 5b4:	0e 94 a3 02 	call	0x546	; 0x546 <pcf8574_setoutputpin>
}
 5b8:	08 95       	ret

000005ba <pcf8574_setoutputpinlow>:

/*
 * set output pin low
 */
int8_t pcf8574_setoutputpinlow(uint8_t deviceid, uint8_t pin) {
	return pcf8574_setoutputpin(deviceid, pin, 0);
 5ba:	40 e0       	ldi	r20, 0x00	; 0
 5bc:	0e 94 a3 02 	call	0x546	; 0x546 <pcf8574_setoutputpin>
}
 5c0:	08 95       	ret

000005c2 <SPI_init>:
#include "lcdpcf8574/lcdpcf8574.h"

void SPI_init()
{
	//set MOSI, SCK and SS as output
	DDRB |= (1 << PORTB3) | (1 << PORTB5) | (1 << PORTB2);
 5c2:	84 b1       	in	r24, 0x04	; 4
 5c4:	8c 62       	ori	r24, 0x2C	; 44
 5c6:	84 b9       	out	0x04, r24	; 4
	//enable SPI, set as Master, Prescaler = F_CPU / 16
	SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR0);
 5c8:	81 e5       	ldi	r24, 0x51	; 81
 5ca:	8c bd       	out	0x2c, r24	; 44
 5cc:	08 95       	ret

000005ce <SPI_write>:
}

void SPI_write(char data)
{
	//write data into the SPI data register
	SPDR = data;
 5ce:	8e bd       	out	0x2e, r24	; 46
	//wait till transmission is complete
	while(!(SPSR & (1 << SPIF)));
 5d0:	0d b4       	in	r0, 0x2d	; 45
 5d2:	07 fe       	sbrs	r0, 7
 5d4:	fd cf       	rjmp	.-6      	; 0x5d0 <SPI_write+0x2>
}
 5d6:	08 95       	ret

000005d8 <main>:
	//return received data
	return (SPDR);
}

int main(void)
{
 5d8:	cf 93       	push	r28
 5da:	df 93       	push	r29
 5dc:	cd b7       	in	r28, 0x3d	; 61
 5de:	de b7       	in	r29, 0x3e	; 62
 5e0:	2a 97       	sbiw	r28, 0x0a	; 10
 5e2:	0f b6       	in	r0, 0x3f	; 63
 5e4:	f8 94       	cli
 5e6:	de bf       	out	0x3e, r29	; 62
 5e8:	0f be       	out	0x3f, r0	; 63
 5ea:	cd bf       	out	0x3d, r28	; 61
	//variable used to illuminate LCD (0 = on, 1 = off)
	uint8_t led = 0;
	//counter sent through SPI
	char count = 0x00;
	//SPI initialization
	SPI_init();
 5ec:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <SPI_init>
	//LCD initialization
	lcd_init(LCD_DISP_ON);
 5f0:	8c e0       	ldi	r24, 0x0C	; 12
 5f2:	0e 94 14 02 	call	0x428	; 0x428 <lcd_init>
	//set the LCD to be illuminated
	lcd_led(led);
 5f6:	80 e0       	ldi	r24, 0x00	; 0
 5f8:	0e 94 b3 01 	call	0x366	; 0x366 <lcd_led>
int main(void)
{
	//variable used to illuminate LCD (0 = on, 1 = off)
	uint8_t led = 0;
	//counter sent through SPI
	char count = 0x00;
 5fc:	10 e0       	ldi	r17, 0x00	; 0
	//array of chars used to convert the counter with itoa function
	char buffer[10];
	
	while(1)
	{	
		lcd_clrscr();
 5fe:	0e 94 af 01 	call	0x35e	; 0x35e <lcd_clrscr>
		lcd_gotoxy(0, 0);
 602:	60 e0       	ldi	r22, 0x00	; 0
 604:	80 e0       	ldi	r24, 0x00	; 0
 606:	0e 94 99 01 	call	0x332	; 0x332 <lcd_gotoxy>
		lcd_puts("Master Device");
 60a:	80 e0       	ldi	r24, 0x00	; 0
 60c:	91 e0       	ldi	r25, 0x01	; 1
 60e:	0e 94 04 02 	call	0x408	; 0x408 <lcd_puts>
		lcd_gotoxy(0, 1);
 612:	61 e0       	ldi	r22, 0x01	; 1
 614:	80 e0       	ldi	r24, 0x00	; 0
 616:	0e 94 99 01 	call	0x332	; 0x332 <lcd_gotoxy>
		lcd_puts("Data Sent:");
 61a:	8e e0       	ldi	r24, 0x0E	; 14
 61c:	91 e0       	ldi	r25, 0x01	; 1
 61e:	0e 94 04 02 	call	0x408	; 0x408 <lcd_puts>
		SPI_write(count);
 622:	81 2f       	mov	r24, r17
 624:	0e 94 e7 02 	call	0x5ce	; 0x5ce <SPI_write>
		lcd_gotoxy(11, 1);
 628:	61 e0       	ldi	r22, 0x01	; 1
 62a:	8b e0       	ldi	r24, 0x0B	; 11
 62c:	0e 94 99 01 	call	0x332	; 0x332 <lcd_gotoxy>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 630:	4a e0       	ldi	r20, 0x0A	; 10
 632:	be 01       	movw	r22, r28
 634:	6f 5f       	subi	r22, 0xFF	; 255
 636:	7f 4f       	sbci	r23, 0xFF	; 255
 638:	81 2f       	mov	r24, r17
 63a:	90 e0       	ldi	r25, 0x00	; 0
 63c:	0e 94 2f 03 	call	0x65e	; 0x65e <__itoa_ncheck>
		itoa(count, buffer, 10);
		lcd_puts(buffer);
 640:	ce 01       	movw	r24, r28
 642:	01 96       	adiw	r24, 0x01	; 1
 644:	0e 94 04 02 	call	0x408	; 0x408 <lcd_puts>
		count++;
 648:	1f 5f       	subi	r17, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 64a:	2f ef       	ldi	r18, 0xFF	; 255
 64c:	83 ed       	ldi	r24, 0xD3	; 211
 64e:	90 e3       	ldi	r25, 0x30	; 48
 650:	21 50       	subi	r18, 0x01	; 1
 652:	80 40       	sbci	r24, 0x00	; 0
 654:	90 40       	sbci	r25, 0x00	; 0
 656:	e1 f7       	brne	.-8      	; 0x650 <main+0x78>
 658:	00 c0       	rjmp	.+0      	; 0x65a <main+0x82>
 65a:	00 00       	nop
 65c:	d0 cf       	rjmp	.-96     	; 0x5fe <main+0x26>

0000065e <__itoa_ncheck>:
 65e:	bb 27       	eor	r27, r27
 660:	4a 30       	cpi	r20, 0x0A	; 10
 662:	31 f4       	brne	.+12     	; 0x670 <__itoa_ncheck+0x12>
 664:	99 23       	and	r25, r25
 666:	22 f4       	brpl	.+8      	; 0x670 <__itoa_ncheck+0x12>
 668:	bd e2       	ldi	r27, 0x2D	; 45
 66a:	90 95       	com	r25
 66c:	81 95       	neg	r24
 66e:	9f 4f       	sbci	r25, 0xFF	; 255
 670:	0c 94 3b 03 	jmp	0x676	; 0x676 <__utoa_common>

00000674 <__utoa_ncheck>:
 674:	bb 27       	eor	r27, r27

00000676 <__utoa_common>:
 676:	fb 01       	movw	r30, r22
 678:	55 27       	eor	r21, r21
 67a:	aa 27       	eor	r26, r26
 67c:	88 0f       	add	r24, r24
 67e:	99 1f       	adc	r25, r25
 680:	aa 1f       	adc	r26, r26
 682:	a4 17       	cp	r26, r20
 684:	10 f0       	brcs	.+4      	; 0x68a <__utoa_common+0x14>
 686:	a4 1b       	sub	r26, r20
 688:	83 95       	inc	r24
 68a:	50 51       	subi	r21, 0x10	; 16
 68c:	b9 f7       	brne	.-18     	; 0x67c <__utoa_common+0x6>
 68e:	a0 5d       	subi	r26, 0xD0	; 208
 690:	aa 33       	cpi	r26, 0x3A	; 58
 692:	08 f0       	brcs	.+2      	; 0x696 <__utoa_common+0x20>
 694:	a9 5d       	subi	r26, 0xD9	; 217
 696:	a1 93       	st	Z+, r26
 698:	00 97       	sbiw	r24, 0x00	; 0
 69a:	79 f7       	brne	.-34     	; 0x67a <__utoa_common+0x4>
 69c:	b1 11       	cpse	r27, r1
 69e:	b1 93       	st	Z+, r27
 6a0:	11 92       	st	Z+, r1
 6a2:	cb 01       	movw	r24, r22
 6a4:	0c 94 54 03 	jmp	0x6a8	; 0x6a8 <strrev>

000006a8 <strrev>:
 6a8:	dc 01       	movw	r26, r24
 6aa:	fc 01       	movw	r30, r24
 6ac:	67 2f       	mov	r22, r23
 6ae:	71 91       	ld	r23, Z+
 6b0:	77 23       	and	r23, r23
 6b2:	e1 f7       	brne	.-8      	; 0x6ac <strrev+0x4>
 6b4:	32 97       	sbiw	r30, 0x02	; 2
 6b6:	04 c0       	rjmp	.+8      	; 0x6c0 <strrev+0x18>
 6b8:	7c 91       	ld	r23, X
 6ba:	6d 93       	st	X+, r22
 6bc:	70 83       	st	Z, r23
 6be:	62 91       	ld	r22, -Z
 6c0:	ae 17       	cp	r26, r30
 6c2:	bf 07       	cpc	r27, r31
 6c4:	c8 f3       	brcs	.-14     	; 0x6b8 <strrev+0x10>
 6c6:	08 95       	ret

000006c8 <_exit>:
 6c8:	f8 94       	cli

000006ca <__stop_program>:
 6ca:	ff cf       	rjmp	.-2      	; 0x6ca <__stop_program>
