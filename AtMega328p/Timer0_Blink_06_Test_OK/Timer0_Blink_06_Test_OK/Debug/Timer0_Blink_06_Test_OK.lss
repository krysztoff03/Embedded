
Timer0_Blink_06_Test_OK.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800100  00800100  00000168  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00000168  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000030  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000000d7  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000a6  00000000  00000000  0000029f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000000ed  00000000  00000000  00000345  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000054  00000000  00000000  00000434  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000017b  00000000  00000000  00000488  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000003c  00000000  00000000  00000603  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  0000063f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 66 00 	call	0xcc	; 0xcc <main>
  88:	0c 94 78 00 	jmp	0xf0	; 0xf0 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_16>:

/* Variable which counts the number of overflows */
volatile uint8_t totalOverflows;

ISR(TIMER0_OVF_vect)
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
	/* Keep the number of overflows */
	totalOverflows++;
  9c:	80 91 00 01 	lds	r24, 0x0100
  a0:	8f 5f       	subi	r24, 0xFF	; 255
  a2:	80 93 00 01 	sts	0x0100, r24
}
  a6:	8f 91       	pop	r24
  a8:	0f 90       	pop	r0
  aa:	0f be       	out	0x3f, r0	; 63
  ac:	0f 90       	pop	r0
  ae:	1f 90       	pop	r1
  b0:	18 95       	reti

000000b2 <timer0_init>:
void timer0_init();

void timer0_init()
{
	/* Set up Timer0 with Prescaler = 1024 */
	TCCR0B |= (1 << CS02) | (1 << CS00);
  b2:	85 b5       	in	r24, 0x25	; 37
  b4:	85 60       	ori	r24, 0x05	; 5
  b6:	85 bd       	out	0x25, r24	; 37
	/* Initialize counter */
	TCNT0 = 0;
  b8:	16 bc       	out	0x26, r1	; 38
	/* Enable overflow interrupt */
	TIMSK0 |= (1 << TOIE0);
  ba:	ee e6       	ldi	r30, 0x6E	; 110
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	81 60       	ori	r24, 0x01	; 1
  c2:	80 83       	st	Z, r24
	/* Enable global interrupts */
	sei();
  c4:	78 94       	sei
	/* Initialize overflows counter */
	totalOverflows = 0;
  c6:	10 92 00 01 	sts	0x0100, r1
  ca:	08 95       	ret

000000cc <main>:
}

int main(void)
{
	/* Initialize Timer0 */
	timer0_init();
  cc:	0e 94 59 00 	call	0xb2	; 0xb2 <timer0_init>
	/* Set Pin D3 as output */
	DDRD |= LEDS;
  d0:	53 9a       	sbi	0x0a, 3	; 10
		{
			/* Check if the timer count reaches 195 */
			if(TCNT0 >= 195)
			{
				/* Toggle the LEDs */
				PORTD ^= LEDS;
  d2:	98 e0       	ldi	r25, 0x08	; 8
	/* Set Pin D3 as output */
	DDRD |= LEDS;
    while(1)
    {
		/* Check if overflows number = 36*/
        if(totalOverflows >= 36)
  d4:	80 91 00 01 	lds	r24, 0x0100
  d8:	84 32       	cpi	r24, 0x24	; 36
  da:	e0 f3       	brcs	.-8      	; 0xd4 <main+0x8>
		{
			/* Check if the timer count reaches 195 */
			if(TCNT0 >= 195)
  dc:	86 b5       	in	r24, 0x26	; 38
  de:	83 3c       	cpi	r24, 0xC3	; 195
  e0:	c8 f3       	brcs	.-14     	; 0xd4 <main+0x8>
			{
				/* Toggle the LEDs */
				PORTD ^= LEDS;
  e2:	8b b1       	in	r24, 0x0b	; 11
  e4:	89 27       	eor	r24, r25
  e6:	8b b9       	out	0x0b, r24	; 11
				/* Reset counter */
				TCNT0 = 0;
  e8:	16 bc       	out	0x26, r1	; 38
				/* Reset overflows counter */
				totalOverflows = 0;
  ea:	10 92 00 01 	sts	0x0100, r1
  ee:	f2 cf       	rjmp	.-28     	; 0xd4 <main+0x8>

000000f0 <_exit>:
  f0:	f8 94       	cli

000000f2 <__stop_program>:
  f2:	ff cf       	rjmp	.-2      	; 0xf2 <__stop_program>
